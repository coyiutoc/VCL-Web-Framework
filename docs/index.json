[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "scripts/experiment-properties/balancing/balancing_controller.js",
    "content": "import {initialize_latin_square} from \"/scripts/experiment-properties/balancing/generators/latin_square_generator.js\";\nimport {initialize_random_order} from \"/scripts/experiment-properties/balancing/generators/random_generator.js\";\n\nexport {balance_subconditions};\n\n/**\n * Returns the balanced order of the subconditions given balancing type,\n * experiment, and number of subconditions.\n *\n * @param {string}     \t\tbalancing_type\n * @param {experiment_name} name of experiment\n * @param {dataset_length}  length of dataset AKA number of subconditions\n *\n * @return {[]}\t\t  \t\tarray of indices, representing each subcondition in the dataset.\n */\nfunction balance_subconditions(balancing_type, experiment_name, dataset_length){\n\n\t// BALANCING_TYPES constant from /config/balancing-config.js\n\tif (BALANCING_TYPES[balancing_type] === undefined) {\n\t\tthrow Error(balancing_type + \" balancing type is not supported.\");\n\t}\n\n\t// EXPERIMENTS constant from /config/experiments-config.js\n\tif (EXPERIMENTS[experiment_name][\"balancing_type\"].includes(balancing_type)){\n\n\t\tswitch (balancing_type) {\n\t\t\tcase \"latin_square\":\n\t\t\t\treturn initialize_latin_square(dataset_length);\n\t\t\tcase \"random\":\n\t\t\t\treturn initialize_random_order(dataset_length);\n\t\t\tdefault:\n\t\t\t\tthrow Error(balancing_type + \" has not been defined.\");\n\t\t}\n\t}\n}",
    "static": true,
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/public/scripts/experiment-properties/balancing/balancing_controller.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "function",
    "name": "balance_subconditions",
    "memberof": "scripts/experiment-properties/balancing/balancing_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/balancing/balancing_controller.js~balance_subconditions",
    "access": "public",
    "export": true,
    "importPath": "VCL Framework/scripts/experiment-properties/balancing/balancing_controller.js",
    "importStyle": "{balance_subconditions}",
    "description": "Returns the balanced order of the subconditions given balancing type,\nexperiment, and number of subconditions.",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "balancing_type",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "experiment_name"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "of experiment"
      },
      {
        "nullable": null,
        "types": [
          "dataset_length"
        ],
        "spread": false,
        "optional": false,
        "name": "length",
        "description": "of dataset AKA number of subconditions"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[]"
      ],
      "spread": false,
      "description": "array of indices, representing each subcondition in the dataset."
    }
  },
  {
    "__docId__": 50,
    "kind": "file",
    "name": "scripts/experiment-properties/balancing/generators/latin_square_generator.js",
    "content": "export { initialize_latin_square }\n\n/**\n * Creates a random row generating function meeting the lating square restriction\n * usage:\n *\t\t sampler = latinCube(someRow)\n *\t\t newRow = sampler() | newRow = sampler(row)\n * @param\t {Array}\t\trow samples to be randomized\n * @returns {Function} row generating function\n */\nfunction latin_square (row) {\n\tvar sN = row.length,\n\t\t\trowCount = 0\n\n\t// prepare array of row and col indices for pre-sorting\n\tvar hSort = shuffle(sequence(sN)),\n\t\t\tvSort = shuffle(hSort.slice())\n\n\treturn function nextRow (countORtarget) {\n\t\tif (rowCount === sN) return countORtarget = null\n\t\tvar target = Array.isArray(countORtarget) ? countORtarget\n\t\t\t: (countORtarget >= 0) ? Array(countORtarget)\n\t\t\t: Array(sN)\n\t\tif (target.length > sN) target.length = sN\n\n\t\tfor (var i = 0; i < target.length; ++i) {\n\t\t\tvar idx = hSort[i] + vSort[rowCount]\n\t\t\tif (idx >= sN) idx -= sN\n\t\t\ttarget[i] = row[idx]\n\t\t}\n\t\trowCount++\n\n\t\treturn target\n\t}\n}\nfunction sequence(n) {\n\tfor (var i = 0, a=Array(n); i < n; ++i) a[i] = i\n\treturn a\n}\n// modified from https://github.com/sindresorhus/array-shuffle\nfunction shuffle(arr) {\n\tvar len = arr.length\n\twhile (len) {\n\t\tvar rnd = Math.floor(Math.random() * len--)\n\t\tvar tmp = arr[len]\n\t\tarr[len] = arr[rnd]\n\t\tarr[rnd] = tmp\n\t}\n\treturn arr\n}\n\nfunction initialize_latin_square(size){\n    var array = Array.apply(null, {length: size}).map(Number.call, Number);\n    var sampler = latin_square(array);\n    var row = sampler();\n\n   \tconsole.log(\"Latin square: \" + row);\n    return row; \n}\n",
    "static": true,
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/public/scripts/experiment-properties/balancing/generators/latin_square_generator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 51,
    "kind": "function",
    "name": "latin_square",
    "memberof": "scripts/experiment-properties/balancing/generators/latin_square_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/balancing/generators/latin_square_generator.js~latin_square",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/balancing/generators/latin_square_generator.js",
    "importStyle": null,
    "description": "Creates a random row generating function meeting the lating square restriction\nusage:\n\t sampler = latinCube(someRow)\n\t newRow = sampler() | newRow = sampler(row)",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function} row generating function"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "samples to be randomized"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "row generating function"
    },
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "function",
    "name": "sequence",
    "memberof": "scripts/experiment-properties/balancing/generators/latin_square_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/balancing/generators/latin_square_generator.js~sequence",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/balancing/generators/latin_square_generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "n",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "function",
    "name": "shuffle",
    "memberof": "scripts/experiment-properties/balancing/generators/latin_square_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/balancing/generators/latin_square_generator.js~shuffle",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/balancing/generators/latin_square_generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "arr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "function",
    "name": "initialize_latin_square",
    "memberof": "scripts/experiment-properties/balancing/generators/latin_square_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/balancing/generators/latin_square_generator.js~initialize_latin_square",
    "access": "public",
    "export": true,
    "importPath": "VCL Framework/scripts/experiment-properties/balancing/generators/latin_square_generator.js",
    "importStyle": "{initialize_latin_square}",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "size",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "file",
    "name": "scripts/experiment-properties/balancing/generators/random_generator.js",
    "content": "export {initialize_random_order}\n\nfunction initialize_random_order(length) {\n\n\tlet order = [];\n\n\tfor (let i = 0; i < length; i++) {\n\t\torder.push(i);\n\t}\n\n\treturn order.sort( () => Math.random() - 0.5);\n}\n",
    "static": true,
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/public/scripts/experiment-properties/balancing/generators/random_generator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 56,
    "kind": "function",
    "name": "initialize_random_order",
    "memberof": "scripts/experiment-properties/balancing/generators/random_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/balancing/generators/random_generator.js~initialize_random_order",
    "access": "public",
    "export": true,
    "importPath": "VCL Framework/scripts/experiment-properties/balancing/generators/random_generator.js",
    "importStyle": "{initialize_random_order}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "length",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "file",
    "name": "scripts/experiment-properties/data/constants/estimation_data.js",
    "content": "export {ESTIMATION_BASE};\n\nconst TRIALS_PER_ROUND = 4;\nconst MAX_STEP_SIZE = 0.05;\nconst FILL_COLOR = '#0000FF';\nconst OUTLINE_COLOR = '#0000FF';\n\nconst ESTIMATION_BASE = {\n    shape_estimation: {\n        ref_shapes: {\n            types: [\"triangle\", \"circle\", \"square\"],\n            sizes: [2, 4, 6],\n            fill: FILL_COLOR,\n            outline: OUTLINE_COLOR,\n            rotate_by:[0, 0, 0]\n        },\n        mod_shapes: {\n            types: [[\"circle\", \"square\"],\n                [\"triangle\", \"square\"],\n                [\"triangle\", \"circle\"]],\n            sizes: [[1.2, 3.0], [3.1, 5.3], [5.0, 6.5]],\n            fill: FILL_COLOR,\n            outline: OUTLINE_COLOR,\n            rotate_by: [[0], [0], [0]]\n        },\n        trials_per_round: TRIALS_PER_ROUND,\n        max_step_size: MAX_STEP_SIZE\n    },\n    line_length: {\n        ref_shapes: {\n            types: [\"line\"],\n            sizes: [2, 4, 6],\n            fill: FILL_COLOR,\n            outline: OUTLINE_COLOR,\n            rotate_by:[0]\n        },\n        mod_shapes: {\n            types: [[\"line\"]],\n            sizes: [[1.2, 3.0], [3.1, 5.3], [5.0, 6.5]],\n            fill: FILL_COLOR,\n            outline: OUTLINE_COLOR,\n            rotate_by: [[0]]\n        },\n        trials_per_round: TRIALS_PER_ROUND,\n        max_step_size: MAX_STEP_SIZE\n    },\n    rectangle_square: {\n        ref_shapes: {\n            types: [\"square\"],\n            sizes: [2, 4, 6],\n            fill: FILL_COLOR,\n            outline: OUTLINE_COLOR,\n            rotate_by:[0]\n        },\n        mod_shapes: {\n            types: [[\"rectangle\"]],\n            sizes: [[1.2, 3.0], [3.1, 5.3], [5.0, 6.5]],\n            fill: FILL_COLOR,\n            outline: OUTLINE_COLOR,\n            rotate_by: [[0, 90]],\n            width_height_ratio: 2\n        },\n        trials_per_round: TRIALS_PER_ROUND,\n        max_step_size: MAX_STEP_SIZE\n    },\n    rectangle_rotated_square_solid: {\n        ref_shapes: {\n            types: [\"square\"],\n            sizes: [2, 4, 6],\n            fill: FILL_COLOR,\n            outline: OUTLINE_COLOR,\n            rotate_by:[45]\n        },\n        mod_shapes: {\n            types: [[\"rectangle\"]],\n            sizes: [[1.2, 3.0], [3.1, 5.3], [5.0, 6.5]],\n            fill: FILL_COLOR,\n            outline: OUTLINE_COLOR,\n            rotate_by: [[45, 0]],\n            width_height_ratio: 2\n        },\n        trials_per_round: TRIALS_PER_ROUND,\n        max_step_size: MAX_STEP_SIZE\n    },\n    rectangle_rotated_square_outline: {\n        ref_shapes: {\n            types: [\"square\"],\n            sizes: [2, 4, 6],\n            fill: '#FFFFFF',\n            outline: OUTLINE_COLOR,\n            rotate_by:[45]\n        },\n        mod_shapes: {\n            types: [[\"rectangle\"]],\n            sizes: [[1.2, 3.0], [3.1, 5.3], [5.0, 6.5]],\n            fill: '#FFFFFF',\n            outline: OUTLINE_COLOR,\n            rotate_by: [[45, 0]],\n            width_height_ratio: 2\n        },\n        trials_per_round: TRIALS_PER_ROUND,\n        max_step_size: MAX_STEP_SIZE\n    },\n    triangle: {\n        ref_shapes: {\n            types: [\"triangle\"],\n            sizes: [2, 4, 6],\n            fill: FILL_COLOR,\n            outline: OUTLINE_COLOR,\n            rotate_by: [0]\n        },\n        mod_shapes: {\n            types: [[\"triangle\"]],\n            sizes: [[1.2, 3.0], [3.1, 5.3], [5.0, 6.5]],\n            fill: FILL_COLOR,\n            width_height_ratio: 2,\n            outline: OUTLINE_COLOR,\n            rotate_by: [[0, 90]]\n        }\n    },\n};\n",
    "static": true,
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/public/scripts/experiment-properties/data/constants/estimation_data.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 58,
    "kind": "variable",
    "name": "TRIALS_PER_ROUND",
    "memberof": "scripts/experiment-properties/data/constants/estimation_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/estimation_data.js~TRIALS_PER_ROUND",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/data/constants/estimation_data.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 59,
    "kind": "variable",
    "name": "MAX_STEP_SIZE",
    "memberof": "scripts/experiment-properties/data/constants/estimation_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/estimation_data.js~MAX_STEP_SIZE",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/data/constants/estimation_data.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 60,
    "kind": "variable",
    "name": "FILL_COLOR",
    "memberof": "scripts/experiment-properties/data/constants/estimation_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/estimation_data.js~FILL_COLOR",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/data/constants/estimation_data.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 61,
    "kind": "variable",
    "name": "OUTLINE_COLOR",
    "memberof": "scripts/experiment-properties/data/constants/estimation_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/estimation_data.js~OUTLINE_COLOR",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/data/constants/estimation_data.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 62,
    "kind": "variable",
    "name": "ESTIMATION_BASE",
    "memberof": "scripts/experiment-properties/data/constants/estimation_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/estimation_data.js~ESTIMATION_BASE",
    "access": "public",
    "export": true,
    "importPath": "VCL Framework/scripts/experiment-properties/data/constants/estimation_data.js",
    "importStyle": "{ESTIMATION_BASE}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "{\"shape_estimation\": *, \"line_length\": *, \"rectangle_square\": *, \"rectangle_rotated_square_solid\": *, \"rectangle_rotated_square_outline\": *, \"triangle\": *}"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "file",
    "name": "scripts/experiment-properties/data/constants/jnd_data.js",
    "content": "export {JND_BASE, JND_CONDITIONS};\n\nconst JND_BASE = {\n\n  foundational : \n    [\n    {distribution_type: \"gaussian\", base_correlation: 0.9, error: 0.0001, max_step_size: 0.01, converge_from_above: false, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\n\n    {distribution_type: \"gaussian\", base_correlation: 0.8, error: 0.0001, max_step_size: 0.01, converge_from_above: false, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\n\n    {distribution_type: \"gaussian\", base_correlation: 0.7, error: 0.0001, max_step_size: 0.01, converge_from_above: false, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\n\n    {distribution_type: \"gaussian\", base_correlation: 0.6, error: 0.0001, max_step_size: 0.01, converge_from_above: false, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\n\n    {distribution_type: \"gaussian\", base_correlation: 0.5, error: 0.0001, max_step_size: 0.01, converge_from_above: false, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\n\n    {distribution_type: \"gaussian\", base_correlation: 0.4, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\n\n    {distribution_type: \"gaussian\", base_correlation: 0.3, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\n\n    {distribution_type: \"gaussian\", base_correlation: 0.2, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\n\n    {distribution_type: \"gaussian\", base_correlation: 0.1, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\n\n    {distribution_type: \"gaussian\", base_correlation: 0.0, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\n\n    {distribution_type: \"gaussian\", base_correlation: 0.9, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\n\n    {distribution_type: \"gaussian\", base_correlation: 0.8, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\n\n    {distribution_type: \"gaussian\", base_correlation: 0.7, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\n\n    {distribution_type: \"gaussian\", base_correlation: 0.6, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\n\n    {distribution_type: \"gaussian\", base_correlation: 0.5, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\n\n    {distribution_type: \"gaussian\", base_correlation: 0.4, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\n\n    {distribution_type: \"gaussian\", base_correlation: 0.3, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6}\n    ],\n\n  design: \n    [\n    {distribution_type: \"gaussian\", base_correlation: 0.3, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\n\n    {distribution_type: \"gaussian\", base_correlation: 0.6, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\n\n    {distribution_type: \"gaussian\", base_correlation: 0.9, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\n\n    {distribution_type: \"gaussian\", base_correlation: 0.3, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\n\n    {distribution_type: \"gaussian\", base_correlation: 0.6, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\n\n    {distribution_type: \"gaussian\", base_correlation: 0.9, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\n\n    {distribution_type: \"gaussian\", base_correlation: 0.3, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\n\n    {distribution_type: \"gaussian\", base_correlation: 0.6, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\n\n    {distribution_type: \"gaussian\", base_correlation: 0.9, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\n\n    {distribution_type: \"gaussian\", base_correlation: 0.3, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\n\n    {distribution_type: \"gaussian\", base_correlation: 0.6, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\n\n    {distribution_type: \"gaussian\", base_correlation: 0.9, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\n\n    {distribution_type: \"gaussian\", base_correlation: 0.3, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\n\n    {distribution_type: \"gaussian\", base_correlation: 0.6, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\n\n    {distribution_type: \"gaussian\", base_correlation: 0.9, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\n    ]\n}\n\nconst JND_CONDITIONS = {\n\n  distractor_rainbow : \n    [\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'RED', target_color: 'BLACK', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'RED', target_color: 'BLACK', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'RED', target_color: 'BLACK', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'GREEN', target_color: 'BLACK', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'GREEN', target_color: 'BLACK', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'GREEN', target_color: 'BLACK', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'RED', target_color: 'BLACK', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'RED', target_color: 'BLACK', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'RED', target_color: 'BLACK', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'BLUE', target_color: 'BLACK', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'BLUE', target_color: 'BLACK', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'BLUE', target_color: 'BLACK', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'YELLOW', target_color: 'BLACK', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'YELLOW', target_color: 'BLACK', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'YELLOW', target_color: 'BLACK', dist_point_size: 6}\n    ],\n\n  distractor_square_red_hue :\n    [\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#d83862', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#d83862', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#d83862', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#d54049', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#d54049', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#d54049', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#c05819', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#c05819', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#c05819', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#ae6500', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#ae6500', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#ae6500', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'hue'}\n    ],\n\n  distractor_square_red_lum :\n    [\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#9e210f', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#9e210f', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#9e210f', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#b63821', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#b63821', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#b63821', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#e45f43', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#e45f43', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#e45f43', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#fe7657', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#fe7657', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#fe7657', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'lum'}\n    ],\n\n  distractor_square_red_chrom:\n    [\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#aa6453', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#aa6453', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#aa6453', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#bc5942', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#bc5942', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#bc5942', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#dc391f', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#dc391f', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#dc391f', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#eb1607', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#eb1607', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#eb1607', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'chro'}\n    ], \n\n  distractor_square_yellow_hue :\n    [\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#ffaf7d', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#ffaf7d', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#ffaf7d', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#f4bc6a', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#f4bc6a', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#f4bc6a', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#bfce6d', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#bfce6d', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#bfce6d', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#9fd57d', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#9fd57d', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#9fd57d', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'hue'},\n    \n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'hue'},\n    \n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'hue'}\n    ],\n\n  distractor_square_yellow_lum :\n    [\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#b19e41', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#b19e41', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#b19e41', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#c6b254', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#c6b254', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#c6b254', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#f1da7a', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#f1da7a', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#f1da7a', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#fff08e', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#fff08e', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#fff08e', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'lum'},\n    \n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'lum'},\n    \n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'lum'}\n    ],\n\n  distractor_square_yellow_chrom:\n    [\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#d1c6a3', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#d1c6a3', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#d1c6a3', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#d7c685', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#d7c685', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#d7c685', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#dec644', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#dec644', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#dec644', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#dfc602', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#dfc602', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#dfc602', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'chro'},\n    \n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'chro'},\n    \n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'chro'}\n    ], \n\n  distractor_square_blue_hue :\n    [\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#008897', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#008897', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#008897', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#0085ad', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#0085ad', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#0085ad', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#5575bc', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#5575bc', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#5575bc', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#816ab1', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#816ab1', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#816ab1', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'hue'},\n    \n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'hue'},\n    \n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'hue'}\n    ],\n\n  distractor_square_blue_lum :\n    [\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#005a95', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#005a95', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#005a95', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#006ca9', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#006ca9', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#006ca9', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#006ca9', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#006ca9', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#006ca9', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#43a4e6', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#43a4e6', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#43a4e6', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'lum'},\n    \n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'lum'},\n    \n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'lum'}\n    ],\n\n  distractor_square_blue_chrom:\n    [\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#6a7887', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#6a7887', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#6a7887', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#4d7ba1', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#4d7ba1', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#4d7ba1', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#0081d9', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#0081d9', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#0081d9', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#0085f7', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#0085f7', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#0085f7', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'chro'},\n    \n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'chro'},\n    \n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'chro'}\n    ], \n\n  distractor_square_green_hue :\n    [\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#6b7e21', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#6b7e21', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#6b7e21', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#4d8433', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#4d8433', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#4d8433', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#008a67', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#008a67', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#008a67', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#008a67', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#008a67', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#008a67', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'hue'},\n    \n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'hue'},\n    \n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'hue'}\n    ],\n\n  distractor_square_green_lum :\n    [\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#006228', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#006228', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#006228', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#007438', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#007438', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#007438', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#399b5c', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#399b5c', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#399b5c', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#4eaf6e', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#4eaf6e', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#4eaf6e', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'lum'},\n    \n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'lum'},\n    \n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'lum'}\n    ],\n\n  distractor_square_green_chrom:\n    [\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#5e7e66', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#5e7e66', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#5e7e66', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#468358', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#468358', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#468358', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#008d33', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#008d33', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#008d33', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#00920c', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#00920c', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#00920c', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'chro'},\n    \n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'chro'},\n    \n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'chro'}\n    ], \n\n  distractor_multi: \n    [\n    {dist_base: 0.2, dist_error: 0.0001, dist_num_points: 100, dist_color: '#cd4c32', target_color: 'BLACK', dist_point_size: 6},\n\n    {dist_base: 0.2, dist_error: 0.0001, dist_num_points: 100, dist_color: '#cd4c32', target_color: 'BLACK', dist_point_size: 6},\n\n    {dist_base: 0.2, dist_error: 0.0001, dist_num_points: 100, dist_color: '#cd4c32', target_color: 'BLACK', dist_point_size: 6},\n\n    {dist_base: 0.2, dist_error: 0.0001, dist_num_points: 100, dist_color: '#007ebc', target_color: 'BLACK', dist_point_size: 6},\n\n    {dist_base: 0.2, dist_error: 0.0001, dist_num_points: 100, dist_color: '#007ebc', target_color: 'BLACK', dist_point_size: 6},\n\n    {dist_base: 0.2, dist_error: 0.0001, dist_num_points: 100, dist_color: '#007ebc', target_color: 'BLACK', dist_point_size: 6}, \n    \n    {dist_base: 0.2, dist_error: 0.0001, dist_num_points: 100, dist_color: '#20874a', target_color: 'BLACK', dist_point_size: 6},\n\n    {dist_base: 0.2, dist_error: 0.0001, dist_num_points: 100, dist_color: '#20874a', target_color: 'BLACK', dist_point_size: 6},\n\n    {dist_base: 0.2, dist_error: 0.0001, dist_num_points: 100, dist_color: '#20874a', target_color: 'BLACK', dist_point_size: 6}, \n\n    {dist_base: 0.2, dist_error: 0.0001, dist_num_points: 100, dist_color: '#dbc667', target_color: 'BLACK', dist_point_size: 6},\n\n    {dist_base: 0.2, dist_error: 0.0001, dist_num_points: 100, dist_color: '#dbc667', target_color: 'BLACK', dist_point_size: 6},\n\n    {dist_base: 0.2, dist_error: 0.0001, dist_num_points: 100, dist_color: '#dbc667', target_color: 'BLACK', dist_point_size: 6} \n    ],\n\n  distractor_blue_shades: \n    [\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#004078', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#004078', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#004078', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#2c6fad', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#2c6fad', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#2c6fad', target_color: '#699938', dist_point_size: 6}, \n    \n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#69a3e5', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#69a3e5', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#69a3e5', target_color: '#699938', dist_point_size: 6}, \n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#a2d9ff', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#a2d9ff', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#a2d9ff', target_color: '#699938', dist_point_size: 6} \n    ],\n\n  distractor_red_shades: \n    [\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#9f2b2a', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#9f2b2a', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#9f2b2a', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#bc4740', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#bc4740', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#bc4740', target_color: '#699938', dist_point_size: 6}, \n    \n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#db6158', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#db6158', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#db6158', target_color: '#699938', dist_point_size: 6}, \n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#ff988a', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#ff988a', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#ff988a', target_color: '#699938', dist_point_size: 6} \n    ],\n\n  distractor_yellow_shades: \n    [\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#d3c86a', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#d3c86a', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#d3c86a', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#9b9236', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#9b9236', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#9b9236', target_color: '#699938', dist_point_size: 6}, \n    \n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#80781b', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#80781b', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#80781b', target_color: '#699938', dist_point_size: 6}, \n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#f0e484', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#f0e484', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#f0e484', target_color: '#699938', dist_point_size: 6} \n    ],\n\n  distractor_yellow_shades: \n    [\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#d3c86a', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#d3c86a', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#d3c86a', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#9b9236', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#9b9236', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#9b9236', target_color: '#699938', dist_point_size: 6}, \n    \n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#80781b', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#80781b', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#80781b', target_color: '#699938', dist_point_size: 6}, \n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#f0e484', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#f0e484', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#f0e484', target_color: '#699938', dist_point_size: 6} \n    ],\n\n  distractor_control_shades: \n    [\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', target_color: '#699938', dist_point_size: 6}, \n    \n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', target_color: '#699938', dist_point_size: 6}, \n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', target_color: '#699938', dist_point_size: 6} \n    ],\n\n  strip_ring_size:\n    [\n    {ring_thickness: 1},\n\n    {ring_thickness: 1},\n\n    {ring_thickness: 1},\n\n    {ring_thickness: 1},\n\n    {ring_thickness: 1},\n\n    {ring_thickness: 1},\n\n    {ring_thickness: 1},\n\n    {ring_thickness: 1},\n\n    {ring_thickness: 1},\n\n    {ring_thickness: 1},\n\n    {ring_thickness: 1},\n\n    {ring_thickness: 1},\n\n    {ring_thickness: 1},\n\n    {ring_thickness: 1},\n\n    {ring_thickness: 1},\n\n    {ring_thickness: 1},\n\n    {ring_thickness: 1}\n    ],\n\n  line_length_strip:\n    [\n    {point_color: \"BLACK\", strip_width: 1, fixed_strip_height: false},\n\n    {point_color: \"BLACK\", strip_width: 1, fixed_strip_height: false},\n\n    {point_color: \"BLACK\", strip_width: 1, fixed_strip_height: false},\n\n    {point_color: \"BLACK\", strip_width: 1, fixed_strip_height: false},\n\n    {point_color: \"BLACK\", strip_width: 1, fixed_strip_height: false},\n\n    {point_color: \"BLACK\", strip_width: 1, fixed_strip_height: false},\n\n    {point_color: \"BLACK\", strip_width: 1, fixed_strip_height: false},\n\n    {point_color: \"BLACK\", strip_width: 1, fixed_strip_height: false},\n\n    {point_color: \"BLACK\", strip_width: 1, fixed_strip_height: false},\n\n    {point_color: \"BLACK\", strip_width: 1, fixed_strip_height: false},\n\n    {point_color: \"BLACK\", strip_width: 1, fixed_strip_height: false},\n\n    {point_color: \"BLACK\", strip_width: 1, fixed_strip_height: false},\n\n    {point_color: \"BLACK\", strip_width: 1, fixed_strip_height: false},\n\n    {point_color: \"BLACK\", strip_width: 1, fixed_strip_height: false},\n\n    {point_color: \"BLACK\", strip_width: 1, fixed_strip_height: false},\n\n    {point_color: \"BLACK\", strip_width: 1, fixed_strip_height: false},\n\n    {point_color: \"BLACK\", strip_width: 1, fixed_strip_height: false}\n    ], \n\n  distractor_ratio_pilot:\n    [\n    // 1:1 ratio\n    {base_correlation: 0.3, dist_base: 0.3, dist_error: 0.0001, num_points: 75, dist_num_points: 75, dist_color: '#dbc667', target_color: '#007ebc', point_size: 4},\n\n    {base_correlation: 0.6, dist_base: 0.3, dist_error: 0.0001, num_points: 75, dist_num_points: 75, dist_color: '#dbc667', target_color: '#007ebc', point_size: 4},\n    \n    {base_correlation: 0.9, dist_base: 0.3, dist_error: 0.0001, num_points: 75, dist_num_points: 75, dist_color: '#dbc667', target_color: '#007ebc', point_size: 4},\n   \n    // 1:5 ratio\n    {base_correlation: 0.3, dist_base: 0.3, dist_error: 0.0001, num_points: 30, dist_num_points: 150, dist_color: '#dbc667', target_color: '#007ebc', point_size: 4},\n\n    {base_correlation: 0.6, dist_base: 0.3, dist_error: 0.0001, num_points: 30, dist_num_points: 150, dist_color: '#dbc667', target_color: '#007ebc', point_size: 4},\n    \n    {base_correlation: 0.9, dist_base: 0.3, dist_error: 0.0001, num_points: 30, dist_num_points: 150, dist_color: '#dbc667', target_color: '#007ebc', point_size: 4},\n    \n    // 5:1 ratio\n    {base_correlation: 0.3, dist_base: 0.3, dist_error: 0.0001, num_points: 150, dist_num_points: 30, dist_color: '#dbc667', target_color: '#007ebc', point_size: 4},\n\n    {base_correlation: 0.6, dist_base: 0.3, dist_error: 0.0001, num_points: 150, dist_num_points: 30, dist_color: '#dbc667', target_color: '#007ebc', point_size: 4},\n    \n    {base_correlation: 0.9, dist_base: 0.3, dist_error: 0.0001, num_points: 150, dist_num_points: 30, dist_color: '#dbc667', target_color: '#007ebc', point_size: 4},\n    \n    // 3:1 ratio\n    {base_correlation: 0.3, dist_base: 0.3, dist_error: 0.0001, num_points: 150, dist_num_points: 50, dist_color: '#dbc667', target_color: '#007ebc', point_size: 4},\n\n    {base_correlation: 0.6, dist_base: 0.3, dist_error: 0.0001, num_points: 150, dist_num_points: 50, dist_color: '#dbc667', target_color: '#007ebc', point_size: 4},\n    \n    {base_correlation: 0.9, dist_base: 0.3, dist_error: 0.0001, num_points: 150, dist_num_points: 50, dist_color: '#dbc667', target_color: '#007ebc', point_size: 4},\n    \n    // 1:3 ratio\n    {base_correlation: 0.3, dist_base: 0.3, dist_error: 0.0001, num_points: 50, dist_num_points: 150, dist_color: '#dbc667', target_color: '#007ebc', point_size: 4},\n\n    {base_correlation: 0.6, dist_base: 0.3, dist_error: 0.0001, num_points: 50, dist_num_points: 150, dist_color: '#dbc667', target_color: '#007ebc', point_size: 4},\n    \n    {base_correlation: 0.9, dist_base: 0.3, dist_error: 0.0001, num_points: 50, dist_num_points: 150, dist_color: '#dbc667', target_color: '#007ebc', point_size: 4},\n    \n    ] \n}\n",
    "static": true,
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/public/scripts/experiment-properties/data/constants/jnd_data.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 64,
    "kind": "variable",
    "name": "JND_BASE",
    "memberof": "scripts/experiment-properties/data/constants/jnd_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/jnd_data.js~JND_BASE",
    "access": "public",
    "export": true,
    "importPath": "VCL Framework/scripts/experiment-properties/data/constants/jnd_data.js",
    "importStyle": "{JND_BASE}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{\"foundational\": *, \"design\": *}"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "variable",
    "name": "JND_CONDITIONS",
    "memberof": "scripts/experiment-properties/data/constants/jnd_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/jnd_data.js~JND_CONDITIONS",
    "access": "public",
    "export": true,
    "importPath": "VCL Framework/scripts/experiment-properties/data/constants/jnd_data.js",
    "importStyle": "{JND_CONDITIONS}",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "type": {
      "types": [
        "{\"distractor_rainbow\": *, \"distractor_square_red_hue\": *, \"distractor_square_red_lum\": *, \"distractor_square_red_chrom\": *, \"distractor_square_yellow_hue\": *, \"distractor_square_yellow_lum\": *, \"distractor_square_yellow_chrom\": *, \"distractor_square_blue_hue\": *, \"distractor_square_blue_lum\": *, \"distractor_square_blue_chrom\": *, \"distractor_square_green_hue\": *, \"distractor_square_green_lum\": *, \"distractor_square_green_chrom\": *, \"distractor_multi\": *, \"distractor_blue_shades\": *, \"distractor_red_shades\": *, \"distractor_yellow_shades\": *, \"distractor_control_shades\": *, \"strip_ring_size\": *, \"line_length_strip\": *, \"distractor_ratio_pilot\": *}"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "file",
    "name": "scripts/experiment-properties/data/constants/jnd_radius_data.js",
    "content": "export {JND_RADIUS_BASE, JND_RADIUS_CONDITIONS};\n\nconst JND_RADIUS_BASE = {\n\n  foundational:\n    [\n    {base_radius: 2, initial_difference: 0.586, converge_from_above: true, text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', stroke_color: 'none', fill_color: 'BLUE'},\n\n    {base_radius: 3, initial_difference: 0.879, converge_from_above: true, text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', stroke_color: 'none', fill_color: 'BLUE'},\n\n    {base_radius: 4, initial_difference: 1.172, converge_from_above: true, text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', stroke_color: 'none', fill_color: 'BLUE'},\n\n    {base_radius: 5, initial_difference: 1.464, converge_from_above: true, text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', stroke_color: 'none', fill_color: 'BLUE'},\n\n    {base_radius: 6, initial_difference: 1.757, converge_from_above: true, text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', stroke_color: 'none', fill_color: 'BLUE'}\n    ] \n}\n\nconst JND_RADIUS_CONDITIONS = {\n\n  circle_square:\n  \t[\n    {shapes: [\"circle\", \"square\"], stroke_color: \"BLUE\"},\n\n    {shapes: [\"circle\", \"square\"], stroke_color: \"BLUE\"},\n\n    {shapes: [\"circle\", \"square\"], stroke_color: \"BLUE\"},\n\n    {shapes: [\"circle\", \"square\"], stroke_color: \"BLUE\"},\n\n    {shapes: [\"circle\", \"square\"], stroke_color: \"BLUE\"}\n  \t],\n\n  circle_triangle:\n  \t[\n  \t{shapes: [\"circle\", \"triangle\"], stroke_color: \"BLUE\"},\n\n    {shapes: [\"circle\", \"triangle\"], stroke_color: \"BLUE\"},\n\n    {shapes: [\"circle\", \"triangle\"], stroke_color: \"BLUE\"},\n\n    {shapes: [\"circle\", \"triangle\"], stroke_color: \"BLUE\"},\n\n    {shapes: [\"circle\", \"triangle\"], stroke_color: \"BLUE\"}\n  \t],\n\n  square_triangle:\n    [\n    {shapes: [\"square\", \"triangle\"], stroke_color: \"BLUE\"},\n\n    {shapes: [\"square\", \"triangle\"], stroke_color: \"BLUE\"},\n\n    {shapes: [\"square\", \"triangle\"], stroke_color: \"BLUE\"},\n\n    {shapes: [\"square\", \"triangle\"], stroke_color: \"BLUE\"},\n\n    {shapes: [\"square\", \"triangle\"], stroke_color: \"BLUE\"}\n    ], \n\n  rotSquare_rotTriangle:\n    [\n    {shapes: [\"rotSquare\", \"rotTriangle\"], stroke_color: \"BLUE\"},\n\n    {shapes: [\"rotSquare\", \"rotTriangle\"], stroke_color: \"BLUE\"},\n\n    {shapes: [\"rotSquare\", \"rotTriangle\"], stroke_color: \"BLUE\"},\n\n    {shapes: [\"rotSquare\", \"rotTriangle\"], stroke_color: \"BLUE\"},\n\n    {shapes: [\"rotSquare\", \"rotTriangle\"], stroke_color: \"BLUE\"}\n    ],\n\n  slice0_triangle:\n    [\n    {shapes: [\"slice\", \"triangle\"], slice_rotation: 0},\n\n    {shapes: [\"slice\", \"triangle\"], slice_rotation: 0},\n\n    {shapes: [\"slice\", \"triangle\"], slice_rotation: 0},\n\n    {shapes: [\"slice\", \"triangle\"], slice_rotation: 0},\n\n    {shapes: [\"slice\", \"triangle\"], slice_rotation: 0}\n    ],\n\n  slice45_triangle:\n    [\n    {shapes: [\"slice\", \"triangle\"], slice_rotation: 45},\n\n    {shapes: [\"slice\", \"triangle\"], slice_rotation: 45},\n\n    {shapes: [\"slice\", \"triangle\"], slice_rotation: 45},\n\n    {shapes: [\"slice\", \"triangle\"], slice_rotation: 45},\n\n    {shapes: [\"slice\", \"triangle\"], slice_rotation: 45}\n    ],\n\n  slice90_triangle:\n    [\n    {shapes: [\"slice\", \"triangle\"], slice_rotation: 90},\n\n    {shapes: [\"slice\", \"triangle\"], slice_rotation: 90},\n\n    {shapes: [\"slice\", \"triangle\"], slice_rotation: 90},\n\n    {shapes: [\"slice\", \"triangle\"], slice_rotation: 90},\n\n    {shapes: [\"slice\", \"triangle\"], slice_rotation: 90}\n    ]\n}\n",
    "static": true,
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/public/scripts/experiment-properties/data/constants/jnd_radius_data.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 67,
    "kind": "variable",
    "name": "JND_RADIUS_BASE",
    "memberof": "scripts/experiment-properties/data/constants/jnd_radius_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/jnd_radius_data.js~JND_RADIUS_BASE",
    "access": "public",
    "export": true,
    "importPath": "VCL Framework/scripts/experiment-properties/data/constants/jnd_radius_data.js",
    "importStyle": "{JND_RADIUS_BASE}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{\"foundational\": *}"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "variable",
    "name": "JND_RADIUS_CONDITIONS",
    "memberof": "scripts/experiment-properties/data/constants/jnd_radius_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/jnd_radius_data.js~JND_RADIUS_CONDITIONS",
    "access": "public",
    "export": true,
    "importPath": "VCL Framework/scripts/experiment-properties/data/constants/jnd_radius_data.js",
    "importStyle": "{JND_RADIUS_CONDITIONS}",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "{\"circle_square\": *, \"circle_triangle\": *, \"square_triangle\": *, \"rotSquare_rotTriangle\": *, \"slice0_triangle\": *, \"slice45_triangle\": *, \"slice90_triangle\": *}"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "file",
    "name": "scripts/experiment-properties/data/constants/stevens_data.js",
    "content": "export {STEVENS_BASE, STEVENS_CONDITIONS};\n\nconst STEVENS_BASE = {\n\n  foundational : \n    [\n    {distribution_type: \"gaussian\", round_type: 'test', trials_per_round: 4, high_ref: 1, low_ref: 0, error: 0.0001, num_points: 100, regen_rate: 1000, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', background_color: 'WHITE', point_size: 6, regen_rate: 1000},\n\n    {distribution_type: \"gaussian\", round_type: 'test', trials_per_round: 4, high_ref: 0.5, low_ref: 0, error: 0.0001, num_points: 100, regen_rate: 1000, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', background_color: 'WHITE', point_size: 6, regen_rate: 1000},\n\n    {distribution_type: \"gaussian\", round_type: 'test', trials_per_round: 4, high_ref: 1, low_ref: 0.5, error: 0.0001, num_points: 100, regen_rate: 1000, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', background_color: 'WHITE', point_size: 6, regen_rate: 1000},\n\n    {distribution_type: \"gaussian\", round_type: 'test', trials_per_round: 4, high_ref: 0.25, low_ref: 0, error: 0.0001, num_points: 100, regen_rate: 1000, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', background_color: 'WHITE', point_size: 6, regen_rate: 1000},\n\n    {distribution_type: \"gaussian\", round_type: 'test', trials_per_round: 4, high_ref: 0.5, low_ref: 0.25, error: 0.0001, num_points: 100, regen_rate: 1000, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', background_color: 'WHITE', point_size: 6, regen_rate: 1000},\n\n    {distribution_type: \"gaussian\", round_type: 'test', trials_per_round: 4, high_ref: 0.75, low_ref: 0.5, error: 0.0001, num_points: 100, regen_rate: 1000, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', background_color: 'WHITE', point_size: 6, regen_rate: 1000},\n\n    {distribution_type: \"gaussian\", round_type: 'test', trials_per_round: 4, high_ref: 1, low_ref: 0.75, error: 0.0001, num_points: 100, regen_rate: 1000, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', background_color: 'WHITE', point_size: 6, regen_rate: 1000},\n    \n    {distribution_type: \"gaussian\", round_type: 'consistency', trials_per_round: 4, high_ref: 0.375, low_ref: 0.125, error: 0.0001, num_points: 100, regen_rate: 1000, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', background_color: 'WHITE', point_size: 6, regen_rate: 1000},\n    \n    {distribution_type: \"gaussian\", round_type: 'consistency', trials_per_round: 4, high_ref: 0.5, low_ref: 0.25, error: 0.0001, num_points: 100, regen_rate: 1000, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', background_color: 'WHITE', point_size: 6, regen_rate: 1000},\n    \n    {distribution_type: \"gaussian\", round_type: 'consistency', trials_per_round: 4, high_ref: 0.625, low_ref: 0.375, error: 0.0001, num_points: 100, regen_rate: 1000, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', background_color: 'WHITE', point_size: 6, regen_rate: 1000},\n    \n    {distribution_type: \"gaussian\", round_type: 'consistency', trials_per_round: 4, high_ref: 0.75, low_ref: 0.5, error: 0.0001, num_points: 100, regen_rate: 1000, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', background_color: 'WHITE', point_size: 6, regen_rate: 1000},\n    \n    {distribution_type: \"gaussian\", round_type: 'consistency', trials_per_round: 4, high_ref: 0.875, low_ref: 0.625, error: 0.0001, num_points: 100, regen_rate: 1000, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', background_color: 'WHITE', point_size: 6, regen_rate: 1000},\n    \n    {distribution_type: \"gaussian\", round_type: 'consistency', trials_per_round: 4, high_ref: 0.875, low_ref: 0.125, error: 0.0001, num_points: 100, regen_rate: 1000, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', background_color: 'WHITE', point_size: 6, regen_rate: 1000},\n    \n    {distribution_type: \"gaussian\", round_type: 'consistency', trials_per_round: 4, high_ref: 0.75, low_ref: 0.25, error: 0.0001, num_points: 100, regen_rate: 1000, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', background_color: 'WHITE', point_size: 6, regen_rate: 1000},\n    \n    {distribution_type: \"gaussian\", round_type: 'consistency', trials_per_round: 4, high_ref: 0.625, low_ref: 0.375, error: 0.0001, num_points: 100, regen_rate: 1000, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', background_color: 'WHITE', point_size: 6, regen_rate: 1000},\n    ],\n\n  design: \n    [\n    {distribution_type: \"gaussian\", round_type: 'design', trials_per_round: 4, high_ref: 1, low_ref: 0, error: 0.0001, num_points: 100, regen_rate: 1000, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', background_color: 'WHITE', point_size: 6, regen_rate: 1000},\n\n    {distribution_type: \"gaussian\", round_type: 'design', trials_per_round: 4, high_ref: 1, low_ref: 0, error: 0.0001, num_points: 100, regen_rate: 1000, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', background_color: 'WHITE', point_size: 6, regen_rate: 1000},\n\n    {distribution_type: \"gaussian\", round_type: 'design', trials_per_round: 4, high_ref: 1, low_ref: 0, error: 0.0001, num_points: 100, regen_rate: 1000, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', background_color: 'WHITE', point_size: 6, regen_rate: 1000},\n\n    {distribution_type: \"gaussian\", round_type: 'design', trials_per_round: 4, high_ref: 1, low_ref: 0, error: 0.0001, num_points: 100, regen_rate: 1000, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', background_color: 'WHITE', point_size: 6, regen_rate: 1000},\n\n    {distribution_type: \"gaussian\", round_type: 'design', trials_per_round: 4, high_ref: 1, low_ref: 0, error: 0.0001, num_points: 100, regen_rate: 1000, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', background_color: 'WHITE', point_size: 6, regen_rate: 1000}\n    ]\n}\n\nconst STEVENS_CONDITIONS = {\n\n  strip_ring_size:\n    [\n    {ring_thickness: 1},\n\n    {ring_thickness: 1},\n\n    {ring_thickness: 1},\n\n    {ring_thickness: 1},\n\n    {ring_thickness: 1},\n\n    {ring_thickness: 1},\n\n    {ring_thickness: 1},\n\n    {ring_thickness: 1},\n\n    {ring_thickness: 1},\n\n    {ring_thickness: 1},\n\n    {ring_thickness: 1},\n\n    {ring_thickness: 1},\n\n    {ring_thickness: 1},\n\n    {ring_thickness: 1},\n\n    {ring_thickness: 1}\n    ],\n\n  line_length_strip:\n  [\n    {point_color: \"BLACK\", strip_width: 1, fixed_strip_height: false},\n\n    {point_color: \"BLACK\", strip_width: 1, fixed_strip_height: false},\n\n    {point_color: \"BLACK\", strip_width: 1, fixed_strip_height: false},\n\n    {point_color: \"BLACK\", strip_width: 1, fixed_strip_height: false},\n\n    {point_color: \"BLACK\", strip_width: 1, fixed_strip_height: false},\n\n    {point_color: \"BLACK\", strip_width: 1, fixed_strip_height: false},\n\n    {point_color: \"BLACK\", strip_width: 1, fixed_strip_height: false},\n\n    {point_color: \"BLACK\", strip_width: 1, fixed_strip_height: false},\n\n    {point_color: \"BLACK\", strip_width: 1, fixed_strip_height: false},\n\n    {point_color: \"BLACK\", strip_width: 1, fixed_strip_height: false},\n\n    {point_color: \"BLACK\", strip_width: 1, fixed_strip_height: false},\n\n    {point_color: \"BLACK\", strip_width: 1, fixed_strip_height: false},\n\n    {point_color: \"BLACK\", strip_width: 1, fixed_strip_height: false},\n\n    {point_color: \"BLACK\", strip_width: 1, fixed_strip_height: false},\n\n    {point_color: \"BLACK\", strip_width: 1, fixed_strip_height: false}\n  ],\n\n  distractor_square_red_hue:\n  [\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#d83862', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#d54049', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#c05819', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#ae6500', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'hue'}\n  ],\n\n  distractor_square_red_lum :\n  [\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#9e210f', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#b63821', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#e45f43', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#fe7657', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'lum'}\n  ],\n\n\n  distractor_square_red_chrom:\n  [\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#aa6453', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#bc5942', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#dc391f', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#eb1607', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#cd4c32', target_shape: 'square', point_size: 8, dimension: 'chro'}\n  ], \n\n  distractor_square_yellow_hue :\n    [\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#ffaf7d', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#f4bc6a', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#bfce6d', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#9fd57d', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'hue'}\n    ],\n\n  distractor_square_yellow_lum :\n    [\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#b19e41', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#c6b254', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#f1da7a', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#fff08e', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'lum'}\n    ],\n\n  distractor_square_yellow_chrom:\n    [\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#d1c6a3', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#d7c685', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#dec644', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#dfc602', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#dbc667', target_shape: 'square', point_size: 8, dimension: 'chro'}\n    ], \n  \n  distractor_square_blue_hue :\n    [\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#008897', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#0085ad', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#5575bc', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#816ab1', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'hue'}\n    ],\n\n  distractor_square_blue_lum :\n    [\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#005a95', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#006ca9', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#006ca9', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#43a4e6', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'lum'}\n    ],\n\n  distractor_square_blue_chrom:\n    [\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#6a7887', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#4d7ba1', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#0081d9', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#0085f7', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#007ebc', target_shape: 'square', point_size: 8, dimension: 'chro'}\n    ], \n\n  distractor_square_green_hue :\n    [\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#6b7e21', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#4d8433', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#008a67', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#008a67', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'hue'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'hue'}\n    ],\n\n  distractor_square_green_lum :\n    [\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#006228', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#007438', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#399b5c', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#4eaf6e', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'lum'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'lum'}\n    ],\n\n  distractor_square_green_chrom:\n    [\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#5e7e66', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#468358', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#008d33', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#00920c', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'chro'},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', dist_shape: 'square', target_color: '#20874a', target_shape: 'square', point_size: 8, dimension: 'chro'}\n    ], \n\n  distractor_blue_shades: \n    [\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#004078', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#2c6fad', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#69a3e5', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#a2d9ff', target_color: '#699938', dist_point_size: 6} \n    ],\n\n  distractor_red_shades: \n    [\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#9f2b2a', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#bc4740', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#db6158', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#ff988a', target_color: '#699938', dist_point_size: 6} \n    ],\n\n  distractor_yellow_shades: \n    [\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#d3c86a', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#9b9236', target_color: '#699938', dist_point_size: 6}, \n    \n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#80781b', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#f0e484', target_color: '#699938', dist_point_size: 6} \n    ],\n\n  distractor_yellow_shades: \n    [\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#d3c86a', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#9b9236', target_color: '#699938', dist_point_size: 6}, \n    \n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#80781b', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: '#f0e484', target_color: '#699938', dist_point_size: 6} \n    ],\n\n  distractor_control_shades: \n    [\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', target_color: '#699938', dist_point_size: 6},\n\n    {dist_base: 0.3, dist_error: 0.0001, dist_num_points: 100, dist_color: 'WHITE', target_color: '#699938', dist_point_size: 6}\n    ],\n\n}\n",
    "static": true,
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/public/scripts/experiment-properties/data/constants/stevens_data.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 70,
    "kind": "variable",
    "name": "STEVENS_BASE",
    "memberof": "scripts/experiment-properties/data/constants/stevens_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/stevens_data.js~STEVENS_BASE",
    "access": "public",
    "export": true,
    "importPath": "VCL Framework/scripts/experiment-properties/data/constants/stevens_data.js",
    "importStyle": "{STEVENS_BASE}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{\"foundational\": *, \"design\": *}"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "variable",
    "name": "STEVENS_CONDITIONS",
    "memberof": "scripts/experiment-properties/data/constants/stevens_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/stevens_data.js~STEVENS_CONDITIONS",
    "access": "public",
    "export": true,
    "importPath": "VCL Framework/scripts/experiment-properties/data/constants/stevens_data.js",
    "importStyle": "{STEVENS_CONDITIONS}",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "{\"strip_ring_size\": *, \"line_length_strip\": *, \"distractor_square_red_hue\": *, \"distractor_square_red_lum\": *, \"distractor_square_red_chrom\": *, \"distractor_square_yellow_hue\": *, \"distractor_square_yellow_lum\": *, \"distractor_square_yellow_chrom\": *, \"distractor_square_blue_hue\": *, \"distractor_square_blue_lum\": *, \"distractor_square_blue_chrom\": *, \"distractor_square_green_hue\": *, \"distractor_square_green_lum\": *, \"distractor_square_green_chrom\": *, \"distractor_blue_shades\": *, \"distractor_red_shades\": *, \"distractor_yellow_shades\": *, \"distractor_control_shades\": *}"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "file",
    "name": "scripts/experiment-properties/data/custom_subcondition_generator.js",
    "content": "import {EXPERIMENT_BASES, EXPERIMENT_CONDITIONS, create_condition_dataset} from \"/scripts/experiment-properties/data/data_controller.js\";\nexport {CUSTOM_TRIAL_STRUCTURE_CONDITIONS, get_subconditions};\n\nvar CUSTOM_TRIAL_STRUCTURE_CONDITIONS = {\n\tfoundational : [],\n    design : [\n    \t\"distractor_diamond_square_red_hue\",\n    \t\"distractor_diamond_square_red_lum\",\n    \t\"distractor_diamond_square_red_chrom\",\n    \t\"distractor_diamond_square_yellow_hue\",\n    \t\"distractor_diamond_square_yellow_lum\",\n    \t\"distractor_diamond_square_yellow_chrom\",\n    \t\"distractor_diamond_square_blue_hue\",\n    \t\"distractor_diamond_square_blue_lum\",\n    \t\"distractor_diamond_square_blue_chrom\",\n    \t\"distractor_diamond_square_green_hue\",\n    \t\"distractor_diamond_square_green_lum\",\n    \t\"distractor_diamond_square_green_chrom\"\n    ],\n    estimation: [\n    \t\"shape_estimation\",\n    \t\"line_length\",\n    \t\"rectangle_square\",\n    \t\"rectangle_rotated_square_solid\",\n    \t\"rectangle_rotated_square_outline\",\n    \t\"triangle\"\n    ],\n    custom : [\n    \t\"distractor_multi\",\n    \t\"distractor_blue_shades\",\n    \t\"distractor_red_shades\",\n    \t\"distractor_yellow_shades\",\n    \t\"distractor_control_shades\"\n    ]\n}\n\n/**\n * Controls which helper method to access depending on condition name.\n *\n * @param {object}   experiment\n */\nfunction get_subconditions(experiment) {\n\n\tif (is_distractor_diamond_square(experiment.condition_name)){\n\t\treturn generate_distractor_diamond_square_subconditions(experiment);\n\t} \n\telse if (experiment.condition_name === \"distractor_multi\"){\n\t\treturn generate_distractor_multi_subconditions(experiment);\n\t}\n\telse if (experiment.condition_name === \"distractor_blue_shades\"   ||\n\t\t     experiment.condition_name === \"distractor_red_shades\"    ||\n\t\t     experiment.condition_name === \"distractor_yellow_shades\" ||\n\t\t     experiment.condition_name === \"distractor_control_shades\"){\n\t\treturn generate_distractor_shades_subconditions(experiment);\n\t}\n\telse if (experiment.constructor.name === \"Estimation\"){\n\t\treturn generate_estimation_subconditions(experiment);\n\t}\n}\n\n/**\n * Checks if the condition name is a \"distractor_diamond_square\" one.\n *\n * @param   {object}   experiment\n * @return  {boolean}\n */\nfunction is_distractor_diamond_square(condition_name) {\n\n\tlet array = condition_name.split(\"_\");\n\tif (array[0] === \"distractor\" && array[1] === \"diamond\" && array[2] === \"square\") {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n////////////////////////////////////////////////////////////////////////////////////////\n// GENERATORS HERE \n////////////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Generates subconditions for distractor_diamond_square conditions\n *\n * @param   {object}   experiment\n */\nfunction generate_distractor_diamond_square_subconditions(experiment) {\n\n\tlet array = experiment.condition_name.split(\"_\");\n\tif (array.length !== 5) throw new Error(experiment.condition_name + \" is not a valid distractor_diamond_square condition.\");\n\t\n\tlet square_name = array[0] + \"_\" + array[2] + \"_\" + array[3] + \"_\" + array[4];\n\tlet experiment_name = experiment.constructor.name;\n\tlet trial_structure = experiment.trial_structure;\n\n\tlet subconditions = create_condition_dataset(EXPERIMENT_BASES[experiment_name][trial_structure], EXPERIMENT_CONDITIONS[experiment_name][square_name]);\n\n\tfor (let c of subconditions) {\n\t\tc[\"dist_shape\"] = \"diamond\";\n\n\t\t// Overwrite to opposing colors when dist_color = white\n\t\tif (c[\"dist_color\"] === \"WHITE\"){\n\t\t\t// If RED\n\t\t\tif (c[\"target_color\"] === \"#cd4c32\"){\n\t\t\t\tc[\"dist_color\"] = \"#007ebc\";\n\t\t\t} \n\t\t\t// If BLUE\n\t\t\telse if (c[\"target_color\"] === \"#007ebc\"){\n\t\t\t\tc[\"dist_color\"] = \"#cd4c32\";\n\t\t\t}\n\t\t\t// If YELLOW\n\t\t\telse if (c[\"target_color\"] === \"#dbc667\"){\n\t\t\t\tc[\"dist_color\"] = \"#20874a\";\n\t\t\t}\n\t\t\t// If GREEN\n\t\t\telse {\n\t\t\t\tc[\"dist_color\"] = \"#dbc667\";\n\t\t\t}\n\t\t}\n\t}\n\n\treturn subconditions;\n}\n\n/**\n * Generates subconditions for distractor_multi condition.\n *\n * @param   {object}   experiment\n */\nfunction generate_distractor_multi_subconditions(experiment) {\n\n\tlet condition_name = experiment.condition_name;\n\tlet experiment_name = experiment.constructor.name;\n\tlet subconditions = EXPERIMENT_CONDITIONS[experiment_name][condition_name];\n\n\t// Using the first 12 subconditions from the JND design:\n\tlet jnd_base_subconditions = EXPERIMENT_BASES[experiment_name][\"design\"].slice(1,13);\n\n\tlet dataset = create_condition_dataset(jnd_base_subconditions, subconditions);\n\n\tlet result = []\n\n\t// Doing each set 4 times\n\tfor (let i = 0; i < 4; i++) {\n\t\tresult = result.concat(dataset);\n\t}\n\n\treturn result;\n}\n\n/**\n * Generates subconditions for distractor_shade conditions.\n *\n * @param   {object}   experiment\n */\nfunction generate_distractor_shades_subconditions(experiment) {\n\n\tlet condition_name = experiment.condition_name;\n\tlet experiment_name = experiment.constructor.name;\n\tlet subconditions = EXPERIMENT_CONDITIONS[experiment_name][condition_name];\n\n\t// Using the first 12 subconditions from the JND design:\n\tif (experiment_name === \"JND\"){\n\t\tlet jnd_base_subconditions = EXPERIMENT_BASES[\"JND\"][\"design\"].slice(1,13);\n\n\t\tlet dataset = create_condition_dataset(jnd_base_subconditions, subconditions);\n\n\t\treturn dataset;\n\t} else {\n\t\tlet stevens_base_subconditions = EXPERIMENT_BASES[\"Stevens\"][\"design\"].slice(1,5);\n\n\t\tlet dataset = create_condition_dataset(stevens_base_subconditions, subconditions);\n\n\t\treturn dataset;\n\t}\n}\n\n/**\n * Generates subconditions for any Estimation condition.\n *\n * @param   {object}   experiment\n */\nfunction generate_estimation_subconditions(experiment){\n\n\tconst TRIALS_PER_ROUND = 4;\n\tconst MAX_STEP_SIZE = 0.05;\n\tconst FILL_COLOR = '#0000FF';\n\tconst OUTLINE_COLOR = '#0000FF';\n\tconst MATCH_SIZES = {\n    \"2\": {\n        min_size: 1.2,\n        max_size: 3\n    },\n    \"4\": {\n        min_size: 3.1,\n        max_size: 5.3\n    },\n    \"6\": {\n        min_size: 5.0,\n        max_size: 6.5\n    }\n\t};\n\n\n\tlet condition = experiment.condition_name;\n    let result = [];\n    let curr_cond = EXPERIMENT_BASES[\"Estimation\"][condition];\n    let ref_shapes = curr_cond.ref_shapes;\n    let mod_shapes = curr_cond.mod_shapes;\n    ref_shapes.types.forEach((ref_shape, index)=>{\n        ref_shapes.sizes.forEach((size)=>{\n            let condition = {};\n            condition.ref_shape = ref_shape;\n            condition.ref_size = size;\n            condition.ref_rotate_by = ref_shapes.rotate_by[index];\n            condition.ref_fill = ref_shapes.fill;\n            condition.ref_outline = ref_shapes.outline;\n            condition.max_step_size = MAX_STEP_SIZE;\n            condition.trials_per_round = TRIALS_PER_ROUND;\n            mod_shapes.types[index].forEach((mod_shape)=>{\n                mod_shapes.rotate_by[index].forEach((angle)=>{\n                    let curr_sub_cond = {};\n                    Object.assign(curr_sub_cond, condition);\n                    curr_sub_cond.mod_shape = mod_shape;\n                    curr_sub_cond.mod_min_size = MATCH_SIZES[size.toString()].min_size;\n                    curr_sub_cond.mod_max_size = MATCH_SIZES[size.toString()].min_size;\n                    curr_sub_cond.mod_rotate_by = angle;\n                    curr_sub_cond.mod_fill = mod_shapes.fill;\n                    curr_sub_cond.mod_outline = mod_shapes.outline;\n                    curr_sub_cond.width_height_ratio = mod_shapes.width_height_ratio;\n                    result.push(curr_sub_cond);\n                });\n            });\n        });\n    });\n    console.log(JSON.stringify(result));\n    return result;\n};\n",
    "static": true,
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/public/scripts/experiment-properties/data/custom_subcondition_generator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 73,
    "kind": "function",
    "name": "is_distractor_diamond_square",
    "memberof": "scripts/experiment-properties/data/custom_subcondition_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/data/custom_subcondition_generator.js~is_distractor_diamond_square",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/data/custom_subcondition_generator.js",
    "importStyle": null,
    "description": "Checks if the condition name is a \"distractor_diamond_square\" one.",
    "lineNumber": 67,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 74,
    "kind": "function",
    "name": "generate_distractor_diamond_square_subconditions",
    "memberof": "scripts/experiment-properties/data/custom_subcondition_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/data/custom_subcondition_generator.js~generate_distractor_diamond_square_subconditions",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/data/custom_subcondition_generator.js",
    "importStyle": null,
    "description": "Generates subconditions for distractor_diamond_square conditions",
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 75,
    "kind": "function",
    "name": "generate_distractor_multi_subconditions",
    "memberof": "scripts/experiment-properties/data/custom_subcondition_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/data/custom_subcondition_generator.js~generate_distractor_multi_subconditions",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/data/custom_subcondition_generator.js",
    "importStyle": null,
    "description": "Generates subconditions for distractor_multi condition.",
    "lineNumber": 128,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 76,
    "kind": "function",
    "name": "generate_distractor_shades_subconditions",
    "memberof": "scripts/experiment-properties/data/custom_subcondition_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/data/custom_subcondition_generator.js~generate_distractor_shades_subconditions",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/data/custom_subcondition_generator.js",
    "importStyle": null,
    "description": "Generates subconditions for distractor_shade conditions.",
    "lineNumber": 154,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 77,
    "kind": "function",
    "name": "generate_estimation_subconditions",
    "memberof": "scripts/experiment-properties/data/custom_subcondition_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/data/custom_subcondition_generator.js~generate_estimation_subconditions",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/data/custom_subcondition_generator.js",
    "importStyle": null,
    "description": "Generates subconditions for any Estimation condition.",
    "lineNumber": 181,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 78,
    "kind": "variable",
    "name": "CUSTOM_TRIAL_STRUCTURE_CONDITIONS",
    "memberof": "scripts/experiment-properties/data/custom_subcondition_generator.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/custom_subcondition_generator.js~CUSTOM_TRIAL_STRUCTURE_CONDITIONS",
    "access": "public",
    "export": true,
    "importPath": "VCL Framework/scripts/experiment-properties/data/custom_subcondition_generator.js",
    "importStyle": "{CUSTOM_TRIAL_STRUCTURE_CONDITIONS}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "{\"foundational\": *, \"design\": *, \"estimation\": *, \"custom\": *}"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "function",
    "name": "get_subconditions",
    "memberof": "scripts/experiment-properties/data/custom_subcondition_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/data/custom_subcondition_generator.js~get_subconditions",
    "access": "public",
    "export": true,
    "importPath": "VCL Framework/scripts/experiment-properties/data/custom_subcondition_generator.js",
    "importStyle": "{get_subconditions}",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [
      {
        "name": "experiment",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "file",
    "name": "scripts/experiment-properties/data/data_controller.js",
    "content": "import {CUSTOM_TRIAL_STRUCTURE_CONDITIONS, get_subconditions} from \"/scripts/experiment-properties/data/custom_subcondition_generator.js\";\nimport {JND_BASE, JND_CONDITIONS} from \"/scripts/experiment-properties/data/constants/jnd_data.js\";\nimport {STEVENS_BASE, STEVENS_CONDITIONS} from \"/scripts/experiment-properties/data/constants/stevens_data.js\";\nimport {ESTIMATION_BASE} from \"/scripts/experiment-properties/data/constants/estimation_data.js\";\nimport {JND_RADIUS_BASE, JND_RADIUS_CONDITIONS} from \"/scripts/experiment-properties/data/constants/jnd_radius_data.js\";\n\nexport { get_data,\n         get_data_subset,\n         create_condition_dataset,\n         EXPERIMENT_BASES,\n         EXPERIMENT_CONDITIONS };\n\nconst EXPERIMENT_BASES = {\n  \"JND\" : JND_BASE,\n  \"Stevens\" : STEVENS_BASE,\n  \"JND_Radius\" : JND_RADIUS_BASE,\n  \"Estimation\" : ESTIMATION_BASE\n};\n\nconst EXPERIMENT_CONDITIONS = {\n  \"JND\" : JND_CONDITIONS,\n  \"Stevens\" : STEVENS_CONDITIONS,\n  \"JND_Radius\" : JND_RADIUS_CONDITIONS,\n  \"Estimation\" : []\n};\n\n/**\n * Retrieves the data for the corresponding experiment object.\n *\n * @param  experiment  {object}       Model object of the experiment \n *\n * @return dataset     [{assoc}, {assoc}, .... ]         \n */\nfunction get_data(experiment){\n\n  var dataset;\n\n  var trial_structure = experiment.trial_structure;\n  var condition = experiment.condition_name;\n  var experiment_name = experiment.constructor.name;\n\n  // If there is a \"custom\" condition AKA the subconditions are \n  // generated by code rather than by constants (arrays in the constants folder)\n  if (trial_structure === \"custom\" || CUSTOM_TRIAL_STRUCTURE_CONDITIONS[trial_structure].includes(condition)) {\n    dataset = get_subconditions(experiment);\n  } else {\n\n    // If not a base condition\n    if (!condition.split(\"_\").includes(\"base\")){\n\n      // Check that a condition exists\n      if (!EXPERIMENT_CONDITIONS[experiment_name][condition] || !EXPERIMENT_BASES[experiment_name][trial_structure]){\n         throw new Error (condition + \" is not supported.\");\n      }\n\n      // Get subconditions then append to the base \n      let subconditions = EXPERIMENT_CONDITIONS[experiment_name][condition];\n      dataset = create_condition_dataset(EXPERIMENT_BASES[experiment_name][trial_structure], subconditions);\n\n    // If a base condition\n    } else {\n\n      if (!EXPERIMENT_BASES[experiment_name][trial_structure]) {\n        throw new Error (\"Base for \" + condition + \" does not exist.\");\n      }\n\n      dataset = EXPERIMENT_BASES[experiment_name][trial_structure];\n    }\n  }\n\n  check_dataset(experiment_name, dataset)\n\n  return dataset;\n}\n\n/**\n * Checks if all subconditions have the necessary attributes to run the experiment.\n *\n * @param  experiment      {string}                 \"jnd\" or \"stevens\"   \n *         dataset         {array of JS objects}    dataset to check            \n */\nfunction check_dataset(experiment_name, dataset) {\n\n  let name = \"\";\n\n  for (let subcondition of dataset) {\n\n    for (let attribute_key in EXPERIMENTS[experiment_name.toLowerCase()][\"attributes\"]){\n\n      let attribute = EXPERIMENTS[experiment_name.toLowerCase()][\"attributes\"][attribute_key];\n\n      if (subcondition[attribute_key] === undefined && attribute[\"required\"]){\n        throw new Error(\"Required attribute \" + attribute_key + \" was not found in the subcondition \" + JSON.stringify(subcondition));\n      }\n    }\n\n  }\n}\n\n/**\n * Retrieves a smaller dataset (4 subconditions) given experiment, trial structure and condition.\n *\n * @param  experiment      {string}            \"jnd\", \"stevens\", etc.  \n *         trial_structure {string}            \"foundational\", \"design\", etc.      \n *         condition       {string}            Name of condition\n *\n * @return dataset     [{assoc}, {assoc}, .... ]         \n */\nfunction get_data_subset(experiment, trial_structure, condition) {\n\n  var dataset = get_data(experiment, trial_structure, condition);\n\n  return dataset.slice(0, 4);\n}\n\n/**\n * Appends condition-specific data to the dataset.\n *\n * @param  base_data         [{assoc}, {assoc}, .... ]     dataset with base experiment constants   \n * @param  condition_data    [{assoc}, {assoc}, .... ]     condition set for that experiment\n *\n * @return dataset           [{assoc}, {assoc}, .... ]  \n **/\nfunction create_condition_dataset(base_data, condition_data){\n\n  var condition_dataset = [];\n\n  if (base_data.length != condition_data.length) {\n    throw Error(\"Base dataset length is not equal to condition dataset length.\");\n  }\n\n  for (let i in base_data) {\n    let obj = Object.assign({}, base_data[i], condition_data[i]);\n    condition_dataset.push(obj);\n  }\n\n  return condition_dataset;\n}\n",
    "static": true,
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/public/scripts/experiment-properties/data/data_controller.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 81,
    "kind": "function",
    "name": "check_dataset",
    "memberof": "scripts/experiment-properties/data/data_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/data/data_controller.js~check_dataset",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/data/data_controller.js",
    "importStyle": null,
    "description": "Checks if all subconditions have the necessary attributes to run the experiment.",
    "lineNumber": 82,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": "{string}                 \"jnd\" or \"stevens\"   \n        dataset         {array of JS objects}    dataset to check"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 82,
    "kind": "function",
    "name": "get_data",
    "memberof": "scripts/experiment-properties/data/data_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/data/data_controller.js~get_data",
    "access": "public",
    "export": true,
    "importPath": "VCL Framework/scripts/experiment-properties/data/data_controller.js",
    "importStyle": "{get_data}",
    "description": "Retrieves the data for the corresponding experiment object.",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": "{object}       Model object of the experiment"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "dataset     [{assoc}, {assoc}, .... ]"
    }
  },
  {
    "__docId__": 83,
    "kind": "function",
    "name": "get_data_subset",
    "memberof": "scripts/experiment-properties/data/data_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/data/data_controller.js~get_data_subset",
    "access": "public",
    "export": true,
    "importPath": "VCL Framework/scripts/experiment-properties/data/data_controller.js",
    "importStyle": "{get_data_subset}",
    "description": "Retrieves a smaller dataset (4 subconditions) given experiment, trial structure and condition.",
    "lineNumber": 109,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": "{string}            \"jnd\", \"stevens\", etc.  \n        trial_structure {string}            \"foundational\", \"design\", etc.      \n        condition       {string}            Name of condition"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "dataset     [{assoc}, {assoc}, .... ]"
    }
  },
  {
    "__docId__": 84,
    "kind": "function",
    "name": "create_condition_dataset",
    "memberof": "scripts/experiment-properties/data/data_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/data/data_controller.js~create_condition_dataset",
    "access": "public",
    "export": true,
    "importPath": "VCL Framework/scripts/experiment-properties/data/data_controller.js",
    "importStyle": "{create_condition_dataset}",
    "description": "Appends condition-specific data to the dataset.",
    "lineNumber": 124,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "base_data",
        "description": "[{assoc}, {assoc}, .... ]     dataset with base experiment constants"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "condition_data",
        "description": "[{assoc}, {assoc}, .... ]     condition set for that experiment"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "dataset           [{assoc}, {assoc}, .... ]"
    }
  },
  {
    "__docId__": 85,
    "kind": "variable",
    "name": "EXPERIMENT_BASES",
    "memberof": "scripts/experiment-properties/data/data_controller.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/data_controller.js~EXPERIMENT_BASES",
    "access": "public",
    "export": true,
    "importPath": "VCL Framework/scripts/experiment-properties/data/data_controller.js",
    "importStyle": "{EXPERIMENT_BASES}",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "{\"JND\": *, \"Stevens\": *, \"JND_Radius\": *, \"Estimation\": *}"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "variable",
    "name": "EXPERIMENT_CONDITIONS",
    "memberof": "scripts/experiment-properties/data/data_controller.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/data_controller.js~EXPERIMENT_CONDITIONS",
    "access": "public",
    "export": true,
    "importPath": "VCL Framework/scripts/experiment-properties/data/data_controller.js",
    "importStyle": "{EXPERIMENT_CONDITIONS}",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "{\"JND\": *, \"Stevens\": *, \"JND_Radius\": *, \"Estimation\": *}"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "file",
    "name": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "content": "const TRIAL_LIMIT = 250;\n\nfunction generateDistribution(correlation, error, size, numsd, mean, sd){\n\n  // dynamicallyLoadScript(MATHJS_URL);\n  var coordinates = {x_values: [], y_values: []};\n  var overshootSize = size + 20; // Generating > size will guarantee we have\n                                 // a distribution of the speciied size later. \n\n  var done = true;\n  // Initialize the points and make sure the correlation is in an acceptable error range.\n  // Restart from scratch if adjusting for the error value is taking too long.\n  do {\n      // Reset coordinates:\n      coordinates = {x_values: [], y_values: []};\n\n      initializePoints(coordinates, correlation, overshootSize, numsd, mean, sd);\n      done = adjustPointsForError(coordinates, correlation, error, overshootSize, numsd, mean, sd);\n  } while(done == false);\n\n  // Transformation into range [0, 1]\n  transformPoints(coordinates, mean, sd);\n  readjustPoints(coordinates, correlation, error, overshootSize, numsd, mean, sd);\n\n  // Since this is code ported from the java codebase, coordinates are plotted\n  // so that origin as at the top left (this makes the distribution negative instead\n  // of positive). To force it to be positive, we flip the whole distribution \n  // across y axis. \n  for (i = 0; i<coordinates.y_values.length; i++) {\n    coordinates.y_values[i] = coordinates.y_values[i] * (-1);\n  }\n\n  let prepared_coordinates = prepare_coordinates(coordinates, size);\n  return prepared_coordinates; \n}\n\n/**\n* Converts the coordinates into this format for d3:\n* [ [x1, y1], [x2, y2] ... [xn, yn] ]\n* And samples the distribution for the specified num_points.\n*\n* @param coordinates { {x_values: [], y_values: []} }\n*        num_points {integer}\n* @return output_coordinates { [x1, y1], [x2, y2] ... }\n*/\nfunction prepare_coordinates(coordinates, num_points){\n\n  var array = [];\n  var reorganized_coordinates = [];\n\n  for (let i = 0; i < coordinates.x_values.length; i++){\n    array.push(coordinates.x_values[i]);\n    array.push(coordinates.y_values[i]);\n\n    reorganized_coordinates.push(array);\n    array = [];\n  }\n  \n  var output_coordinates = sample_coordinates(reorganized_coordinates, num_points);\n\n  return output_coordinates;\n}\n\n/**\n* Randomly picks x number of points from the distribution\n* where x = num_points.\n*\n* @param coordinates { [x1, y1], [x2, y2] ... }\n*        num_points {integer}\n* @return output_coordinates with size num_points { [x1, y1], [x2, y2] ... }\n*/\nfunction sample_coordinates(coordinates, num_points){\n  var output_coordinates = [];\n\n  for (let i = num_points; i > 0; i-- ) {\n    var random_coordinate = coordinates.splice(Math.floor(Math.random() * (i + 1)), 1)[0];\n    output_coordinates.push(random_coordinate);\n  }\n\n  return output_coordinates;\n}\n\nfunction initializePoints(coordinates, correlation, size, numsd, mean, sd){\n  var xVal;\n  var x2Val;\n  var yVal;\n\n  for (i = 0; i < size; i++) {\n    do {\n        xVal = random_bm();\n        x2Val = random_bm();\n\n        // formula for generating gaussian distribution: y = p*x + sqrt(1-p^2)*(x2)\n        yVal = (correlation * xVal) + (Math.sqrt(1 - (correlation * correlation)) * x2Val);\n    } while (pointNotWithinRequiredStdDevs(xVal, yVal, numsd));\n\n    coordinates.x_values.push(xVal);\n    coordinates.y_values.push(yVal);\n  }\n}\n\nfunction adjustPointsForError(coordinates, correlation, error, size, numsd, mean, sd) {\n\n  var currTrial = 0;\n\n  // Try to correct the correlation value, up to a maximum of TRIAL_LIMIT trials.\n  while (correlationNotWithinError(coordinates, correlation, error) && (currTrial < TRIAL_LIMIT)) {\n    currTrial += 1;\n    coordinates.x_values.splice(size - 1, 1);\n    coordinates.y_values.splice(size - 1, 1);\n    var x;\n    var x2;\n    var y;\n    do {\n      x = random_bm();\n      x2 = random_bm();\n      y = (correlation * x) + (Math.sqrt(1 - (correlation * correlation)) * x2);\n    } while (pointNotWithinRequiredStdDevs(x, y, numsd));\n    coordinates.x_values.push(x);\n    coordinates.y_values.push(y);\n  }\n  return !(correlationNotWithinError(coordinates, correlation, error));\n}\n\n// Replaces the points that are outside of the [0,1] range.\nfunction readjustPoints(coordinates, correlation, error, size, numsd, mean, sd) {\n  \n  var temp_coordinates = {x_values: [], y_values: []};\n  var max_iterations = 500;\n\n  for (i = 0; i<size; i++) {\n    if (pointNotWithinRequiredStdDevs(coordinates.x_values[i], coordinates.y_values[i], numsd, mean, sd)){\n      coordinates.x_values.splice(i, 1);\n      coordinates.y_values.splice(i, 1);\n      var x;\n      var x2;\n      var y;\n\n      var temp = 0;\n      while (temp < max_iterations){\n        x = random_bm();\n        x2 = random_bm();\n        y = (correlation * x) + (Math.sqrt(1 - (correlation * correlation)) * x2);\n        x = x*sd + mean;\n        y = y*sd + mean;\n\n        if (i > 0) {\n          temp_coordinates.x_values = coordinates.x_values[i-1];\n          temp_coordinates.y_values = coordinates.y_values[i-1];\n          temp_coordinates.x_values[i] = x;\n          temp_coordinates.y_values[i] = y;\n        }\n\n        if (!pointNotWithinRequiredStdDevs(x, y, numsd, mean, sd) && (i > 0) &&\n            !correlationNotWithinError(temp_coordinates, correlation, error)){\n          break;\n        }\n\n        temp++; \n      }\n\n      coordinates.x_values[i] = x;\n      coordinates.y_values[i] = y;\n    }\n  }\n\n  /*\n  If, after replacing the points, the correlation is outside of the error thresholds, regenerate the entire\n  distribution\n   */\n  //if (correlationNotWithinError(coordinates, correlation, error)) {\n    //coordinates = {x_values: [], y_values: []};\n    //generateDistribution(correlation, error, size, numsd, mean, sd);\n  //}\n}\n\nfunction pointNotWithinRequiredStdDevs(x, y, numsd){\n  return pointNotWithinRequiredStdDevs2(x, y, numsd, 0, 1);\n}\n\nfunction pointNotWithinRequiredStdDevs(x, y, numsd, mean, sd){\n\n  var leftThreshold = mean - numsd*sd;\n  var rightThreshold = mean + numsd*sd;\n\n  return (x < leftThreshold) || (x > rightThreshold) || (y < leftThreshold) || (y > rightThreshold);\n}\n\nfunction correlationNotWithinError(coordinates, correlation, error){\n  return Math.abs(correlation - getPearsonCorrelation(coordinates.x_values, coordinates.y_values)) > error;\n}\n\nfunction transformPoints(coordinates, mean, sd) {\n\n    /** Calculate the needed x- and y- scale/translation amount\n     * by using the formulas for:\n     *         mean change: newMeanX = scaleX*meanX+translateX\n     *             stdev change: newStdevX = scaleX*stdevX\n     */\n    var scaleX = sd/math.std(coordinates.x_values);\n    var scaleY = sd/math.std(coordinates.y_values);\n    var translateX = mean - math.mean(coordinates.x_values)*scaleX;\n    var translateY = mean - math.mean(coordinates.y_values)*scaleY;\n    scalePoints(coordinates,scaleX,scaleY);\n    translatePoints(coordinates,translateX,translateY);\n}\n\n// Scales the points in a distribution with the given x and y scale values.\nfunction scalePoints(coordinates, scaleX, scaleY) {\n  for (i = 0; i<coordinates.x_values.length; i++) {\n    coordinates.x_values[i] = coordinates.x_values[i] * scaleX;\n    coordinates.y_values[i] = coordinates.y_values[i] * scaleY;\n  }\n}\n\n// Translates the points in a distribution with the given x and y translate values.\nfunction translatePoints(coordinates, x, y) {\n  for (i = 0; i<coordinates.x_values.length; i++) {\n    coordinates.x_values[i] = coordinates.x_values[i] + x;\n    coordinates.y_values[i] = 1 - (coordinates.y_values[i] + y);\n  }\n}\n\n// Returns Pearson Correlation Coefficient.\n// SOURCE: https://memory.psych.mun.ca/tech/js/correlation.shtml\nfunction getPearsonCorrelation(x, y) {\n  var shortestArrayLength = 0;\n   \n  if(x.length == y.length) {\n      shortestArrayLength = x.length;\n  } else if(x.length > y.length) {\n      shortestArrayLength = y.length;\n      console.error('x has more items in it, the last ' + (x.length - shortestArrayLength) + ' item(s) will be ignored');\n  } else {\n      shortestArrayLength = x.length;\n      console.error('y has more items in it, the last ' + (y.length - shortestArrayLength) + ' item(s) will be ignored');\n  }\n\n  var xy = [];\n  var x2 = [];\n  var y2 = [];\n\n  for(var i=0; i<shortestArrayLength; i++) {\n      xy.push(x[i] * y[i]);\n      x2.push(x[i] * x[i]);\n      y2.push(y[i] * y[i]);\n  }\n\n  var sum_x = 0;\n  var sum_y = 0;\n  var sum_xy = 0;\n  var sum_x2 = 0;\n  var sum_y2 = 0;\n\n  for(var i=0; i< shortestArrayLength; i++) {\n      sum_x += x[i];\n      sum_y += y[i];\n      sum_xy += xy[i];\n      sum_x2 += x2[i];\n      sum_y2 += y2[i];\n  }\n\n  var step1 = (shortestArrayLength * sum_xy) - (sum_x * sum_y);\n  var step2 = (shortestArrayLength * sum_x2) - (sum_x * sum_x);\n  var step3 = (shortestArrayLength * sum_y2) - (sum_y * sum_y);\n  var step4 = Math.sqrt(step2 * step3);\n  var answer = step1 / step4;\n\n  return answer;\n}\n\n// SOURCE: https://stackoverflow.com/questions/25582882/javascript-math-random-normal-distribution-gaussian-bell-curve?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa\nfunction random_bm() {\n  var u = 0, v = 0;\n  while(u === 0) u = Math.random(); //Converting [0,1) to (0,1)\n  while(v === 0) v = Math.random();\n  return Math.sqrt( -2.0 * Math.log( u ) ) * Math.cos( 2.0 * Math.PI * v );\n}\n\nfunction dynamicallyLoadScript(url) {\n  var script = document.createElement(\"script\"); // Make a script DOM node\n  script.src = url; // Set it's src to the provided URL\n\n  document.head.appendChild(script); // Add it to the end of the head section of the page (could change 'head' to 'body' to add it to the end of the body section instead)\n}",
    "static": true,
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/public/scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 88,
    "kind": "variable",
    "name": "TRIAL_LIMIT",
    "memberof": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "static": true,
    "longname": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js~TRIAL_LIMIT",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 89,
    "kind": "function",
    "name": "generateDistribution",
    "memberof": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js~generateDistribution",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "correlation",
        "types": [
          "*"
        ]
      },
      {
        "name": "error",
        "types": [
          "*"
        ]
      },
      {
        "name": "size",
        "types": [
          "*"
        ]
      },
      {
        "name": "numsd",
        "types": [
          "*"
        ]
      },
      {
        "name": "mean",
        "types": [
          "*"
        ]
      },
      {
        "name": "sd",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 90,
    "kind": "function",
    "name": "prepare_coordinates",
    "memberof": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js~prepare_coordinates",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "importStyle": null,
    "description": "Converts the coordinates into this format for d3:\n[ [x1, y1], [x2, y2] ... [xn, yn] ]\nAnd samples the distribution for the specified num_points.",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "coordinates",
        "description": "{ {x_values: [], y_values: []} }\n       num_points {integer}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "output_coordinates { [x1, y1], [x2, y2] ... }"
    },
    "ignore": true
  },
  {
    "__docId__": 91,
    "kind": "function",
    "name": "sample_coordinates",
    "memberof": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js~sample_coordinates",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "importStyle": null,
    "description": "Randomly picks x number of points from the distribution\nwhere x = num_points.",
    "lineNumber": 72,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "coordinates",
        "description": "{ [x1, y1], [x2, y2] ... }\n       num_points {integer}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "output_coordinates with size num_points { [x1, y1], [x2, y2] ... }"
    },
    "ignore": true
  },
  {
    "__docId__": 92,
    "kind": "function",
    "name": "initializePoints",
    "memberof": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js~initializePoints",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [
      {
        "name": "coordinates",
        "types": [
          "*"
        ]
      },
      {
        "name": "correlation",
        "types": [
          "*"
        ]
      },
      {
        "name": "size",
        "types": [
          "*"
        ]
      },
      {
        "name": "numsd",
        "types": [
          "*"
        ]
      },
      {
        "name": "mean",
        "types": [
          "*"
        ]
      },
      {
        "name": "sd",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 93,
    "kind": "function",
    "name": "adjustPointsForError",
    "memberof": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js~adjustPointsForError",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "params": [
      {
        "name": "coordinates",
        "types": [
          "*"
        ]
      },
      {
        "name": "correlation",
        "types": [
          "*"
        ]
      },
      {
        "name": "error",
        "types": [
          "*"
        ]
      },
      {
        "name": "size",
        "types": [
          "*"
        ]
      },
      {
        "name": "numsd",
        "types": [
          "*"
        ]
      },
      {
        "name": "mean",
        "types": [
          "*"
        ]
      },
      {
        "name": "sd",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 94,
    "kind": "function",
    "name": "readjustPoints",
    "memberof": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js~readjustPoints",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "params": [
      {
        "name": "coordinates",
        "types": [
          "*"
        ]
      },
      {
        "name": "correlation",
        "types": [
          "*"
        ]
      },
      {
        "name": "error",
        "types": [
          "*"
        ]
      },
      {
        "name": "size",
        "types": [
          "*"
        ]
      },
      {
        "name": "numsd",
        "types": [
          "*"
        ]
      },
      {
        "name": "mean",
        "types": [
          "*"
        ]
      },
      {
        "name": "sd",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 95,
    "kind": "function",
    "name": "pointNotWithinRequiredStdDevs",
    "memberof": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js~pointNotWithinRequiredStdDevs",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 177,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      },
      {
        "name": "numsd",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 96,
    "kind": "function",
    "name": "pointNotWithinRequiredStdDevs",
    "memberof": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js~pointNotWithinRequiredStdDevs",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 181,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      },
      {
        "name": "numsd",
        "types": [
          "*"
        ]
      },
      {
        "name": "mean",
        "types": [
          "*"
        ]
      },
      {
        "name": "sd",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 97,
    "kind": "function",
    "name": "correlationNotWithinError",
    "memberof": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js~correlationNotWithinError",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 189,
    "undocument": true,
    "params": [
      {
        "name": "coordinates",
        "types": [
          "*"
        ]
      },
      {
        "name": "correlation",
        "types": [
          "*"
        ]
      },
      {
        "name": "error",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 98,
    "kind": "function",
    "name": "transformPoints",
    "memberof": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js~transformPoints",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 193,
    "undocument": true,
    "params": [
      {
        "name": "coordinates",
        "types": [
          "*"
        ]
      },
      {
        "name": "mean",
        "types": [
          "*"
        ]
      },
      {
        "name": "sd",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 99,
    "kind": "function",
    "name": "scalePoints",
    "memberof": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js~scalePoints",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 209,
    "undocument": true,
    "params": [
      {
        "name": "coordinates",
        "types": [
          "*"
        ]
      },
      {
        "name": "scaleX",
        "types": [
          "*"
        ]
      },
      {
        "name": "scaleY",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 100,
    "kind": "function",
    "name": "translatePoints",
    "memberof": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js~translatePoints",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 217,
    "undocument": true,
    "params": [
      {
        "name": "coordinates",
        "types": [
          "*"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 101,
    "kind": "function",
    "name": "getPearsonCorrelation",
    "memberof": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js~getPearsonCorrelation",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 226,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 102,
    "kind": "function",
    "name": "random_bm",
    "memberof": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js~random_bm",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 273,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 103,
    "kind": "function",
    "name": "dynamicallyLoadScript",
    "memberof": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js~dynamicallyLoadScript",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 280,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 104,
    "kind": "file",
    "name": "scripts/experiment-properties/graphing/custom_graphing_controller.js",
    "content": "import {create_distractor_scatter_plot} from \"/scripts/experiment-properties/graphing/d3-custom-plots/distractor_scatter_plot.js\";\nexport {is_custom_plot, prepare_custom_plot};\n\n/**\n * Checks if the experiment needs a custom plot.\n *\n * @param  {object}   experiment\n * @return {boolean}\n */\nfunction is_custom_plot(experiment) {\n\n    if (experiment.condition_group === \"distractor\") {\n        return true;\n    }\n    return false;\n}\n\n/**\n * Routes to the correct plotting code in /d3-custom-plots depending on \n * experiment condition.\n *\n * @param  {object}   experiment\n * @return {boolean}\n */\nfunction prepare_custom_plot(experiment) {\n\n    if (experiment.condition_group === \"distractor\") {\n        prepare_distractor_scatter_plot(experiment);\n    } else {\n        throw Error(\"Condition \" + experiment.condition_name + \" does not have a custom plot function.\");\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////////////////\n// CUSTOM PREPARE METHODS HERE\n////////////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Sets up attributes from trial data for distractor scatter plots and creates the plots.\n *\n * @param {object}   experiment\n */\nfunction prepare_distractor_scatter_plot(experiment) {\n\n  let datasets = experiment.coordinates;\n  let distractors = experiment.distractor_coordinates;\n  let trial_data = experiment.trial_data;\n  let attributes = \"\";\n\n  for (let i in datasets) {\n\n    attributes = {\n      target: {\n        dataset: datasets[i],\n        graph_attributes: {\n          axis_color:  (\"axis_color\"   in trial_data ? trial_data.axis_color   : \"BLACK\"),\n          point_color: (\"target_color\" in trial_data ? trial_data.target_color : \"BLACK\"),\n          point_shape: (\"target_shape\" in trial_data ? trial_data.target_shape : \"circle\"),\n          point_size:  (\"point_size\"   in trial_data ? trial_data.point_size   : 3),\n        }\n      },\n      distractor: {\n        dataset: distractors[i],\n        graph_attributes: {\n          point_color: (\"dist_color\" in trial_data ? trial_data.dist_color : \"RED\"),\n          point_shape: (\"dist_shape\" in trial_data ? trial_data.dist_shape : \"circle\"),\n          point_size:  (\"point_size\" in trial_data ? trial_data.point_size : 3),\n        }\n      }\n    };\n    \n    create_distractor_scatter_plot(attributes);\n\n  }\n\n  // Set background color\n  document.body.style.backgroundColor = (trial_data.background_color ? trial_data.background_color : \"WHITE\");\n}\n",
    "static": true,
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/public/scripts/experiment-properties/graphing/custom_graphing_controller.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 105,
    "kind": "function",
    "name": "prepare_distractor_scatter_plot",
    "memberof": "scripts/experiment-properties/graphing/custom_graphing_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/custom_graphing_controller.js~prepare_distractor_scatter_plot",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/graphing/custom_graphing_controller.js",
    "importStyle": null,
    "description": "Sets up attributes from trial data for distractor scatter plots and creates the plots.",
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 106,
    "kind": "function",
    "name": "is_custom_plot",
    "memberof": "scripts/experiment-properties/graphing/custom_graphing_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/custom_graphing_controller.js~is_custom_plot",
    "access": "public",
    "export": true,
    "importPath": "VCL Framework/scripts/experiment-properties/graphing/custom_graphing_controller.js",
    "importStyle": "{is_custom_plot}",
    "description": "Checks if the experiment needs a custom plot.",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 107,
    "kind": "function",
    "name": "prepare_custom_plot",
    "memberof": "scripts/experiment-properties/graphing/custom_graphing_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/custom_graphing_controller.js~prepare_custom_plot",
    "access": "public",
    "export": true,
    "importPath": "VCL Framework/scripts/experiment-properties/graphing/custom_graphing_controller.js",
    "importStyle": "{prepare_custom_plot}",
    "description": "Routes to the correct plotting code in /d3-custom-plots depending on \nexperiment condition.",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 108,
    "kind": "file",
    "name": "scripts/experiment-properties/graphing/d3-base-plots/ring_plot.js",
    "content": "export {create_ring_plot};\n\n/**\n * D3 code for plotting a ring plot.\n *\n * @param {object}   attributes\n */\nfunction create_ring_plot(attributes) {\n\n  let dataset = attributes[\"dataset\"];\n  let properties = attributes[\"graph_attributes\"];\n\n  let width = window.innerWidth * 0.8;\n  let height = window.innerHeight * 0.3;\n\n  // Scale for data slightly smaller than full width of axes to account for outliers.\n  var xscale_for_data = d3.scaleLinear()\n                 .domain([0, 1]) \n                 .range([window.innerWidth * 0.10, window.innerWidth * 0.70]);\n\n  var xscale = d3.scaleLinear()\n                 .domain([0, 1])\n                 .range([0, width]);\n\n  var yscale = d3.scaleLinear()\n                 .domain([-1, 0])\n                 .range([height/2, 0]);\n\n  // Create axes: \n  var x_axis = d3.axisBottom()\n                 .scale(xscale)\n                 .tickSize([0]);\n\n  var y_axis = d3.axisLeft()\n                 .scale(yscale)\n                 .tickSize([0]);\n    \n  var chart = d3.select(\"#graph\") // Insert into the div w/ id = \"graph\"\n                .append(\"svg\") \n                  .attr(\"width\", width) \n                  .attr(\"height\", height)\n                  .attr(\"transform\", \"scale(-1,1)\"); // Flip horizontally so cone is\n                                                     // is going left -> right (like orig. version)  \n\n  var xAxisTranslate = height/2;\n  var xAxisElements = chart.append(\"g\")\n                            .attr(\"transform\", \"translate(0, \" + xAxisTranslate  +\")\")\n                            .call(x_axis);\n\n  // Populating data: \n  chart.selectAll(\"ring\") // Technically no circles inside div yet, but will be creating it\n        .data(dataset)\n          .enter()\n            .append(\"circle\") // Creating the circles for each entry in data set \n            .attr(\"cx\", function (d) { // d is a subarray of the dataset i.e coordinates [5, 20]\n              return xscale_for_data(d[0]);\n            })\n            .attr(\"cy\", function (d) {\n              return height/2;\n            })\n            .attr(\"r\", function (d) {\n              return yscale(d[1]);\n            })\n            .attr(\"stroke\", properties[\"stroke_color\"])\n            .attr(\"stroke-width\", properties[\"ring_thickness\"])\n            .attr(\"fill\", properties[\"fill_color\"]);\n\n  // Set axis color\n  chart.selectAll(\"path\")\n       .attr(\"stroke\", properties[\"axis_color\"]);\n\n  // Remove tick labels\n  chart.selectAll(\"text\").remove();     \n\n}",
    "static": true,
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/public/scripts/experiment-properties/graphing/d3-base-plots/ring_plot.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 109,
    "kind": "function",
    "name": "create_ring_plot",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/ring_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/ring_plot.js~create_ring_plot",
    "access": "public",
    "export": true,
    "importPath": "VCL Framework/scripts/experiment-properties/graphing/d3-base-plots/ring_plot.js",
    "importStyle": "{create_ring_plot}",
    "description": "D3 code for plotting a ring plot.",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "attributes",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 110,
    "kind": "file",
    "name": "scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js",
    "content": "export {create_scatter_plot, plot_scatter_points};\n\nvar BUFFER = 60;\nvar RANGE_ADJUSTMENT = 15;\n\n/**\n * D3 code for setting up scatter plot chart area\n *\n * @param {object}   attributes\n */\nfunction create_scatter_plot(attributes) {\n\n    let dataset = attributes[\"dataset\"];\n    let properties = attributes[\"graph_attributes\"];\n\n    // Size of the graph\n    let height = window.innerHeight * 0.65;\n    let width = height/2;\n\n    // Create scales:\n    // ** D3 creates a function that takes in input between [0, 100] and \n    //    outputs between [0, width].\n    //    Basically, domain = input, range = ouput. \n    let xscale = d3.scaleLinear()\n                   .domain([0, 1]) \n                   .range([0, width - RANGE_ADJUSTMENT]); \n\n    let yscale = d3.scaleLinear()\n                   .domain([-1, 0]) // !!! NOTE: this is the hack b/c we flipped the y-values \n                                    //     to be negative --> graph is now positive correlation\n                                    //     but on 4th quadrant --> force domain to be from \n                                    //     [-1, 0] to move it to 1st quadrant \n                   .range([height/2, 0 + RANGE_ADJUSTMENT]);\n\n    // Create axes: \n    let x_axis = d3.axisBottom()\n                   .scale(xscale)\n                   .tickSize([0]);\n\n    let y_axis = d3.axisLeft()\n                   .scale(yscale)\n                   .tickSize([0]);\n\n    // Append SVG into graph div\n    let chart = d3.select(\"#graph\")\n                  .append(\"svg\") \n                    .attr(\"width\", width + BUFFER)\n                    .attr(\"height\", height)\n                    .attr(\"style\", `margin-right: ${width/2}; margin-top: 25vh; margin-left: ${BUFFER}`);\n                    \n    // Creating transform SVG elements + append to SVG: \n    let yAxisElements = chart.append(\"g\")\n                             .attr(\"transform\", \"translate(50, 10)\")\n                             .call(y_axis);\n\n    let xAxisTranslate = height/2 + 10;\n\n    let xAxisElements = chart.append(\"g\")\n                              .attr(\"transform\", \"translate(50, \" + xAxisTranslate  +\")\")\n                              .call(x_axis)\n\n    plot_scatter_points(chart, xscale, yscale, dataset, properties[\"point_size\"], properties[\"point_color\"], properties[\"point_shape\"]);        \n \n    // Set axis color\n    chart.selectAll(\"path\")\n         .attr(\"stroke\", properties[\"axis_color\"]);\n\n    // Remove tick labels\n    chart.selectAll(\"text\").remove();     \n\n}\n\n/**\n * D3 code for appending data to the graph depending on point shape type.\n *\n * @param {object}   chart\n * @param {function} xscale\n * @param {function} yscale\n * @param {array}    data ([x_value, y_value])\n * @param {integer}  point_size\n * @param {string}   point_color\n * @param {string}   point_shape\n */\nfunction plot_scatter_points(chart, xscale, yscale, data, point_size, point_color, point_shape) {\n\n  // var GRAPH_TYPES comes from /config/graphing-config.js\n  if (!GRAPH_TYPES[\"scatter\"][\"attributes\"][\"point_shape\"][\"valid_inputs\"].includes(point_shape)){\n    throw Error(\"Point shape \" + point_shape + \" is not a valid shape for graph type scatter.\");\n  }\n\n  switch(point_shape){\n    case \"square\":\n      chart.selectAll(\"square_data\")\n                 .data(data)\n                  .enter()\n                  .append(\"rect\") \n                  .attr(\"x\", function (d){\n                    return xscale(d[0]) + BUFFER;\n                  })\n                  .attr(\"y\", function (d){\n                    return yscale(d[1]);\n                  })\n                  .attr(\"width\", point_size)\n                  .attr(\"height\", point_size)\n                  .style('fill', point_color);\n      break;\n\n    case \"diamond\":\n      chart.selectAll(\"square_data\")\n                 .data(data)\n                  .enter()\n                  .append(\"rect\") \n                  .attr(\"x\", function (d){\n                    return xscale(d[0]) + BUFFER;\n                  })\n                  .attr(\"y\", function (d){\n                    return yscale(d[1]);\n                  })\n                  .attr(\"width\", point_size)\n                  .attr(\"height\", point_size)\n                  .style('fill', point_color)\n                  .attr('transform', function(d){\n                    // Adapted from: https://stackoverflow.com/questions/44817414/rotate-svg-in-place-using-d3-js\n                    var x1 = xscale(d[0]) + BUFFER + point_size/2; //the center x about which you want to rotate\n                    var y1 = yscale(d[1]) + point_size/2; //the center y about which you want to rotate\n\n                    return `rotate(45, ${x1}, ${y1})`; //rotate 180 degrees about x and y\n                }); \n      break;\n\n    case \"circle\":\n      chart.selectAll(\"circle_data\")\n                 .data(data)\n                  .enter()\n                  .append(\"circle\") // Creating the circles for each entry in data set \n                  .attr(\"cx\", function (d) { // d is a subarray of the dataset i.e coordinates [5, 20]\n                    return xscale(d[0]) + BUFFER; // +60 is for buffer (points going -x, even if they are positive)\n                  })\n                  .attr(\"cy\", function (d) {\n                    return yscale(d[1]);\n                  })\n                  .attr(\"r\", point_size/2).style(\"fill\", point_color);\n      break;\n  }\n}\n",
    "static": true,
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/public/scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 111,
    "kind": "variable",
    "name": "BUFFER",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js",
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js~BUFFER",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 112,
    "kind": "variable",
    "name": "RANGE_ADJUSTMENT",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js",
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js~RANGE_ADJUSTMENT",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 113,
    "kind": "function",
    "name": "create_scatter_plot",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js~create_scatter_plot",
    "access": "public",
    "export": true,
    "importPath": "VCL Framework/scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js",
    "importStyle": "{create_scatter_plot}",
    "description": "D3 code for setting up scatter plot chart area",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "attributes",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 114,
    "kind": "function",
    "name": "plot_scatter_points",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js~plot_scatter_points",
    "access": "public",
    "export": true,
    "importPath": "VCL Framework/scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js",
    "importStyle": "{plot_scatter_points}",
    "description": "D3 code for appending data to the graph depending on point shape type.",
    "lineNumber": 84,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "chart",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "xscale",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "yscale",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "([x_value, y_value])"
      },
      {
        "nullable": null,
        "types": [
          "integer"
        ],
        "spread": false,
        "optional": false,
        "name": "point_size",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "point_color",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "point_shape",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 115,
    "kind": "file",
    "name": "scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js",
    "content": "export {create_shape_plot};\n\n/**\n * D3 code for setting up shape plot chart area\n *\n * @param {object}   attributes\n */\nfunction create_shape_plot(attributes) {\n\n  let radius = attributes[\"curr_radius\"];\n  let max_radius = attributes[\"max_radius\"];\n  let min_radius = attributes[\"min_radius\"];\n  let properties = attributes[\"graph_attributes\"];\n\n  let diff = max_radius - min_radius;\n\n  // SVG dimensions\n  let height = max_radius*2; \n  let width = max_radius*2;\n\n  // Margin calculations\n  let width_diff = (1/4)*window.innerWidth - max_radius;\n\n  let margin_top;\n\n  // Firefox check (doesn't handle JsPsych formatting well)\n  if (typeof InstallTrigger !== 'undefined') {\n    let margin_top = window.innerHeight/2 - max_radius;\n  } else {\n    let margin_top = 0;\n  }\n\n  var chart = d3.select(\"#graph\") \n                 .append(\"svg\") \n                  .attr(\"width\", width) \n                  .attr(\"height\", height)\n                  .attr(\"style\", `margin-right: ${width_diff}; margin-left: ${width_diff}; margin-top: ${margin_top}`);\n\n  // var GRAPH_TYPES comes from /config/graphing-config.js\n  if (!GRAPH_TYPES[\"shapes\"][\"attributes\"][\"shapes\"][\"valid_inputs\"].includes(properties[\"shapes\"])){\n    throw Error(\" \" + shape_type + \" is not a valid shape for graph type shapes.\");\n  }\n\n  // Plot depending on shape specified\n  switch (properties[\"shapes\"]){\n    \n    case \"slice\":\n      let degrees = properties[\"slice_rotation\"];\n      plot_slice(chart, radius, degrees, max_radius, diff, properties);\n      break;\n\n    case \"square\":\n      plot_square(chart, radius, max_radius, diff, properties);\n      break;\n\n    case \"rotSquare\":\n      plot_rotated_square(chart, radius, max_radius, diff, properties);\n      break;\n\n    case \"triangle\":\n      plot_triangle(chart, radius, max_radius, diff, properties);\n      break;\n\n    case \"rotTriangle\":\n      plot_rotated_triangle(chart, radius, max_radius, diff, properties);\n      break;\n\n    default:\n      plot_circle(chart, radius, max_radius, diff, properties);\n      break;\n  }\n\n}\n\n/**\n * D3 code for plotting a circle.\n *\n * @param  chart      {svg object}\n *         radius     {double} \n *         max_radius {double}     Largest radius of the given trial\n *         diff       {double}     Difference between max and min radius of given trial        \n */ \nfunction plot_circle(chart, radius, max_radius, diff, properties) {\n\n  let translation = radius;\n\n  // If radius is the smaller one, need to adjust translation\n  if (radius !== max_radius) {\n    translation += diff;\n  }\n\n  // Move the origin to center of SVG\n  let g = chart.append(\"g\")\n               .attr(\"transform\", \"translate(\" + translation + \",\" + translation + \")\");\n\n  // Generate the pie\n  let pie = d3.pie();\n\n  // Generate the arcs\n  let arc = d3.arc()\n              .innerRadius(0)\n              .outerRadius(radius/2);\n\n  // Represents the % that each slice takes up - so this is a pie with 4 \"parts\".\n  let data = [25, 25, 25, 25];\n  \n  // Generate groups\n  let arcs = g.selectAll(\"arc\")\n              .data(pie(data))\n              .enter()\n              .append(\"g\")\n              .attr(\"class\", \"arc\")\n\n  // Draw arc paths\n  arcs.append(\"path\")\n      .attr(\"fill\", function(d, i) {\n        return properties[\"fill_color\"];\n      })\n      .attr(\"stroke\", function(d, i) {\n        return properties[\"stroke_color\"];\n      })\n      .attr(\"d\", arc);\n}\n\n/**\n * D3 code for plotting a slice (1/4 of circle).\n *      \n * @param  chart      {svg object}\n *         radius     {double} \n *         rotation   {int}        Degrees of rotation in the counterclockwise direction.        \n *         max_radius {double}     Largest radius of the given trial\n *         diff       {double}     Difference between max and min radius of given trial  \n *         properties {object}     Graph attributes extracted from constants\n */ \nfunction plot_slice(chart, radius, rotation, max_radius, diff, properties) {\n\n  let translation = 0;\n\n  // If radius is the smaller one, need to adjust translation\n  if (radius !== max_radius) {\n    translation = 0.5*diff;\n  }\n\n  // Move the origin to center of SVG\n  let g = chart.append(\"g\")\n               .attr(\"transform\", function() {\n                 if (rotation === 0) {\n                   return \"translate(\" + (max_radius/2 + translation) + \",\" + (1.5*radius + translation) + \")\";\n                 } \n                 else if (rotation === 90) {\n                   return \"translate(\" + (max_radius*1.5 + translation) + \",\" + (1.5*radius + translation) + \")\";\n                 }\n                 // This is assuming the object is centered\n                 else {\n                   return \"translate(\" + (max_radius + translation) + \",\" + (1.5*radius + translation) + \")\";\n                 }\n               });\n\n  // Generate the pie\n  let pie = d3.pie();\n\n  // Generate the arcs\n  let arc = d3.arc()\n              .innerRadius(0)\n              .outerRadius(radius);\n\n  // Represents the % that each slice takes up - so this is a pie with 4 \"parts\".\n  let data = [25, 25, 25, 25];\n  \n  // Generate groups\n  let arcs = g.selectAll(\"arc\")\n              .data(pie(data))\n              .enter()\n              .append(\"g\")\n              .attr(\"class\", \"arc\")\n\n  arcs.append(\"path\")\n      .attr(\"fill\", function(d, i) {\n          if (i === 0) {\n              return properties[\"fill_color\"];\n          } else {\n              return \"#ffffff\";\n          }    \n      })\n      .attr(\"stroke\", function(d, i) {\n        return properties[\"stroke_color\"];\n      })\n      .attr(\"d\", arc)\n      .attr(\"transform\", \"rotate(\" + (-1)*rotation + \")\");\n}\n\n/**\n * D3 code for plotting a square.\n *\n * @param  chart      {svg object}\n *         radius     {double} \n *         max_radius {double}     Largest radius of the given trial\n *         diff       {double}     Difference between max and min radius of given trial  \n *         properties {object}     Graph attributes extracted from constants       \n */ \nfunction plot_square(chart, radius, max_radius, diff, properties) {\n\n  let translation = 0.5*max_radius;\n\n  // If radius is the smaller one, need to adjust translation\n  if (radius !== max_radius) {\n    translation = 0.5*max_radius + 0.5*diff;\n  }\n\n  let g = chart.append(\"g\");\n\n  let rect = g.append(\"rect\")\n                 .attr(\"x\", 0)\n                 .attr(\"y\", 0)\n                 .attr(\"width\", radius)\n                 .attr(\"height\", radius)\n                 .attr(\"fill\", properties[\"fill_color\"])\n                 .attr(\"stroke\", properties[\"stroke_color\"])\n                 .attr(\"transform\", \"translate(\" + translation + \",\" + translation + \")\");\n}\n\n/**\n * D3 code for plotting a rotated square AKA diamond.\n *\n * @param  chart      {svg object}\n *         radius     {double} \n *         max_radius {double}     Largest radius of the given trial\n *         diff       {double}     Difference between max and min radius of given trial   \n *         properties {object}     Graph attributes extracted from constants     \n */ \nfunction plot_rotated_square(chart, radius, max_radius, diff, properties) {\n\n  let xtranslation = radius;\n  let ytranslation = 0.25*radius;\n\n  // If radius is the smaller one, need to adjust translation\n  if (radius !== max_radius) {\n    xtranslation += 0.5*diff;\n    ytranslation += diff;\n  }\n\n  let g = chart.append(\"g\");\n            \n  let rect = g.append(\"rect\")\n                 .attr(\"x\", 0)\n                 .attr(\"y\", 0)\n                 .attr(\"width\", radius)\n                 .attr(\"height\", radius)\n                 .attr(\"fill\", properties[\"fill_color\"])\n                 .attr(\"stroke\", properties[\"stroke_color\"])\n                 .attr(\"transform\", \"translate(\" + xtranslation + \",\" + ytranslation + \") rotate(45)\");\n}\n\n/**\n * D3 code for plotting a triangle.\n *\n * @param  chart      {svg object}\n *         radius     {double} \n *         max_radius {double}     Largest radius of the given trial\n *         diff       {double}     Difference between max and min radius of given trial   \n *         properties {object}     Graph attributes extracted from constants     \n */ \nfunction plot_triangle(chart, radius, max_radius, diff, properties) {\n\n  let translation = 0;\n\n  // If radius is the smaller one, need to shift by the 0.5*diff\n  if (radius !== max_radius) {\n    translation = diff;\n  }\n\n  let poly = [{\"x\":(0.5*radius + translation), \"y\":(0.5*radius + translation)},\n              {\"x\":(0.5*radius + translation), \"y\":(1.5*radius + translation)},\n              {\"x\":(1.5*radius + translation), \"y\":(1.5*radius + translation)}];\n\n  chart.selectAll(\"polygon\")\n       .data([poly])\n       .enter().append(\"polygon\")\n       .attr(\"points\",function(d) { \n          return d.map(function(d) { return [d.x, d.y].join(\",\"); }).join(\" \");})\n       .attr(\"fill\", properties[\"fill_color\"])\n       .attr(\"stroke\", properties[\"stroke_color\"]);\n}\n\n/**\n * D3 code for plotting a rotated triangle.\n *\n * @param  chart      {svg object}\n *         radius     {double} \n *         max_radius {double}     Largest radius of the given trial\n *         diff       {double}     Difference between max and min radius of given trial \n *         properties {object}     Graph attributes extracted from constants       \n */ \nfunction plot_rotated_triangle(chart, radius, max_radius, diff, properties) {\n\n  let translation = 0;\n\n  // If radius is the smaller one, need to shift by the 0.5*diff\n  if (radius !== max_radius) {\n    translation = diff;\n  }\n\n  let poly = [{\"x\":(1.5*radius + translation), \"y\":(0.5*radius + translation)},\n              {\"x\":(0.5*radius + translation), \"y\":(radius + translation)},\n              {\"x\":(1.5*radius + translation), \"y\":(1.5*radius + translation)}];\n\n  chart.selectAll(\"polygon\")\n       .data([poly])\n       .enter().append(\"polygon\")\n       .attr(\"points\",function(d) { \n          return d.map(function(d) { return [d.x, d.y].join(\",\"); }).join(\" \");})\n       .attr(\"fill\", properties[\"fill_color\"])\n       .attr(\"stroke\", properties[\"stroke_color\"]);      \n}\n",
    "static": true,
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/public/scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 116,
    "kind": "function",
    "name": "plot_circle",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js~plot_circle",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js",
    "importStyle": null,
    "description": "D3 code for plotting a circle.",
    "lineNumber": 83,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "chart",
        "description": "{svg object}\n        radius     {double} \n        max_radius {double}     Largest radius of the given trial\n        diff       {double}     Difference between max and min radius of given trial"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 117,
    "kind": "function",
    "name": "plot_slice",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js~plot_slice",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js",
    "importStyle": null,
    "description": "D3 code for plotting a slice (1/4 of circle).\n     ",
    "lineNumber": 135,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "chart",
        "description": "{svg object}\n        radius     {double} \n        rotation   {int}        Degrees of rotation in the counterclockwise direction.        \n        max_radius {double}     Largest radius of the given trial\n        diff       {double}     Difference between max and min radius of given trial  \n        properties {object}     Graph attributes extracted from constants"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 118,
    "kind": "function",
    "name": "plot_square",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js~plot_square",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js",
    "importStyle": null,
    "description": "D3 code for plotting a square.",
    "lineNumber": 201,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "chart",
        "description": "{svg object}\n        radius     {double} \n        max_radius {double}     Largest radius of the given trial\n        diff       {double}     Difference between max and min radius of given trial  \n        properties {object}     Graph attributes extracted from constants"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 119,
    "kind": "function",
    "name": "plot_rotated_square",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js~plot_rotated_square",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js",
    "importStyle": null,
    "description": "D3 code for plotting a rotated square AKA diamond.",
    "lineNumber": 231,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "chart",
        "description": "{svg object}\n        radius     {double} \n        max_radius {double}     Largest radius of the given trial\n        diff       {double}     Difference between max and min radius of given trial   \n        properties {object}     Graph attributes extracted from constants"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 120,
    "kind": "function",
    "name": "plot_triangle",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js~plot_triangle",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js",
    "importStyle": null,
    "description": "D3 code for plotting a triangle.",
    "lineNumber": 263,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "chart",
        "description": "{svg object}\n        radius     {double} \n        max_radius {double}     Largest radius of the given trial\n        diff       {double}     Difference between max and min radius of given trial   \n        properties {object}     Graph attributes extracted from constants"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 121,
    "kind": "function",
    "name": "plot_rotated_triangle",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js~plot_rotated_triangle",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js",
    "importStyle": null,
    "description": "D3 code for plotting a rotated triangle.",
    "lineNumber": 294,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "chart",
        "description": "{svg object}\n        radius     {double} \n        max_radius {double}     Largest radius of the given trial\n        diff       {double}     Difference between max and min radius of given trial \n        properties {object}     Graph attributes extracted from constants"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 122,
    "kind": "function",
    "name": "create_shape_plot",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js~create_shape_plot",
    "access": "public",
    "export": true,
    "importPath": "VCL Framework/scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js",
    "importStyle": "{create_shape_plot}",
    "description": "D3 code for setting up shape plot chart area",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "attributes",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 123,
    "kind": "file",
    "name": "scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js",
    "content": "export {create_strip_plot};\n\n/**\n * D3 code for plotting a strip plot.\n *\n * @param {object}   attributes\n */\nfunction create_strip_plot(attributes) {\n\n\tlet dataset = attributes[\"dataset\"];\n    let properties = attributes[\"graph_attributes\"];\n\n    let width = window.innerWidth * 0.8;\n    let height = window.innerHeight * 0.3;\n    \n    // Scale for data slightly smaller than full width of axes to account for outliers.\n    let xscale_for_data = d3.scaleLinear()\n                   .domain([0, 1]) \n                   .range([window.innerWidth * 0.05, window.innerWidth * 0.75]);\n\n    let xscale = d3.scaleLinear()\n                   .domain([0, 1]) \n                   .range([0, width]);\n\n    let yscale = d3.scaleLinear()\n                   .domain([-1, 0])\n                   .range([height/2, 0]);\n\n    // Create axes: \n    let x_axis = d3.axisBottom()\n                   .scale(xscale)\n                   .tickSize([0]);\n\n    let y_axis = d3.axisLeft()\n                   .scale(yscale)\n                   .tickSize([0]);\n\n\tlet chart = d3.select(\"#graph\") // Insert into the div w/ id = \"graph\"\n\t            .append(\"svg\") \n\t              .attr(\"width\", width) \n\t              .attr(\"height\", height)\n\t              .attr(\"transform\", \"scale(-1,1)\"); // Flip horizontally so cone is\n\t                                                 // is going left -> right (like orig. version)  \n\n\tlet xAxisTranslate = height/2;\n\tlet xAxisElements = chart.append(\"g\")\n\t                        .attr(\"transform\", \"translate(0, \" + xAxisTranslate  +\")\")\n\t                        .call(x_axis)\n\n\t// Populating data: \n\tchart.selectAll(\"strip\")\n\t     .data(dataset)\n\t      .enter()\n\t      .append(\"rect\")\n\t      .attr(\"x\", function (d) {\n\t        return xscale_for_data(d[0]);\n\t      })\n\t      .attr(\"transform\", function (d) {\n\n\t        if (properties[\"fixed_strip_height\"]) {\n\t          return \"translate(0, \" + height/4 + \")\";\n\t        } else {\n\t          let ytranslation = height/2 - (yscale(d[1]) * 0.5);\n\t          return \"translate(0, \" + ytranslation + \")\";\n\t        }\n\n\t      })\n\t      .style(\"width\", function () {\n\t          return properties[\"strip_width\"];\n\t      })\n\t      .style(\"height\", function (d) {\n\n\t        if (properties[\"fixed_strip_height\"]) {\n\t          return height/2;\n\t        } else {\n\t          return yscale(d[1]);\n\t      \t}\n\n\t      })\n\t      .attr(\"fill\", properties[\"fill_color\"]);\n\n\t// Set axis color\n\tchart.selectAll(\"path\")\n\t   .attr(\"stroke\", properties[\"axis_color\"]);\n\n\t// Remove tick labels\n\tchart.selectAll(\"text\").remove();     \n\n}\n",
    "static": true,
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/public/scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 124,
    "kind": "function",
    "name": "create_strip_plot",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js~create_strip_plot",
    "access": "public",
    "export": true,
    "importPath": "VCL Framework/scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js",
    "importStyle": "{create_strip_plot}",
    "description": "D3 code for plotting a strip plot.",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "attributes",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 125,
    "kind": "file",
    "name": "scripts/experiment-properties/graphing/d3-custom-plots/distractor_scatter_plot.js",
    "content": "import {plot_scatter_points} from \"/scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js\";\nexport {create_distractor_scatter_plot};\n\nvar BUFFER = 60;\nvar RANGE_ADJUSTMENT = 15;\n\n/**\n * D3 code for setting up scatter plot chart area with distractor dataset (so two-populations per graph)\n *\n * @param {object}   attributes\n */\nfunction create_distractor_scatter_plot(attributes) {\n\n    let target_dataset = attributes[\"target\"][\"dataset\"];\n    let target_properties = attributes[\"target\"][\"graph_attributes\"];\n\n    let distractor_dataset = attributes[\"distractor\"][\"dataset\"];\n    let distractor_properties = attributes[\"distractor\"][\"graph_attributes\"];\n\n    // Size of the graph\n    let height = window.innerHeight * 0.65;\n    let width = height/2;\n\n    // Create scales:\n    // ** D3 creates a function that takes in input between [0, 100] and \n    //    outputs between [0, width].\n    //    Basically, domain = input, range = ouput. \n    let xscale = d3.scaleLinear()\n                   .domain([0, 1]) \n                   .range([0, width - RANGE_ADJUSTMENT]); \n\n    let yscale = d3.scaleLinear()\n                   .domain([-1, 0]) // !!! NOTE: this is the hack b/c we flipped the y-values \n                                    //     to be negative --> graph is now positive correlation\n                                    //     but on 4th quadrant --> force domain to be from \n                                    //     [-1, 0] to move it to 1st quadrant \n                   .range([height/2, 0 + RANGE_ADJUSTMENT]);\n\n    // Create axes: \n    let x_axis = d3.axisBottom()\n                   .scale(xscale)\n                   .tickSize([0]);\n\n    let y_axis = d3.axisLeft()\n                   .scale(yscale)\n                   .tickSize([0]);\n\n    // Append SVG into graph div\n    let chart = d3.select(\"#graph\")\n                  .append(\"svg\") \n                    .attr(\"width\", width + BUFFER)\n                    .attr(\"height\", height)\n                    .attr(\"style\", `margin-right: ${width/2}; margin-top: 25vh; margin-left: ${BUFFER}`);\n                    \n    // Creating transform SVG elements + append to SVG: \n    let yAxisElements = chart.append(\"g\")\n                             .attr(\"transform\", \"translate(50, 10)\")\n                             .call(y_axis);\n\n    let xAxisTranslate = height/2 + 10;\n\n    let xAxisElements = chart.append(\"g\")\n                              .attr(\"transform\", \"translate(50, \" + xAxisTranslate  +\")\")\n                              .call(x_axis) \n\n    // If dist point color is WHITE, only plot the targets \n    if (distractor_properties[\"point_color\"] === \"WHITE\") {\n      plot_scatter_points(chart, xscale, yscale, target_dataset, target_properties[\"point_size\"], target_properties[\"point_color\"], target_properties[\"point_shape\"]);        \n    } \n    else {\n\n      let larger_data;\n      let smaller_data;\n\n      // Handle if the number of points between distractor & target are unequal\n      if (attributes[\"target\"][\"dataset\"].length > attributes[\"distractor\"][\"dataset\"].length) {\n        larger_data = attributes[\"target\"];\n        smaller_data = attributes[\"distractor\"];\n      } else {\n        larger_data = attributes[\"distractor\"];\n        smaller_data = attributes[\"target\"];\n      }\n\n      // Alternate plotting of distractor and main dataset points - want equal chance of one\n      // getting occluded over the other\n      for (let j in larger_data[\"dataset\"]) {\n\n        if ( j < smaller_data[\"dataset\"].length){\n          let small_point = smaller_data[\"dataset\"][j];\n          plot_scatter_points(chart, xscale, yscale, [small_point], smaller_data[\"graph_attributes\"][\"point_size\"], smaller_data[\"graph_attributes\"][\"point_color\"], smaller_data[\"graph_attributes\"][\"point_shape\"]);\n        }\n\n        let large_point = larger_data[\"dataset\"][j];\n        plot_scatter_points(chart, xscale, yscale, [large_point], larger_data[\"graph_attributes\"][\"point_size\"], larger_data[\"graph_attributes\"][\"point_color\"], larger_data[\"graph_attributes\"][\"point_shape\"]);  \n       \n      }\n    }\n\n    // Set axis color\n    chart.selectAll(\"path\")\n         .attr(\"stroke\", target_properties[\"axis_color\"]);\n\n    // Remove tick labels\n    chart.selectAll(\"text\").remove();     \n\n}\n",
    "static": true,
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/public/scripts/experiment-properties/graphing/d3-custom-plots/distractor_scatter_plot.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 126,
    "kind": "variable",
    "name": "BUFFER",
    "memberof": "scripts/experiment-properties/graphing/d3-custom-plots/distractor_scatter_plot.js",
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-custom-plots/distractor_scatter_plot.js~BUFFER",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/graphing/d3-custom-plots/distractor_scatter_plot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 127,
    "kind": "variable",
    "name": "RANGE_ADJUSTMENT",
    "memberof": "scripts/experiment-properties/graphing/d3-custom-plots/distractor_scatter_plot.js",
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-custom-plots/distractor_scatter_plot.js~RANGE_ADJUSTMENT",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/graphing/d3-custom-plots/distractor_scatter_plot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 128,
    "kind": "function",
    "name": "create_distractor_scatter_plot",
    "memberof": "scripts/experiment-properties/graphing/d3-custom-plots/distractor_scatter_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-custom-plots/distractor_scatter_plot.js~create_distractor_scatter_plot",
    "access": "public",
    "export": true,
    "importPath": "VCL Framework/scripts/experiment-properties/graphing/d3-custom-plots/distractor_scatter_plot.js",
    "importStyle": "{create_distractor_scatter_plot}",
    "description": "D3 code for setting up scatter plot chart area with distractor dataset (so two-populations per graph)",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "attributes",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 129,
    "kind": "file",
    "name": "scripts/experiment-properties/graphing/graphing_controller.js",
    "content": "import {create_scatter_plot} from \"/scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js\";\nimport {create_strip_plot} from \"/scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js\";\nimport {create_ring_plot} from \"/scripts/experiment-properties/graphing/d3-base-plots/ring_plot.js\";\nimport {create_shape_plot} from \"/scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js\";\nimport {is_custom_plot, prepare_custom_plot} from \"/scripts/experiment-properties/graphing/custom_graphing_controller.js\";\nexport {plot_distributions};\n\n/**\n * Main point of entry to determine whether there is a custom plotting code for\n * the condition, or we use one of the standard supported graph plots.\n *\n * @param {object}   experiment\n */\nfunction plot_distributions(experiment) {\n\n\tlet experiment_name = experiment.constructor.name;\n\n\t// If experiment uses a custom plotting code not supported by\n\t// main plots:\n\tif (is_custom_plot(experiment)){\n\t\treturn prepare_custom_plot(experiment);\n\t}\n\n\tswitch (experiment.graph_type) {\n\t\tcase \"scatter\":\n\t\t\tprepare_scatter_plot(experiment);\n\t\t\tbreak;\n\n\t\tcase \"strip\":\n\t\t\tprepare_strip_plot(experiment);\n\t\t\tbreak;\n\n\t\tcase \"ring\":\n\t\t\tprepare_ring_plot(experiment);\n\t\t\tbreak;\n\n\t\tcase \"shapes\":\n\t\t\tprepare_shapes_plot(experiment);\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tthrow Error(\"Graph type \" + experiment.graph_type + \" is not supported.\");\n\t}\n}\n\n/**\n * Sets up attributes from trial data for scatter plots and creates the plots.\n *\n * @param {object}   experiment\n */\nfunction prepare_scatter_plot(experiment) {\n\n\tlet datasets = experiment.coordinates;\n\tlet trial_data = experiment.trial_data;\n\n    for (let i in datasets) {\n\n    \tlet attributes = {\n\t\t\tdataset: datasets[i],\n\t\t\tgraph_attributes: generate_attributes_object(\"scatter\", trial_data, i)\n\t\t};\n\t\t\n\t    create_scatter_plot(attributes);\n\t}\n\n    // Set background color\n    document.body.style.backgroundColor = (trial_data.background_color ? trial_data.background_color : \"WHITE\");\n}\n\n/**\n * Sets up attributes from trial data for strip plots and creates the plots.\n *\n * @param {object}   experiment\n */\nfunction prepare_strip_plot(experiment) {\n\n\tlet datasets = experiment.coordinates;\n\tlet trial_data = experiment.trial_data;\n\n\tfor (let i in datasets) {\n\n\t\tlet attributes = {\n\t\t\tdataset: datasets[i],\n\t\t\tgraph_attributes: generate_attributes_object(\"strip\", trial_data, i)\n\t\t};\n\n\t\tcreate_strip_plot(attributes);\n\t}\n\n\t// Set background color\n    document.body.style.backgroundColor = (trial_data.background_color ? trial_data.background_color : \"WHITE\");\n}\n\n/**\n * Sets up attributes from trial data for ring plots and creates the plots.\n *\n * @param {object}   experiment\n */\nfunction prepare_ring_plot(experiment) {\n\n\tlet datasets = experiment.coordinates;\n\tlet trial_data = experiment.trial_data;\n\n\tfor (let i in datasets) {\n\n\t\tlet attributes = {\n\t\t\tdataset: datasets[i],\n\t\t\tgraph_attributes: generate_attributes_object(\"ring\", trial_data, i)\n\t\t};\n\n\t\tcreate_ring_plot(attributes);\n\t}\n\n\t// Set background color\n    document.body.style.backgroundColor = (trial_data.background_color ? trial_data.background_color : \"WHITE\");\n}\n\n/**\n * Sets up attributes from trial data for shape plots and creates the plots.\n *\n * @param {object}   experiment\n */\nfunction prepare_shapes_plot(experiment) {\n\n\tlet radii = experiment.radii;\n\tlet trial_data = experiment.trial_data;\n\n\tlet max_radius = Math.max(...radii);\n  \tlet min_radius = Math.min(...radii);\n\n\tfor (let i in radii) {\n\n\t\tlet attributes = {\n\t\t\tcurr_radius: radii[i],\n\t\t\tmax_radius:  max_radius,\n\t\t\tmin_radius:  min_radius, \n\t\t\tgraph_attributes: generate_attributes_object(\"shapes\", trial_data, i)\n\t\t};\n\n\t\tcreate_shape_plot(attributes);\n\t}\n\n\t// Set background color\n    document.body.style.backgroundColor = (trial_data.background_color ? trial_data.background_color : \"WHITE\");\n}\n\n/**\n * Generates the js object for graph_attributes based on what is specified in\n * the graphing-config.js. \n *\n * E.g., will return object in this format:\n * {\n *\t\"axis_color\"  : \"BLACK\",\n *  \"point_color\" : \"RED\",\n *  \"point_size\"  : 3\n *   ....\n * }\n *\n * @param {string}   plot_type\t\t\tOnly takes in \"scatter\", \"strip\", \"ring\", \"shapes\"\n * @param {object}   trial_data         Trial data object from experiment model\n * @param {int}\t\t plot_number\t\tDenotes plot number from left to right (e.g. leftmost is 1 etc.)\n *\n * @return {object}  graph_attributes\n */\nfunction generate_attributes_object(plot_type, trial_data, plot_number) {\n\n\tlet obj = {};\n\tlet graph = GRAPH_TYPES[plot_type]; //GRAPH_TYPES comes from /config/graphing-config.js\n\tlet attributes = graph[\"attributes\"];\n\n\tfor (let key in attributes) {\n\n\t\tlet attrib = attributes[key];\n\n\t\t// These attributes are dependent on plot_number:\n\t\tif (key === \"shapes\") {\n\n\t\t\tobj[key] = (key in trial_data ? trial_data[key][plot_number] : attrib[\"default\"])\n\n\t\t} else {\n\n\t\t\t// Check if the key exists in trial_data\n\t\t\t// If it exists, used the value in trial_data\n\t\t\t// Else, use the default specified\n\t\t\tobj[key] = (key in trial_data ? trial_data[key] : attrib[\"default\"]);\n\t\t}\n\t}\n\n\treturn obj;\n}\n",
    "static": true,
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/public/scripts/experiment-properties/graphing/graphing_controller.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 130,
    "kind": "function",
    "name": "prepare_scatter_plot",
    "memberof": "scripts/experiment-properties/graphing/graphing_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/graphing_controller.js~prepare_scatter_plot",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/graphing/graphing_controller.js",
    "importStyle": null,
    "description": "Sets up attributes from trial data for scatter plots and creates the plots.",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 131,
    "kind": "function",
    "name": "prepare_strip_plot",
    "memberof": "scripts/experiment-properties/graphing/graphing_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/graphing_controller.js~prepare_strip_plot",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/graphing/graphing_controller.js",
    "importStyle": null,
    "description": "Sets up attributes from trial data for strip plots and creates the plots.",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 132,
    "kind": "function",
    "name": "prepare_ring_plot",
    "memberof": "scripts/experiment-properties/graphing/graphing_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/graphing_controller.js~prepare_ring_plot",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/graphing/graphing_controller.js",
    "importStyle": null,
    "description": "Sets up attributes from trial data for ring plots and creates the plots.",
    "lineNumber": 99,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 133,
    "kind": "function",
    "name": "prepare_shapes_plot",
    "memberof": "scripts/experiment-properties/graphing/graphing_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/graphing_controller.js~prepare_shapes_plot",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/graphing/graphing_controller.js",
    "importStyle": null,
    "description": "Sets up attributes from trial data for shape plots and creates the plots.",
    "lineNumber": 123,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 134,
    "kind": "function",
    "name": "generate_attributes_object",
    "memberof": "scripts/experiment-properties/graphing/graphing_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/graphing_controller.js~generate_attributes_object",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiment-properties/graphing/graphing_controller.js",
    "importStyle": null,
    "description": "Generates the js object for graph_attributes based on what is specified in\nthe graphing-config.js. \n\nE.g., will return object in this format:\n{\n\"axis_color\"  : \"BLACK\",\n \"point_color\" : \"RED\",\n \"point_size\"  : 3\n  ....\n}",
    "lineNumber": 165,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "plot_type",
        "description": "Only takes in \"scatter\", \"strip\", \"ring\", \"shapes\""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "trial_data",
        "description": "Trial data object from experiment model"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "plot_number",
        "description": "Denotes plot number from left to right (e.g. leftmost is 1 etc.)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "graph_attributes"
    },
    "ignore": true
  },
  {
    "__docId__": 135,
    "kind": "function",
    "name": "plot_distributions",
    "memberof": "scripts/experiment-properties/graphing/graphing_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/graphing_controller.js~plot_distributions",
    "access": "public",
    "export": true,
    "importPath": "VCL Framework/scripts/experiment-properties/graphing/graphing_controller.js",
    "importStyle": "{plot_distributions}",
    "description": "Main point of entry to determine whether there is a custom plotting code for\nthe condition, or we use one of the standard supported graph plots.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "file",
    "name": "scripts/experiments/estimation/estimation.js",
    "content": "import {balance_subconditions} from \"/scripts/experiment-properties/balancing/balancing_controller.js\";\nimport {get_data} from \"/scripts/experiment-properties/data/data_controller.js\";\nimport {randomize_position,\n        randomize_radius_position,\n        force_greater_right_position} from \"/scripts/helpers/experiment_helpers.js\";\n\nexport default class Estimation {\n    /**\n     * Initializes a Estimation experiment object.\n     *\n     * @param  params          {object}    Parameters passed in from routing\n     */\n    constructor(params) {\n\n        let trial_structure = params[\"trial_structure\"];\n        let condition_name = params[\"condition\"];\n        let graph_type = params[\"graph_type\"];\n        let balancing_type = params[\"balancing\"];\n\n        // Validate fields of params\n        if (params.condition !== 'shape_estimation'\n            && params.condition !== 'line_length'\n            && params.condition !== 'rectangle_square'\n            && params.condition !== 'triangle'\n            && params.condition !== 'rectangle_rotated_square_solid'\n            && params.condition !== 'rectangle_rotated_square_outline') {\n            throw  Error(\"unexpected condition name \" + params.condition);\n        }\n\n        // **NOTE: EXPERIMENTS variable comes from /public/config/experiments-config.js\n        if (!EXPERIMENTS[\"estimation\"][\"trial_structure\"].includes(trial_structure)) {\n          throw Error(trial_structure + \" is not supported.\");}\n        else {\n          this.trial_structure = trial_structure;\n        }\n\n        if (!EXPERIMENTS[\"estimation\"][\"graph_type\"].includes(graph_type)){\n          throw Error(graph_type + \" is not supported.\")} \n        else { \n          this.graph_type = graph_type;\n        };  \n\n        if (!EXPERIMENTS[\"estimation\"][\"balancing_type\"].includes(balancing_type)) {\n          throw Error(balancing_type + \" is not supported.\") }\n        else {\n          this.balancing_type = balancing_type;\n        }  \n\n        this.condition_name = condition_name;\n        this.subject_id = params[\"subject_id\"];\n        this.subject_initials = params[\"subject_initials\"];\n\n        // ========================================\n        // EXPERIMENT CONSTANTS\n        this.X_DISTANCE_BETWEEN_SHAPES = 12;\n        this.Y_DIVIATION_FROM_X_AXIS = 3;\n        this.MAX_STEP_INTERVAL = 10;\n        this.ROUNDS_PER_COND = 4;\n        this.MAX_Y_POS_JITTER = 0.1; // y axis can be shifted away from default (window / 2) by at most 0.1 * ImageHeight;\n        this.MAX_STEP_SIZE = 0.05; // how much can the size of shapes can be changed at one keypress\n\n        // PIXELS_PER_CM is defined in estimation_experiment.html\n        if (PIXELS_PER_CM) {\n            this.PIXEL_TO_CM = PIXELS_PER_CM;\n        } else {\n            // 1cm is 37.7952755906 pixels\n            this.PIXEL_TO_CM = 37.7952755906;\n            throw Error(\"PIXELS_PER_CM is not defined\");\n        }\n\n        // Margin from top and bottom of screen is set to at least 5cm\n        this.MARGIN = 5;\n        // ========================================\n        // EXPERIMENT VARIABLES\n        this.input_count_array= [0, 0, 0, 0];\n        this.curr_round_num = 0;\n        this.curr_condition_index = 0; // pointing to positions in this.curr_conditions_constants\n        this.is_practice = true;\n        // input_count_array has length equals to trials_per_round, each index representing num inputs per round\n        // for a given sub condition\n        this.curr_conditions_constants; // array of sub-conditions currently running\n        this.raw_sub_conds; // subconditions in estimation_data.js\n\n        this.curr_condition_index; // pointing to positions in this.curr_conditions_constants\n        this.round_end = true;\n\n        // ========================================\n        // PRACTICE EXPERIMENT VARIABLES\n\n        this.adjusted_midpoint_matrix = {};\n        this.practice_trial_data = [];\n        this.practice_end = false;\n\n        // ========================================\n        // TEST EXPERIMENT VARIABLES\n        this.sub_condition_order;\n\n        // ========================================\n        // CURRENT TRIAL DATA\n        this.trial_data = {};\n\n        this.results = []; // trials are pushed to results at the end of trial;\n        // ========================================\n        // PREPARE EXPERIMENT\n\n        // Extract raw constants\n        // this.raw_sub_conds = generate_estimation_experiment_data(params.condition);\n        this.raw_sub_conds = get_data(this);\n        // console.log(\"raw sub conds\");\n        // Prepare experiment + practice data\n        this.practice_conditions_constants = [];\n        this.curr_conditions_constants = []; // array of sub-conditions currently running\n\n        this.experiment_conditions_constants = [];\n        this.prepare_experiment();\n        this.prepare_practice();\n    }\n\n    /**\n     * Orders the input data according to balancing type and\n     * initializes the Estimation object's variables.\n     *\n     */\n    prepare_experiment() {\n        let dataset = this.raw_sub_conds;\n        \n        this.sub_condition_order = balance_subconditions(this.balancing_type, this.constructor.name.toLowerCase(), dataset.length);\n\n        let ordered_dataset = [];\n        // Order the data set according to the randomly ordered array\n        for (let i = 0; i < this.sub_condition_order.length; i++) {\n            ordered_dataset[i] = dataset[this.sub_condition_order[i]];\n        }\n        // Set experiment trials\n        this.experiment_conditions_constants = ordered_dataset;\n        console.log(\"experiment_conditions_constants\");\n        console.log(JSON.stringify(this.experiment_conditions_constants));\n    }\n\n    /**\n     * Creates the practice dataset by taking the first FOUR subconditions.\n     *\n     */\n    prepare_practice() {\n        let dataset = this.raw_sub_conds;\n        let practice_dataset = [];\n\n        for (let i = 0; i < 1; i++){\n            practice_dataset[i] = dataset[i];\n            this.practice_trial_data[i] = [];\n        }\n        // set variables to practice\n        this.practice_conditions_constants = practice_dataset;\n        this.curr_conditions_constants = practice_dataset;\n        this.curr_condition_index = 0;\n        this.current_practice_condition_index = 0;\n        this.input_count_array = new Array(this.curr_conditions_constants[0].trials_per_round).fill(0);\n        this.is_practice = true;\n    }\n\n    /**\n     * Resets all relevant variables to use that of the experiment.\n     * (input_count_array, curr_conditions_constants, and curr_condition_index\n     * are shared variables between the practice and test trials).\n     *\n     * This function is called once all the practice trials have run.\n     */\n    set_variables_to_experiment() {\n        console.log(\"set_variables_to_experiment\");\n        this.curr_conditions_constants = this.experiment_conditions_constants;\n        this.curr_condition_index = 0;\n        this.curr_round_num = 0;\n        this.input_count_array = new Array(this.curr_conditions_constants[0].trials_per_round).fill(0);\n        this.is_practice = false;\n    }\n\n    /**\n     * Generates a Estimation object for use in the JsPsych timeline.\n     *\n     * @param  block_type {string}     \"test\" or \"practice\"\n     * @return trial {object}\n     */\n    generate_trial(block_type) {\n\n        if ((block_type !== \"test\") && (block_type !== \"practice\")) {\n            throw Error(block_type + \" is not supported.\")\n        }\n       // Initialize a variable for this so it is usable inside on_start\n        var estimation_exp = this;\n        var address = location.protocol + \"//\" + location.hostname + \":\" + location.port + \"/estimation_trial\";\n\n        let group = {};\n        let is_ref_left = false;\n        let ready = {\n            type: 'html-keyboard-response',\n            choices: [32],\n            stimulus: \"\",\n            on_start: function(trial) {\n                is_ref_left = Math.random() > 0.5;\n                trial.stimulus = is_ref_left? \"<div align = 'center'><font size = 20>\" +\n                    \"<p>The Modifiable shape will be on the right<p>\" +\n                    \"<br> <br> <p><b>Press space to continue.</b></p></font></div>\" :\n                    \"<div align = 'center'><font size = 20>\" +\n                    \"<p>The Modifiable shape will be on the left<p>\" +\n                    \"<br> <br> <p><b>Press space to continue.</b></p></font></div>\" ;\n            },\n            data: {type: 'instruction'}\n        };\n        let trial = {\n            type:'external-html-keyboard-response',\n            url: address,\n            choices: [32, 81],  // 32 = spacebar, 81 = q (exit button for debugging)\n            execute_script: true,\n            response_ends_trial: true,\n            data: {\n                round_num: 0,\n                estimated_size: -1,\n                adjustments: [], // array of numbers representing the adjustments made to the shape\n                sub_condition_index: 0,\n                block_type: block_type\n            },\n            on_start: function(trial) {\n                console.log(\"====================on_start=======================\");\n                // Set the constants to be used:\n                trial.data.sub_condition_index = estimation_exp.curr_condition_index;\n                trial.data.round_num = estimation_exp.curr_round_num;\n                trial.data = Object.assign(estimation_exp.curr_conditions_constants[estimation_exp.curr_condition_index],\n                    trial.data);\n                trial.data.is_ref_left = is_ref_left; // is the reference shape on the left\n                estimation_exp.curr_trial_data = trial.data;\n                // Save trial data for practice so can calculate exclusion criteria\n                if (trial.data.run_type === \"practice\") {\n                    estimation_exp.practice_trial_data[estimation_exp.curr_condition_index].push(trial.data);\n                }\n                // console.log(JSON.stringify(trial));\n            },\n            on_finish: function(data) { // NOTE: on_finish takes in data var\n                // save data here\n                console.log(\"====================on_finish=======================\");\n                let curr_trail_data = JSON.parse(JSON.stringify((data)));\n                estimation_exp.results.push(curr_trail_data);\n                estimation_exp.update_curr_round_number(data);\n                estimation_exp.update_curr_cond_idx(data);\n                estimation_exp.update_input_array(data);\n            }\n        };\n        group.timeline = [ready, trial];\n        console.log(JSON.stringify(group));\n        return group;\n    }\n\n    /**\n     * Set the current trial's number of inputs in the input_count_array\n     * @param data {object} the trial.data object from jsPsych\n     * */\n    update_input_array(data) {\n        if (data.round_num < 0 || data.round_num > 3) {\n            throw Error(\"trail number : \" + data.round_num + \" is out of range\");\n        }\n        this.input_count_array[data.round_num] = data.adjustments.length;\n    }\n\n    /**\n     * Update the current round number\n     * @param trial_data {object} the trial.data object from jsPsych\n     * */\n    update_curr_round_number(trial_data) {\n        if (trial_data.round_num === this.ROUNDS_PER_COND - 1) {\n            this.curr_round_num  = 0;\n        } else {\n            this.curr_round_num++;\n        }\n    }\n\n    /**\n     * Update the index of the condition that is being referred to\n     * @param trial_data {object} the trail.data object from jsPsych\n     * */\n    update_curr_cond_idx(trial_data) {\n        if (trial_data.round_num === this.ROUNDS_PER_COND - 1) {\n            this.curr_condition_index++;\n        }\n    }\n\n    /**\n     * plot a trial\n     * @param sub_cond {object} a sub_condition object, refer to estimation_data.js for details\n     * @param round_num {number} current round number\n     */\n    plot_trial(sub_cond, round_num) {\n        let estimation_exp = this;\n\n        let width = window.innerWidth;\n        let height = window.innerHeight;\n\n        let mid_width = width / 2;\n        let mid_height = height / 2;\n\n        let chart = d3.select(\"#graph\") // Insert into the div w/ id = \"graph\"\n            .append(\"svg\")\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .attr(\"style\", \"display: block\");\n\n        let left_x = mid_width - this.X_DISTANCE_BETWEEN_SHAPES * this.PIXEL_TO_CM / 2;\n        let right_x = mid_width + this.X_DISTANCE_BETWEEN_SHAPES * this.PIXEL_TO_CM / 2;\n\n        let ref_size = sub_cond.ref_size * estimation_exp.PIXEL_TO_CM ;\n        let ref_y = estimation_exp.calculate_y_position(ref_size);\n\n        // the size of the modifiable shape start from mod_min_size for trial 0 and 2, mod_max_size for 1 and 3;\n        let mod_size = (round_num % 2 === 1)?\n            sub_cond.mod_max_size * estimation_exp.PIXEL_TO_CM  : sub_cond.mod_min_size * estimation_exp.PIXEL_TO_CM;\n        let mod_y = estimation_exp.calculate_y_position(mod_size);\n\n        this.curr_trial_data.is_ref_smaller = (round_num % 2 === 1);\n\n        if (this.curr_trial_data.is_ref_left) {\n            this.plot_shape(sub_cond.ref_shape, chart, ref_size , ref_y, left_x, true, sub_cond.ref_outline, sub_cond.ref_fill);\n            this.plot_shape(sub_cond.mod_shape, chart, mod_size, mod_y, right_x, false, sub_cond.mod_outline, sub_cond.mod_fill);\n            this.curr_trial_data.is_ref_left = true;\n        } else {\n            this.plot_shape(sub_cond.mod_shape, chart, mod_size, mod_y, left_x, false, sub_cond.mod_outline, sub_cond.mod_fill);\n            this.plot_shape(sub_cond.ref_shape, chart, ref_size, ref_y, right_x, true, sub_cond.ref_outline, sub_cond.ref_fill);\n            this.curr_trial_data.is_ref_left = false;\n        }\n    }\n\n    /**\n     * calculate the y value of the position where the shape should be plotted\n     * @param radius the radius of the shape\n     * @returns {number}\n     */\n    calculate_y_position(radius) {\n        let estimation_exp = this;\n        // y_margin is the distance from\n        let y_margin = estimation_exp.MARGIN * estimation_exp.PIXEL_TO_CM;\n        // pick a random position inside the screen such the the shapes will not be displayed outside of the border\n        let range = [y_margin + radius / 2, window.innerHeight - y_margin - radius / 2];\n        console.log(\"radius: \" + radius);\n        console.log(JSON.stringify(range));\n        let y_pos = Math.random() * (range[1] - range[0]) + range[0];\n        return y_pos;\n    }\n\n    /**\n     * function to display the experiment trials\n     */\n    plot_trials(){\n        console.log(\"plot_trials with index = \" + this.curr_condition_index +\n            \"round number\" + this.curr_round_num);\n        this.plot_trial(this.curr_conditions_constants[this.curr_condition_index], this.curr_round_num);\n    }\n\n    /**\n     * plot a shape\n     *\n     * @param shape {string}\n     * @param chart {object}\n     * @param radius {number}\n     * @param y_pos {number}\n     * @param x_pos {number}\n     * @param is_ref {boolean} if the shape is a reference shape or a modifiable shape\n     * @param outline {string} outline color\n     * @param fill {string} fill color\n     */\n    plot_shape(shape, chart, radius, y_pos, x_pos, is_ref, outline, fill) {\n        switch (shape) {\n            case \"circle\":\n                this.plot_circle(chart, radius, y_pos, x_pos, is_ref, outline, fill);\n                break;\n            case \"triangle\":\n                this.plot_triangle(chart, radius, y_pos, x_pos, is_ref, outline, fill);\n                break;\n            case \"square\":\n                this.plot_square(chart, radius, y_pos, x_pos, is_ref, outline, fill);\n                break;\n            case \"instruction\":\n                this.plot_instruction(chart, y_pos, x_pos, trial);\n                break;\n            case \"line\":\n                this.plot_line(chart, radius, y_pos, x_pos, is_ref, outline);\n                break;\n            case \"rectangle\":\n                this.plot_rectangle(chart, radius, y_pos, x_pos, is_ref, outline, fill);\n                break;\n        }\n    }\n\n    /**\n     *\n     * @param chart {object} svg object\n     * @param y_pos {number} position on the y axis\n     * @param x_pos {number} position on the x axis\n     * @param trial {object}\n     */\n    plot_instruction(chart, y_pos, x_pos, trial) {\n        chart.append(\"text\")\n            .attr(\"x\", x_pos)\n            .attr(\"y\", y_pos)\n            .attr(\"font-family\", \"sans-serif\")\n            .attr(\"font-size\", \"28px\")\n            .attr(\"fill\", \"black\")\n            .text(()=>{\n                return trial.is_ref_left? \"The modifiable shape is on the right\" :  \"The modifiable shape is on the left\";\n            });\n    }\n\n    /**\n     * D3 code for plotting a circle.\n     *\n     * @param chart {object}\n     * @param diameter {number}\n     * @param y_pos {number}\n     * @param x_pos {number}\n     * @param is_ref {boolean} if the shape is a reference shape or a modifiable shape\n     * @param outline {string}\n     * @param fill {string}\n     */\n    plot_circle(chart, diameter, y_pos, x_pos, is_ref, outline, fill) {\n        let exp = this;\n        let radius = diameter / 2;\n        chart.append(\"circle\")\n            .attr(\"cx\", x_pos)\n            .attr(\"cy\", y_pos)\n            .attr(\"r\", diameter / 2)\n            .attr(\"id\", \"circle_shape\")\n            .attr(\"is_ref\", is_ref)\n            .attr(\"fill\", fill)\n            .attr(\"stroke\", outline);\n        if (is_ref === false) {\n            d3.select(\"body\")\n                .on(\"keydown\", function () {\n                    let event = d3.event;\n                    // console.log(event);\n                    if (event.key === \"m\" || event.key === \"z\") {\n                        diameter = exp.calculate_size_change(event.key, diameter);\n                        radius = diameter / 2;\n                        d3.select(\"#circle_shape\")\n                            .attr(\"r\", radius);\n                    }\n                });\n        }\n    }\n\n    /**\n     *\n     * @param exp {object} an Experiment object\n     * @param radius {number}\n     * @param shape_id {string}\n     * @param shape_type {string}\n     */\n    static append_adjustments_listener(exp, radius, shape_id, shape_type) {\n        d3.select(\"body\")\n            .on(\"keydown\", function () {\n                let event = d3.event;\n                // console.log(event);\n                if (event.key === \"m\" || event.key === \"z\") {\n                    let sign = event.key === \"m\" ? 1 : -1;\n                    let change = Math.random() * exp.PIXEL_TO_CM * exp.MAX_STEP_SIZE / 2;\n                    // divided by 2 because we are changing radius (which is half of diameter)\n                    // for example when we do this for squares we will be chaning width and height\n                    let new_radius = radius + sign * change;\n                    console.log(new_radius);\n                    exp.curr_trial_data.adjustments.push(change * sign / exp.PIXEL_TO_CM );\n                    exp.curr_trial_data.estimated_size = new_radius / exp.PIXEL_TO_CM ;\n                    radius = new_radius;\n                    d3.select(shape_id)\n                        .attr(\"r\", new_radius);\n                }\n            });\n    }\n\n    /**\n     *\n     * @param chart {object}\n     * @param width {number}\n     * @param y_pos {number}\n     * @param x_pos {number}\n     * @param is_ref {boolean} if the shape is a reference shape or a modifiable shape,\n     *                         is_ref === true if the shape is a reference shape\n     * @param outline {string}\n     * @param fill {string}\n     */\n    plot_square(chart, width, y_pos, x_pos, is_ref, outline, fill) {\n        let exp = this;\n        chart.append(\"rect\")\n            .attr(\"id\", is_ref? \"square_shape_ref\": \"square_shape_mod\")\n            .attr(\"x\", x_pos - width / 2)\n            .attr(\"y\", y_pos - width / 2) // the x and y attributes for square\n                                          // refers to the position of the upper left corner\n                                          // however x_pos and y_pos specifies the center of the shape\n            .attr(\"width\", width)\n            .attr(\"height\", width)\n            .attr(\"fill\", fill)\n            .attr(\"stroke\", outline);\n        if (is_ref === true && exp.curr_trial_data.ref_rotate_by) {\n            let transform = \"rotate(\";\n            transform = transform + exp.curr_trial_data.ref_rotate_by.toString();\n            transform = transform + \" \" + (x_pos - width).toString();\n            transform = transform + \" \" + (y_pos - width).toString();\n            transform = transform + \")\";\n            d3.select(\"#square_shape_ref\").attr(\"transform\", transform);\n        }\n        if (is_ref === false) {\n            d3.select(\"body\")\n                .on(\"keydown\", () => {\n                    let event = d3.event;\n                    if (event.key === \"m\" || event.key === \"z\") {\n                        width = exp.calculate_size_change(event.key, width);\n                        d3.select(\"#square_shape_mod\")\n                            .attr(\"width\", width)\n                            .attr(\"height\", width);\n                    }\n                });\n        }\n\n    }\n\n    /**\n     *\n     * @param chart {object}\n     * @param radius {number}\n     * @param y_pos {number}\n     * @param x_pos {number}\n     * @param is_ref {boolean} if the shape is a reference shape or a modifiable shape,\n     *                         is_ref === true if the shape is a reference shape\n     */\n    plot_triangle(chart, radius, y_pos, x_pos, is_ref, outline, fill) {\n        let exp = this;\n        // for equilateral triangles, height = side * sqrt(3) / 2;\n        let short_side = radius;\n        let long_side = radius;\n        let height = 0, width = 0;\n\n        let poly = [];\n        if (!is_ref) {\n            if (exp.curr_trial_data.width_height_ratio) {\n                long_side = short_side * exp.curr_trial_data.width_height_ratio;\n                height = Math.sqrt(Math.pow(long_side, 2) - Math.pow(short_side / 2, 2));\n                width = short_side;\n                if (exp.curr_trial_data.mod_rotate_by) {\n                    poly = [\n                        {\"x\":(0.5 * height + x_pos), \"y\":(y_pos)},\n                        {\"x\":(-0.5 * height + x_pos), \"y\":(-0.5 * width + y_pos)},\n                        {\"x\":(-0.5 * height + x_pos), \"y\":(0.5 * width + y_pos)}];\n                } else {\n                    poly = [\n                        {\"x\":(x_pos), \"y\":(-0.5 * height + y_pos)},\n                        {\"x\":(-0.5 * width + x_pos), \"y\":(0.5 * height + y_pos)},\n                        {\"x\":(0.5 * width + x_pos), \"y\":(0.5 * height + y_pos)}];\n                }\n            } else {\n                height = radius * Math.sqrt(3)/2;\n                poly = [\n                    {\"x\":x_pos, \"y\":(-0.5 * height + y_pos)},\n                    {\"x\":(-0.5 * radius + x_pos), \"y\":(0.5 * height + y_pos)},\n                    {\"x\":(0.5 * radius + x_pos), \"y\":(0.5 * height + y_pos)}];\n            }\n        } else {\n            height = radius * Math.sqrt(3)/2;\n            poly = [\n                {\"x\":x_pos, \"y\":(-0.5 * height + y_pos)},\n                {\"x\":(-0.5 * radius + x_pos), \"y\":(0.5 * height + y_pos)},\n                {\"x\":(0.5 * radius + x_pos), \"y\":(0.5 * height + y_pos)}];\n        }\n        chart.append(\"polygon\")\n            .attr(\"points\",function() {\n                return poly.map(function(d) { return [d.x, d.y].join(\",\"); }).join(\" \");})\n            .attr(\"fill\", fill)\n            .attr(\"stroke\", outline)\n            .attr(\"id\", is_ref? \"triangle_shape_ref\" : \"triangle_shape_mod\");\n\n        if (is_ref === false) {\n            d3.select(\"body\")\n                .on(\"keydown\", function () {\n                    let event = d3.event;\n                    if (event.key === \"m\" || event.key === \"z\") {\n                        // decide the amount of change;\n                        radius = exp.calculate_size_change(event.key, radius);\n                        // plot the changed shape\n                        short_side = radius;\n                        if (exp.curr_trial_data.width_height_ratio) {\n                            long_side = short_side * exp.curr_trial_data.width_height_ratio;\n                            height = Math.sqrt(Math.pow(long_side, 2) - Math.pow(short_side / 2, 2));\n                            width = short_side;\n                            if (exp.curr_trial_data.mod_rotate_by) {\n                                poly = [\n                                    {\"x\":(0.5 * height + x_pos), \"y\":(y_pos)},\n                                    {\"x\":(-0.5 * height + x_pos), \"y\":(-0.5 * width + y_pos)},\n                                    {\"x\":(-0.5 * height + x_pos), \"y\":(0.5 * width + y_pos)}];\n                            } else {\n                                poly = [\n                                    {\"x\":(x_pos), \"y\":(-0.5 * height + y_pos)},\n                                    {\"x\":(-0.5 * width + x_pos), \"y\":(0.5 * height + y_pos)},\n                                    {\"x\":(0.5 * width + x_pos), \"y\":(0.5 * height + y_pos)}];\n                            }\n                        } else {\n                            height = short_side * Math.sqrt(3)/2;\n                            poly = [\n                                {\"x\":x_pos, \"y\":(-0.5 * height + y_pos)},\n                                {\"x\":(-0.5 * short_side + x_pos), \"y\":(0.5 * height + y_pos)},\n                                {\"x\":(0.5 * short_side + x_pos), \"y\":(0.5 * height + y_pos)}];\n                        }\n                       chart.select(\"#triangle_shape_mod\")\n                            .attr(\"points\",function() {\n                                return poly.map(function(d) { return [d.x, d.y].join(\",\"); }).join(\" \");});\n                    }\n                });\n        }\n    }\n\n    /**\n     *\n     * @param chart {object}\n     * @param size {number}\n     * @param y_pos {number}\n     * @param x_pos {number}\n     * @param is_ref {boolean}\n     * @param outline {string}\n     * @param fill {string}\n     */\n    plot_rectangle(chart, size, y_pos, x_pos, is_ref, outline, fill) {\n        let exp = this;\n        let short_side = size;\n        let long_side = size;\n        let height = 0, width = 0;\n        if (exp.curr_trial_data.width_height_ratio) {\n            long_side = short_side * exp.curr_trial_data.width_height_ratio;\n        }\n        width = short_side;\n        height = long_side;\n        chart.append(\"rect\")\n            .attr(\"id\", is_ref? \"rect_shape_ref\": \"rect_shape_mod\")\n            .attr(\"x\", x_pos - width / 2)\n            .attr(\"y\", y_pos - height / 2) // the x and y attributes for square\n            // refers to the position of the upper left corner\n            // however x_pos and y_pos specifies the center of the shape\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .attr(\"fill\", fill)\n            .attr(\"stroke\", outline);\n        if (is_ref === false && exp.curr_trial_data.mod_rotate_by) {\n            let transform = \"rotate(\";\n            transform = transform + exp.curr_trial_data.mod_rotate_by.toString();\n            transform = transform + \" \" + (x_pos).toString();\n            transform = transform + \" \" + (y_pos).toString();\n            transform = transform + \")\";\n            console.log(transform);\n            d3.select(\"#rect_shape_mod\").attr(\"transform\", transform);\n        }\n\n        if (is_ref === false) {\n            d3.select(\"body\")\n                .on(\"keydown\", function () {\n                    let event = d3.event;\n                    if (event.key === \"m\" || event.key === \"z\") {\n                        size = exp.calculate_size_change(event.key, size);\n                        let short_side = size;\n                        let long_side = exp.curr_trial_data.width_height_ratio * short_side;\n                        let new_width = 0, new_height = 0;\n                        new_width = short_side;\n                        new_height = long_side;\n                        d3.select(\"#rect_shape_mod\")\n                            .attr(\"width\", new_width)\n                            .attr(\"height\", new_height);\n                    }\n                });\n        }\n\n    }\n\n\n    /**\n     *\n     * @param chart {object}\n     * @param width {number}\n     * @param y_pos {number}\n     * @param x_pos {number}\n     * @param is_ref {boolean}\n     * @param outline\n     */\n    plot_line(chart, width, y_pos, x_pos, is_ref, outline) {\n        let exp = this;\n        let x1, x2, y1, y2;\n        if (!is_ref) {\n            x1 = x_pos - (width / 2) * Math.sin(exp.curr_trial_data.mod_rotate_by * Math.PI / 180);\n            x2 = x_pos + (width / 2) * Math.sin(exp.curr_trial_data.mod_rotate_by * Math.PI / 180);\n            y1 = y_pos - (width / 2) * Math.cos(exp.curr_trial_data.mod_rotate_by * Math.PI / 180);\n            y2 = y_pos + (width / 2) * Math.cos(exp.curr_trial_data.mod_rotate_by * Math.PI / 180);\n        } else {\n            x1 = x_pos - width / 2;\n            x2 = x_pos + width / 2;\n            y1 = y_pos;\n            y2 = y_pos;\n        }\n        chart.append(\"line\")\n            .style(\"stroke\", outline)\n            .style(\"stroke-width\", exp.curr_trial_data.stroke_width)\n            .attr(\"id\", is_ref? \"line_shape_ref\": \"line_shape_mod\")\n            .attr(\"x1\", x1)\n            .attr(\"x2\", x2)\n            .attr(\"y1\", y1)\n            .attr(\"y2\", y2);\n        if (is_ref === false) {\n            d3.select(\"body\")\n                .on(\"keydown\", function () {\n                    let event = d3.event;\n                    if (event.key === \"m\" || event.key === \"z\") {\n                        width = exp.calculate_size_change(event.key, width);\n                        if (!is_ref) {\n                            x1 = x_pos - (width / 2) * Math.sin(exp.curr_trial_data.mod_rotate_by * Math.PI / 180);\n                            x2 = x_pos + (width / 2) * Math.sin(exp.curr_trial_data.mod_rotate_by * Math.PI / 180);\n                            y1 = y_pos - (width / 2) * Math.cos(exp.curr_trial_data.mod_rotate_by * Math.PI / 180);\n                            y2 = y_pos + (width / 2) * Math.cos(exp.curr_trial_data.mod_rotate_by * Math.PI / 180);\n                        } else {\n                            x1 = x_pos - width / 2;\n                            x2 = x_pos + width / 2;\n                            y1 = y_pos;\n                            y2 = y_pos;\n                        }\n                        d3.select(\"#line_shape_mod\")\n                            .attr(\"x1\", x1)\n                            .attr(\"x2\", x2)\n                            .attr(\"y1\", y1)\n                            .attr(\"y2\", y2);\n                    }\n                });\n        }\n    }\n\n    /**\n     *\n     * @param event_key m to increase the size and z to decrease the size\n     * @param size the previous size of the shape\n     * @returns number\n     */\n    calculate_size_change(event_key, size) {\n        let sign = event_key === \"m\" ? 1 : -1;\n        let change = Math.random() * this.PIXEL_TO_CM * this.MAX_STEP_SIZE;\n        let new_radius = size + sign * change;\n        size = new_radius;\n        this.curr_trial_data.adjustments.push(change * sign / this.PIXEL_TO_CM);\n        this.curr_trial_data.estimated_size = new_radius / this.PIXEL_TO_CM;\n        return size;\n    }\n\n    /*\n    * Saves experiment data as csv\n    * */\n    export_trial_data() {\n        let trial_data = jsPsych.data.get().filterCustom(function (row) {\n            return row.block_type === \"practice\" || row.block_type === \"test\";\n        })\n        // These are variables forced on by jsPsych\n            .ignore('stimulus')\n            .ignore('key_press')\n            .ignore('choices')\n            .ignore('trial_type')\n            .ignore('trial_index')\n            .ignore('time_elapsed')\n            .ignore('internal_node_id')\n            .ignore('rt');\n\n        let fileName = \"S\" + this.subject_id + \"_\" + this.condition_name + \"_shape_estimation_trial_results.csv\";\n\n        trial_data.localSave('csv', fileName);\n    }\n}\n",
    "static": true,
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/public/scripts/experiments/estimation/estimation.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 137,
    "kind": "class",
    "name": "Estimation",
    "memberof": "scripts/experiments/estimation/estimation.js",
    "static": true,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation",
    "access": "public",
    "export": true,
    "importPath": "VCL Framework/scripts/experiments/estimation/estimation.js",
    "importStyle": "Estimation",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 138,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#constructor",
    "access": "public",
    "description": "Initializes a Estimation experiment object.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "{object}    Parameters passed in from routing"
      }
    ]
  },
  {
    "__docId__": 139,
    "kind": "member",
    "name": "trial_structure",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#trial_structure",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "member",
    "name": "graph_type",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#graph_type",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "member",
    "name": "balancing_type",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#balancing_type",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "member",
    "name": "condition_name",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#condition_name",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "member",
    "name": "subject_id",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#subject_id",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 144,
    "kind": "member",
    "name": "subject_initials",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#subject_initials",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "member",
    "name": "X_DISTANCE_BETWEEN_SHAPES",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#X_DISTANCE_BETWEEN_SHAPES",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "member",
    "name": "Y_DIVIATION_FROM_X_AXIS",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#Y_DIVIATION_FROM_X_AXIS",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "member",
    "name": "MAX_STEP_INTERVAL",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#MAX_STEP_INTERVAL",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "member",
    "name": "ROUNDS_PER_COND",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#ROUNDS_PER_COND",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "member",
    "name": "MAX_Y_POS_JITTER",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#MAX_Y_POS_JITTER",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "member",
    "name": "MAX_STEP_SIZE",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#MAX_STEP_SIZE",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "member",
    "name": "PIXEL_TO_CM",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#PIXEL_TO_CM",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 153,
    "kind": "member",
    "name": "MARGIN",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#MARGIN",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 154,
    "kind": "member",
    "name": "input_count_array",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#input_count_array",
    "access": "public",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "type": {
      "types": [
        "number[]"
      ]
    }
  },
  {
    "__docId__": 155,
    "kind": "member",
    "name": "curr_round_num",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#curr_round_num",
    "access": "public",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 156,
    "kind": "member",
    "name": "curr_condition_index",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#curr_condition_index",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 157,
    "kind": "member",
    "name": "is_practice",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#is_practice",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 158,
    "kind": "member",
    "name": "round_end",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#round_end",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "member",
    "name": "adjusted_midpoint_matrix",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#adjusted_midpoint_matrix",
    "access": "public",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "member",
    "name": "practice_trial_data",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#practice_trial_data",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 161,
    "kind": "member",
    "name": "practice_end",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#practice_end",
    "access": "public",
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 162,
    "kind": "member",
    "name": "trial_data",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#trial_data",
    "access": "public",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 163,
    "kind": "member",
    "name": "results",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#results",
    "access": "public",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "member",
    "name": "raw_sub_conds",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#raw_sub_conds",
    "access": "public",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 165,
    "kind": "member",
    "name": "practice_conditions_constants",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#practice_conditions_constants",
    "access": "public",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 166,
    "kind": "member",
    "name": "curr_conditions_constants",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#curr_conditions_constants",
    "access": "public",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 167,
    "kind": "member",
    "name": "experiment_conditions_constants",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#experiment_conditions_constants",
    "access": "public",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "prepare_experiment",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#prepare_experiment",
    "access": "public",
    "description": "Orders the input data according to balancing type and\ninitializes the Estimation object's variables.",
    "lineNumber": 124,
    "params": [],
    "return": null
  },
  {
    "__docId__": 169,
    "kind": "member",
    "name": "sub_condition_order",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#sub_condition_order",
    "access": "public",
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "prepare_practice",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#prepare_practice",
    "access": "public",
    "description": "Creates the practice dataset by taking the first FOUR subconditions.",
    "lineNumber": 144,
    "params": [],
    "return": null
  },
  {
    "__docId__": 175,
    "kind": "member",
    "name": "current_practice_condition_index",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#current_practice_condition_index",
    "access": "public",
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "set_variables_to_experiment",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#set_variables_to_experiment",
    "access": "public",
    "description": "Resets all relevant variables to use that of the experiment.\n(input_count_array, curr_conditions_constants, and curr_condition_index\nare shared variables between the practice and test trials).\n\nThis function is called once all the practice trials have run.",
    "lineNumber": 168,
    "params": [],
    "return": null
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "generate_trial",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#generate_trial",
    "access": "public",
    "description": "Generates a Estimation object for use in the JsPsych timeline.",
    "lineNumber": 183,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "block_type",
        "description": "{string}     \"test\" or \"practice\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "trial {object}"
    }
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "update_input_array",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#update_input_array",
    "access": "public",
    "description": "Set the current trial's number of inputs in the input_count_array",
    "lineNumber": 256,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "{object} the trial.data object from jsPsych"
      }
    ],
    "return": null
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "update_curr_round_number",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#update_curr_round_number",
    "access": "public",
    "description": "Update the current round number",
    "lineNumber": 267,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "trial_data",
        "description": "{object} the trial.data object from jsPsych"
      }
    ],
    "return": null
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "update_curr_cond_idx",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#update_curr_cond_idx",
    "access": "public",
    "description": "Update the index of the condition that is being referred to",
    "lineNumber": 279,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "trial_data",
        "description": "{object} the trail.data object from jsPsych"
      }
    ],
    "return": null
  },
  {
    "__docId__": 189,
    "kind": "method",
    "name": "plot_trial",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#plot_trial",
    "access": "public",
    "description": "plot a trial",
    "lineNumber": 290,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "sub_cond",
        "description": "{object} a sub_condition object, refer to estimation_data.js for details"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "round_num",
        "description": "{number} current round number"
      }
    ],
    "return": null
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "calculate_y_position",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#calculate_y_position",
    "access": "public",
    "description": "calculate the y value of the position where the shape should be plotted",
    "lineNumber": 334,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "radius",
        "description": "the radius of the shape"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "plot_trials",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#plot_trials",
    "access": "public",
    "description": "function to display the experiment trials",
    "lineNumber": 349,
    "params": [],
    "return": null
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "plot_shape",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#plot_shape",
    "access": "public",
    "description": "plot a shape",
    "lineNumber": 367,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "shape",
        "description": "{string}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "chart",
        "description": "{object}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "radius",
        "description": "{number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "y_pos",
        "description": "{number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "x_pos",
        "description": "{number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "is_ref",
        "description": "{boolean} if the shape is a reference shape or a modifiable shape"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "outline",
        "description": "{string} outline color"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "fill",
        "description": "{string} fill color"
      }
    ],
    "return": null
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "plot_instruction",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#plot_instruction",
    "access": "public",
    "description": "",
    "lineNumber": 397,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "chart",
        "description": "{object} svg object"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "y_pos",
        "description": "{number} position on the y axis"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "x_pos",
        "description": "{number} position on the x axis"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "trial",
        "description": "{object}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "plot_circle",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#plot_circle",
    "access": "public",
    "description": "D3 code for plotting a circle.",
    "lineNumber": 420,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "chart",
        "description": "{object}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "diameter",
        "description": "{number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "y_pos",
        "description": "{number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "x_pos",
        "description": "{number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "is_ref",
        "description": "{boolean} if the shape is a reference shape or a modifiable shape"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "outline",
        "description": "{string}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "fill",
        "description": "{string}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "append_adjustments_listener",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation.append_adjustments_listener",
    "access": "public",
    "description": "",
    "lineNumber": 453,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "exp",
        "description": "{object} an Experiment object"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "radius",
        "description": "{number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "shape_id",
        "description": "{string}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "shape_type",
        "description": "{string}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "plot_square",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#plot_square",
    "access": "public",
    "description": "",
    "lineNumber": 485,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "chart",
        "description": "{object}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "{number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "y_pos",
        "description": "{number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "x_pos",
        "description": "{number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "is_ref",
        "description": "{boolean} if the shape is a reference shape or a modifiable shape,\n                        is_ref === true if the shape is a reference shape"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "outline",
        "description": "{string}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "fill",
        "description": "{string}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "plot_triangle",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#plot_triangle",
    "access": "public",
    "description": "",
    "lineNumber": 529,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "chart",
        "description": "{object}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "radius",
        "description": "{number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "y_pos",
        "description": "{number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "x_pos",
        "description": "{number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "is_ref",
        "description": "{boolean} if the shape is a reference shape or a modifiable shape,\n                        is_ref === true if the shape is a reference shape"
      }
    ],
    "return": null
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "plot_rectangle",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#plot_rectangle",
    "access": "public",
    "description": "",
    "lineNumber": 623,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "chart",
        "description": "{object}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "{number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "y_pos",
        "description": "{number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "x_pos",
        "description": "{number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "is_ref",
        "description": "{boolean}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "outline",
        "description": "{string}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "fill",
        "description": "{string}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "plot_line",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#plot_line",
    "access": "public",
    "description": "",
    "lineNumber": 683,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "chart",
        "description": "{object}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "{number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "y_pos",
        "description": "{number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "x_pos",
        "description": "{number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "is_ref",
        "description": "{boolean}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "outline",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "calculate_size_change",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#calculate_size_change",
    "access": "public",
    "description": "",
    "lineNumber": 738,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "number"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "event_key",
        "description": "m to increase the size and z to decrease the size"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "the previous size of the shape"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "number"
    }
  },
  {
    "__docId__": 201,
    "kind": "method",
    "name": "export_trial_data",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#export_trial_data",
    "access": "public",
    "description": null,
    "lineNumber": 751,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 202,
    "kind": "file",
    "name": "scripts/experiments/estimation/estimation_timeline.js",
    "content": "import Estimation from \"/scripts/experiments/estimation/estimation.js\";\nexport var estimation_exp = new Estimation(params);\n\nvar timeline = [];\nvar address = location.protocol + \"//\" + location.hostname + \":\" + location.port;\n\n// =========================================================\n// WELCOME TRIAL BLOCK\n\nvar welcome = {\n    type: 'html-keyboard-response',\n    stimulus: `<div align = \"center\">` + `<img src=\"${address}/img/VCL_lab_logo.png\"></img><br><br>` +\n    `<b>Base:</b> estimation` + '<br>' +\n    `<b>Trial Type:</b> ${estimation_exp.trial_structure}` + '<br>' +\n    `<b>Graph Type:</b> ${estimation_exp.graph_type}` + '<br>' +\n    `<b>Condition:</b> ${estimation_exp.condition_name}` +\n    '<br><br><br><p><font size = 15>Press any key to begin.<p></font>' +\n    '</div>',\n    data: {type: 'instruction'}\n};\ntimeline.push(welcome);\n\n// =========================================================\n// INSTRUCTION TRIAL BLOCKS\n\nswitch(estimation_exp.graph_type){\n    case \"shapes\":\n        if (estimation_exp.condition_name === \"shape_estimation\") {\n            var instructions = {\n                type: \"html-keyboard-response\",\n                stimulus: \"<div align = 'center'> <p>In this experiment, you will be using the <b>m</b>\" +\n                \" and <b>z</b> keys to adjust the size of the modifiable shape<br> so that it's size is roughly\" +\n                \" the <u>same</u> as the reference shape. <br><br>\" +\n                `<div><img src='${address}/img/sample_circle.png'></img><img src='${address}/img/sample_triangle.png'></img></div>` +\n                \" <b>m</b> increases the size. <br>\" +\n                \" <b>z</b> decreases the size. <br><br>\" +\n                `<div style='float: left; margin-bottom: 25px;'></div>` +\n                \"<br> <br> <br> When you are done adjusting the size, hit the <b>spacebar</b>.\" +\n                \"<br> Press any key to continue. </div>\"\n            };\n        } else if (estimation_exp.condition_name === \"triangle\") {\n            var instructions = {\n                type: \"html-keyboard-response\",\n                stimulus: \"<div align = 'center'> <p>In this experiment, you will be using the <b>m</b>\" +\n                \" and <b>z</b> keys to adjust the size of the modifiable shape<br> so that it's size is roughly\" +\n                \" the <u>same</u> as the reference shape. <br><br>\" +\n                `<div><img src='${address}/img/sample_triangle_1.png'></img><img src='${address}/img/sample_triangle_2.png'></img></div>` +\n                \" <b>m</b> increases the size. <br>\" +\n                \" <b>z</b> decreases the size. <br><br>\" +\n                `<div style='float: left; margin-bottom: 25px;'></div>` +\n                \"<br> <br> <br> When you are done adjusting the size, hit the <b>spacebar</b>.\" +\n                \"<br> Press any key to continue. </div>\"\n            };\n        } else if (estimation_exp.condition_name === \"rectangle_square\") {\n            var instructions = {\n                type: \"html-keyboard-response\",\n                stimulus: \"<div align = 'center'> <p>In this experiment, you will be using the <b>m</b>\" +\n                \" and <b>z</b> keys to adjust the size of the modifiable shape<br> so that it's size is roughly\" +\n                \" the <u>same</u> as the reference shape. <br><br>\" +\n                `<div><img src='${address}/img/sample_rect_1.png'></img><img src='${address}/img/sample_rect_2.png'></img></div>` +\n                \" <b>m</b> increases the size. <br>\" +\n                \" <b>z</b> decreases the size. <br><br>\" +\n                `<div style='float: left; margin-bottom: 25px;'></div>` +\n                \"<br> <br> <br> When you are done adjusting the size, hit the <b>spacebar</b>.\" +\n                \"<br> Press any key to continue. </div>\"\n            };\n        } else if (estimation_exp.condition_name === \"rectangle_rotated_square_solid\") {\n            var instructions = {\n                type: \"html-keyboard-response\",\n                stimulus: \"<div align = 'center'> <p>In this experiment, you will be using the <b>m</b>\" +\n                \" and <b>z</b> keys to adjust the size of the modifiable shape<br> so that it's size is roughly\" +\n                \" the <u>same</u> as the reference shape. <br><br>\" +\n                `<div><img src='${address}/img/sample_rect_1.png'></img><img src='${address}/img/sample_rect_2.png'></img></div>` +\n                \" <b>m</b> increases the size. <br>\" +\n                \" <b>z</b> decreases the size. <br><br>\" +\n                `<div style='float: left; margin-bottom: 25px;'></div>` +\n                \"<br> <br> <br> When you are done adjusting the size, hit the <b>spacebar</b>.\" +\n                \"<br> Press any key to continue. </div>\"\n            };\n        } else if (estimation_exp.condition_name === \"rectangle_rotated_square_outline\") {\n            var instructions = {\n                type: \"html-keyboard-response\",\n                stimulus: \"<div align = 'center'> <p>In this experiment, you will be using the <b>m</b>\" +\n                \" and <b>z</b> keys to adjust the size of the modifiable shape<br> so that it's size is roughly\" +\n                \" the <u>same</u> as the reference shape. <br><br>\" +\n                `<div><img src='${address}/img/sample_rect_1.png'></img><img src='${address}/img/sample_rect_2.png'></img></div>` +\n                \" <b>m</b> increases the size. <br>\" +\n                \" <b>z</b> decreases the size. <br><br>\" +\n                `<div style='float: left; margin-bottom: 25px;'></div>` +\n                \"<br> <br> <br> When you are done adjusting the size, hit the <b>spacebar</b>.\" +\n                \"<br> Press any key to continue. </div>\"\n            };\n        }\n        if (estimation_exp.condition_name === \"line_length\"){\n            var instructions = {\n                type: \"html-keyboard-response\",\n                stimulus: \"<div align = 'center'> <p>In this experiment, you will be using the <b>m</b>\" +\n                \" and <b>z</b> keys to adjust the size of the modifiable shape<br> so that it's size is roughly\" +\n                \" the <u>same</u> as the reference shape. <br><br>\" +\n                `<div><img src='${address}/img/sample_line_1.png'></img><img src='${address}/img/sample_line_2.png'></img></div>` +\n                \" <b>m</b> increases the size. <br>\" +\n                \" <b>z</b> decreases the size. <br><br>\" +\n                `<div style='float: left; margin-bottom: 25px;'></div>` +\n                \"<br> <br> <br> When you are done adjusting the size, hit the <b>spacebar</b>.\" +\n                \"<br> Press any key to continue. </div>\"\n            };\n        }\n        break;\n    default:\n        throw Error(\"unexpected condition name\");\n}\n\nvar ready = {\n    type: 'html-keyboard-response',\n    stimulus: \"<div align = 'center'> <font size = 20><p>Ready? We will first do some practice trials. <p>\" + \"<br> <br> <p><b>Press any key to begin.</b></p></font></div>\",\n    data: {type: 'instruction'}\n};\n\nvar instruction_trials = {\n    timeline: [instructions, ready]\n};\n\ntimeline.push(instruction_trials);\n\n// =========================================================\n// PRACTICE TRIAL BLOCKS\n\n// ---------------------------------------------------------\n// PRACTICE TIMELINE\n\nvar practice_estimation = estimation_exp.generate_trial(\"practice\");\nvar trial_loop_function = function (data) {\n    console.log(\"====================loop_function=======================\");\n    let last_trial = jsPsych.data.get().last(1).values()[0];\n    // console.log(JSON.stringify(last_trial));\n    if (jsPsych.pluginAPI.convertKeyCharacterToKeyCode('q') === data.values()[0].key_press){\n        estimation_exp.set_variables_to_experiment();\n        console.log(\"Practice trials finished with key = q, set variables to experiment\");\n        return false;\n    }\n    else if (jsPsych.pluginAPI.convertKeyCharacterToKeyCode('space') === data.values()[0].key_press) {\n        let num_adjustments = last_trial.adjustments.length;\n        if (num_adjustments === 0) {\n            window.alert(\"Please make adjustments before pressing space bar\");\n            // repeat previous round\n            // if curr_round_num > 0, go back to previous round\n            if (estimation_exp.curr_round_num !== 0) {\n                estimation_exp.curr_round_num--;\n            }\n            // else go back to last round of previous condition\n            else if (estimation_exp.curr_round_num) {\n                estimation_exp.curr_condition_index--;\n                estimation_exp.curr_round_num = estimation_exp.ROUNDS_PER_COND - 1;\n            }\n            return true;\n        } else {\n            if (estimation_exp.curr_condition_index === estimation_exp.curr_conditions_constants.length) {\n                // all rounds of all sub_conditions has finished\n                if (estimation_exp.is_practice === false) {\n                    estimation_exp.export_trial_data();\n                    console.log(\"Experiment finished\");\n                } else {\n                    console.log(\"Practice finished\");\n                }\n                estimation_exp.set_variables_to_experiment();\n                return false;\n            } else {\n                console.log(\"Continue Experiment\");\n                return true;\n            }\n        }\n    } else {\n        console.log(\"error estimation_timeline.js 105\")\n    }\n};\nvar practice = {\n    timeline: [practice_estimation],\n    loop_function: trial_loop_function,\n    on_finish: function (data) {\n    }\n};\ntimeline.push(practice);\n\n// ---------------------------------------------------------\n// STOP BLOCK\n\nvar stop = {\n    type: 'html-keyboard-response',\n    stimulus: function() {\n        return \"<div align = 'center'> <font size = 6><p>This concludes the practice trials.<p>\" +\n            \"<p><b>Any questions?</b></p></font></div>\";\n    },\n    data: {type: 'instruction'},\n    on_start: function(stop){\n        // Reset background color to feedback\n        document.body.style.backgroundColor = 'WHITE';\n    }\n};\n\nvar ready_experiment = {\n    type: 'html-keyboard-response',\n    stimulus: \"<div align = 'center'> <font size = 20><p>Ready?<p>\" + \"<br><br><p><b>Press any key to begin.</b></p></font></div>\",\n    data: {type: 'instruction'}\n};\n\nvar stop_trials = {\n    timeline: [stop, ready_experiment]\n};\n\ntimeline.push(stop_trials);\n\n\n// =========================================================\n// EXPERIMENT TRIAL BLOCKS\n\nvar trial = estimation_exp.generate_trial(\"test\");\nvar experiment = {\n    timeline: [trial],\n    loop_function: trial_loop_function,\n    on_start: function (data) {\n        console.log(\"Should only be excuted before all experiments\");\n    }\n};\n\ntimeline.push(experiment);\n\nconsole.log(\"======================\");\n\n// =========================================================\n// DATA DOWNLOADING \n\nvar experiment_end = {\n    type: 'html-keyboard-response',\n    stimulus: '<div align = \"center\">' +\n    '<p><font size = 10>You have completed the experiment!<p></font>' +\n    '<br>' +\n    'Trial and summary data files will now automatically download locally.' +\n    '</div>' ,\n    on_start: function(){\n        estimation_exp.export_trial_data();\n        // estimation_exp.export_summary_data();\n        // Reset background color to feedback\n        document.body.style.backgroundColor = 'WHITE';\n    }\n};\ntimeline.push(experiment_end);\n\n// =========================================================\n// START JSPSYCH\n\njsPsych.init({\n    timeline: timeline,\n    on_finish: function(){\n        jsPsych.data.displayData();\n    }\n});",
    "static": true,
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/public/scripts/experiments/estimation/estimation_timeline.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 203,
    "kind": "variable",
    "name": "estimation_exp",
    "memberof": "scripts/experiments/estimation/estimation_timeline.js",
    "static": true,
    "longname": "scripts/experiments/estimation/estimation_timeline.js~estimation_exp",
    "access": "public",
    "export": true,
    "importPath": "VCL Framework/scripts/experiments/estimation/estimation_timeline.js",
    "importStyle": "{estimation_exp}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "scripts/experiments/estimation/estimation.js~Estimation"
      ]
    }
  },
  {
    "__docId__": 204,
    "kind": "variable",
    "name": "timeline",
    "memberof": "scripts/experiments/estimation/estimation_timeline.js",
    "static": true,
    "longname": "scripts/experiments/estimation/estimation_timeline.js~timeline",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/estimation/estimation_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 205,
    "kind": "variable",
    "name": "address",
    "memberof": "scripts/experiments/estimation/estimation_timeline.js",
    "static": true,
    "longname": "scripts/experiments/estimation/estimation_timeline.js~address",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/estimation/estimation_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 206,
    "kind": "variable",
    "name": "welcome",
    "memberof": "scripts/experiments/estimation/estimation_timeline.js",
    "static": true,
    "longname": "scripts/experiments/estimation/estimation_timeline.js~welcome",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/estimation/estimation_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"data\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 207,
    "kind": "variable",
    "name": "ready",
    "memberof": "scripts/experiments/estimation/estimation_timeline.js",
    "static": true,
    "longname": "scripts/experiments/estimation/estimation_timeline.js~ready",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/estimation/estimation_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"data\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 208,
    "kind": "variable",
    "name": "instruction_trials",
    "memberof": "scripts/experiments/estimation/estimation_timeline.js",
    "static": true,
    "longname": "scripts/experiments/estimation/estimation_timeline.js~instruction_trials",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/estimation/estimation_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 209,
    "kind": "variable",
    "name": "practice_estimation",
    "memberof": "scripts/experiments/estimation/estimation_timeline.js",
    "static": true,
    "longname": "scripts/experiments/estimation/estimation_timeline.js~practice_estimation",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/estimation/estimation_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 131,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 210,
    "kind": "function",
    "name": "trial_loop_function",
    "memberof": "scripts/experiments/estimation/estimation_timeline.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiments/estimation/estimation_timeline.js~trial_loop_function",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/estimation/estimation_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 211,
    "kind": "variable",
    "name": "practice",
    "memberof": "scripts/experiments/estimation/estimation_timeline.js",
    "static": true,
    "longname": "scripts/experiments/estimation/estimation_timeline.js~practice",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/estimation/estimation_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 176,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *, \"loop_function\": *, \"on_finish\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 212,
    "kind": "variable",
    "name": "stop",
    "memberof": "scripts/experiments/estimation/estimation_timeline.js",
    "static": true,
    "longname": "scripts/experiments/estimation/estimation_timeline.js~stop",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/estimation/estimation_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 187,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"data\": *, \"on_start\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 213,
    "kind": "variable",
    "name": "ready_experiment",
    "memberof": "scripts/experiments/estimation/estimation_timeline.js",
    "static": true,
    "longname": "scripts/experiments/estimation/estimation_timeline.js~ready_experiment",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/estimation/estimation_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 200,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"data\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 214,
    "kind": "variable",
    "name": "stop_trials",
    "memberof": "scripts/experiments/estimation/estimation_timeline.js",
    "static": true,
    "longname": "scripts/experiments/estimation/estimation_timeline.js~stop_trials",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/estimation/estimation_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 206,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 215,
    "kind": "variable",
    "name": "trial",
    "memberof": "scripts/experiments/estimation/estimation_timeline.js",
    "static": true,
    "longname": "scripts/experiments/estimation/estimation_timeline.js~trial",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/estimation/estimation_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 216,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 216,
    "kind": "variable",
    "name": "experiment",
    "memberof": "scripts/experiments/estimation/estimation_timeline.js",
    "static": true,
    "longname": "scripts/experiments/estimation/estimation_timeline.js~experiment",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/estimation/estimation_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 217,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *, \"loop_function\": *, \"on_start\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 217,
    "kind": "variable",
    "name": "experiment_end",
    "memberof": "scripts/experiments/estimation/estimation_timeline.js",
    "static": true,
    "longname": "scripts/experiments/estimation/estimation_timeline.js~experiment_end",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/estimation/estimation_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 232,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"on_start\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 218,
    "kind": "file",
    "name": "scripts/experiments/jnd/jnd.js",
    "content": "// import {generateDistribution} from \"/scripts/generators/gaussian_distribution_generator.js\";\nimport {initialize_random_order} from \"/scripts/experiment-properties/balancing/generators/random_generator.js\";\nimport {balance_subconditions} from \"/scripts/experiment-properties/balancing/balancing_controller.js\";\nimport {get_data, \n        get_data_subset} from \"/scripts/experiment-properties/data/data_controller.js\";\nimport {randomize_position,\n        randomize_radius_position,\n        force_greater_right_position} from \"/scripts/helpers/experiment_helpers.js\";\n\nexport default class JND {\n\n  /**\n   * Initializes a JND experiment object. \n   *\n   * @param  params {assoc array}  Parameters passed from routing.\n   */\n  constructor(params) {\n\n    let trial_structure = params[\"trial_structure\"];\n    let condition_name = params[\"condition\"];\n    let graph_type = params[\"graph_type\"];\n    let balancing_type = params[\"balancing\"];\n\n    this.condition_name = condition_name; \n    this.condition_group = this.condition_name.split('_')[0]; // Mostly to handle \"distractor\" conditions.\n                                                              // TODO: Should have a better flag for it.\n    this.subject_id = params[\"subject_id\"];\n    this.subject_initials = params[\"subject_initials\"];\n\n    // ========================================\n    // PARAMETER CHECKING\n\n    // **NOTE: EXPERIMENTS variable comes from /public/config/experiments-config.js\n    if (!EXPERIMENTS[\"jnd\"][\"trial_structure\"].includes(trial_structure)) {\n      throw Error(trial_structure + \" is not supported.\");}\n    else {\n      this.trial_structure = trial_structure;\n    }\n\n    if (!EXPERIMENTS[\"jnd\"][\"graph_type\"].includes(graph_type)){\n      throw Error(graph_type + \" is not supported.\")} \n    else { \n      this.graph_type = graph_type;\n    };  \n\n    if (!EXPERIMENTS[\"jnd\"][\"balancing_type\"].includes(balancing_type)) {\n      throw Error(balancing_type + \" is not supported.\") }\n    else {\n      this.balancing_type = balancing_type;\n    }  \n\n    // ========================================\n    // EXPERIMENT CONSTANTS\n\n    this.MIN_CORRELATION = 0.0;\n    this.MAX_CORRELATION = 1.0;\n    this.MIN_TRIALS = 24;\n    this.MAX_TRIALS = 52;\n    this.WINDOW_SIZE = 24;\n    this.WINDOW_INTERVAL = 3;\n    this.CONVERGENCE_THRESHOLD = 0.75; \n    this.INCORRECT_MULTIPLIER = 3;\n\n    // ========================================\n    // PRACTICE EXPERIMENT VARIABLES\n\n    this.practice_conditions_constants;\n    this.current_practice_condition_index; \n\n    // ========================================\n    // TEST EXPERIMENT VARIABLES\n\n    this.first_trial_of_sub_condition = true;\n    this.sub_condition_order;\n    this.sub_conditions_constants;\n    this.current_sub_condition_index;\n    this.adjusted_quantity_matrix = {};   // The matrix is in this format:\n                                          // { sub_condition_index : [adjusted_quantity1, adjusted_quantity2 ... ] }\n\n    // ========================================\n    // CURRENT TRIAL DATA\n\n    // Plotting-related vars\n    this.left_coordinates = \"\";\n    this.right_coordinates = \"\";\n    this.distractor_coordinates = \"\";\n    \n    // JsPsych trial_data for the current trial\n    this.trial_data = \"\";\n\n    // ========================================\n    // PREPARE EXPERIMENT\n\n    // Extract raw constants\n    this.raw_constants = get_data(this);\n    \n    // Prepare experiment + practice data\n    this.prepare_experiment();\n    this.prepare_practice();   \n\n  }\n\n  /**\n   * Orders the input data according to balancing type and\n   * initializes the JND object's variables.  \n   *\n   * @param  balancing_type {string}                             Type of balancing. Currently only latin_square\n   *                                                             is supported.\n   *         dataset {[{assoc array}, {assoc array}, ... ]}      The data to be ordered. \n   */ \n  prepare_experiment() {\n\n    let dataset = this.raw_constants;\n\n    this.sub_condition_order = balance_subconditions(this.balancing_type, this.constructor.name.toLowerCase(), dataset.length);\n\n    var ordered_dataset = [];\n\n    // Order the data set according to the latin square\n    // Initialize adjusted_quantity_matrix size \n    for (let i=0; i < this.sub_condition_order.length; i++){\n      ordered_dataset[i] = dataset[this.sub_condition_order[i]];\n      this.adjusted_quantity_matrix[i] = [];\n    }\n\n    // Set experiment trials \n    this.sub_conditions_constants = ordered_dataset;\n    this.current_sub_condition_index = 0;  \n  }\n\n  /**\n   * Orders the input dataset by randomizing it, and initializes the practice variables.\n   *\n   * @param  dataset {[{assoc array}, {assoc array}, ... ]}   The data to be ordered. \n   */\n  prepare_practice() {\n\n    let dataset = this.raw_constants;\n\n    this.sub_condition_order = initialize_random_order(dataset.length);\n    let practice_dataset = [];\n\n    // Order the data set according to the latin square\n    // Initialize adjusted_quantity_matrix size \n    for (let i=0; i < this.sub_condition_order.length; i++){\n      practice_dataset[i] = dataset[this.sub_condition_order[i]];\n    }\n\n    // Set practice trials\n    this.practice_conditions_constants = practice_dataset;\n    this.current_practice_condition_index = 0;\n  }\n\n  /**\n   * Generates a JND trial object for use in the JsPsych timeline.\n   *\n   * @param  type {string}             \"test\" or \"practice\"\n   * @return trial {object}\n   */ \n  generate_trial(block_type) {\n\n    if ((block_type !== \"test\") && (block_type !== \"practice\")) {throw Error(block_type + \" is not supported.\")};\n\n    // Initialize a variable for this so it is usable inside on_start\n    var jnd_exp = this; \n    var address = location.protocol + \"//\" + location.hostname + \":\" + location.port + \"/jnd_trial\"; \n\n    var trial = {\n      type:'external-html-keyboard-response',\n      url: address,\n      choices:['z', 'm', 'q'], //q is exit button (for debugging)\n      execute_script: true,\n      response_ends_trial: true,\n      on_start: function(trial){ // NOTE: on_start takes in trial var \n\n        // Set the constants to be used:\n        if (block_type == \"test\"){ \n          var index = jnd_exp.current_sub_condition_index; \n          var constants = jnd_exp.sub_conditions_constants[index];\n        }\n        else { \n          var index = jnd_exp.current_practice_condition_index; \n          var constants = jnd_exp.practice_conditions_constants[index];\n        }\n\n        // Calculate adjusted correlation\n        var adjusted_correlation = jnd_exp.calculate_adjusted_correlation(constants);\n\n        // Handling saving this trial's data: \n        jnd_exp.handle_data_saving(trial, block_type, constants, index, adjusted_correlation);\n\n        // Generate distributions\n        var base_coordinates = generateDistribution(constants.base_correlation, \n                                                    constants.error, \n                                                    constants.num_points, \n                                                    constants.num_SD, \n                                                    constants.mean, \n                                                    constants.SD);\n\n        var adjusted_coordinates = generateDistribution(adjusted_correlation, \n                                                        constants.error, \n                                                        constants.num_points, \n                                                        constants.num_SD, \n                                                        constants.mean,\n                                                        constants.SD);\n\n        if (jnd_exp.condition_group === \"distractor\"){\n          var left_dist_coordinates = generateDistribution(constants.dist_base,\n                                                           constants.dist_error,\n                                                           constants.dist_num_points,\n                                                           constants.num_SD,\n                                                           constants.mean,\n                                                           constants.SD);\n\n          var right_dist_coordinates = generateDistribution(constants.dist_base,\n                                                           constants.dist_error,\n                                                           constants.dist_num_points,\n                                                           constants.num_SD,\n                                                           constants.mean,\n                                                           constants.SD);\n\n          jnd_exp.distractor_coordinates = [left_dist_coordinates, right_dist_coordinates];\n        }\n\n        // Randomize position of the base and adjusted graphs\n        var result = randomize_position(trial, \n                                       base_coordinates,\n                                       adjusted_coordinates, \n                                       constants.base_correlation, \n                                       adjusted_correlation);\n        // // For testing purposes, can force R graph to have greater correlation\n        // var result = force_greater_right_position(trial,\n        //                                           base_coordinates,\n        //                                           adjusted_coordinates,\n        //                                           constants.base_correlation,\n        //                                           adjusted_correlation);\n\n        // Set up D3 variables for plotting\n        jnd_exp.coordinates = [result.left, result.right];\n         \n        jnd_exp.trial_data = trial.data; \n\n        console.log(\"[RIGHT] Correlation: \" + trial.data.right_correlation);\n        console.log(\"[LEFT] Correlation: \" + trial.data.left_correlation);\n        \n      },\n      on_finish: function(data){ // NOTE: on_finish takes in data var \n        jnd_exp.check_response(data);\n        console.log(\"RESPONSE: \" + data.correct);\n      } \n    };\n\n    return trial; \n  }\n\n  /**\n   * Handles saving the relevant data on a given trial.\n   *\n   * For reference, these are the helper variables created to assist in trial logic (i.e not present in excel)\n   * trial_variables =         \n   *       {type: 'jnd',\n   *       run_type: '',\n   *       left_correlation: '',\n   *       right_correlation: '',\n   *       };\n   *\n   * These are variables created WITHIN the trial logic that were not present in excel (but need to be\n   * outputted to results).     \n   * export_variables = \n   *       {sub_condition: '',           // Chronological ordering of sub_condition [1, 2, 3 ... ]\n   *        balanced_sub_condition: '',  // Index of sub_condition according to balancing order\n   *        jnd: '',\n   *        base_correlation: '',\n   *        adjusted_correlation: '',\n   *        correct: '',\n   *       };\n   *\n   * @param trial {object}\n   *        block_type {string}           \"test\" or \"practice\"\n   *        constants {assoc array}\n   *        index {integer}\n   *        adjusted_correlation {double}\n   */\n  handle_data_saving(trial, block_type, constants, index, adjusted_correlation) {\n\n    // Add all constants from excel\n    trial.data = constants;\n\n    // Adding constants that required computation (not from excel)\n    trial.data.type = \"jnd\";\n    trial.data.adjusted_correlation = adjusted_correlation;\n    trial.data.jnd = Math.abs(adjusted_correlation - constants.base_correlation);\n    trial.data.sub_condition = index; \n    trial.data.balanced_sub_condition = this.sub_condition_order[index];\n\n    // Block specific saves \n    if (block_type == \"test\"){\n      this.adjusted_quantity_matrix[index].push(adjusted_correlation);\n      trial.data.run_type = \"test\";\n    }\n    else{\n      trial.data.run_type = \"practice\";\n    }\n  }\n\n  /**\n   * Determines whether the current sub condition can end or not.\n   * \n   * @return {boolean}            True if sub condition should end.\n   */\n  end_sub_condition() {\n\n    if (this.adjusted_quantity_matrix[this.current_sub_condition_index].length == this.MAX_TRIALS ||\n          this.is_converged_in_window()){\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n\n  /**\n   * Determines whether current subcondition has converged or not.\n   *\n   * @return {boolean}            True if converged.\n   */\n  is_converged_in_window() {\n    \n    var converged = false;\n    var num_completed_trials = this.adjusted_quantity_matrix[this.current_sub_condition_index].length;\n\n    // Check if we have completed the minimum number of trials\n    // and if the number of completed trials is greater than the window size\n    if (num_completed_trials >= this.MIN_TRIALS && num_completed_trials >= this.WINDOW_SIZE) {\n\n      // 2D Matrix of windows of adjusted quantities\n      var adjusted_quantity_windows = [];\n\n      // The index of the last trial\n      var last_trial = num_completed_trials - 1;\n\n      // Compute the interval size and remainder\n      // The remainder is computed in case the window size isn't divisible by the # intervals\n      var interval_size = this.WINDOW_SIZE / this.WINDOW_INTERVAL;\n      var interval_remainder = this.WINDOW_SIZE % this.WINDOW_INTERVAL;\n\n      // This is the first trial in the window\n      // For example:\n      // numCompletedTrials = 5\n      // windowSize = 3\n      // [ 0 1 2 3 4 5 6 7 8 9 ]\n      // windowStart would be at index: 5 - 3 = 2\n      var window_start = num_completed_trials - this.WINDOW_SIZE;\n      console.log(\"num completed: \" + num_completed_trials);\n      console.log(\"window start: \" + window_start);\n\n      // Iterate over all of the trials from the start of the window to the last trial\n      // and organize them into the 2D adjustedQuantityWindows matrix\n      while (window_start < last_trial) {\n\n        // While we have extra elements that don't fit into an interval\n        // add one extra to each window interval\n        var current_interval_size = interval_remainder > 0 ? interval_size + 1 : interval_size;\n        if (interval_remainder > 0) {\n          interval_remainder--;\n        }\n\n        // Collect the adjusted quantity values from the trials into the double[]\n        var adjusted_quantities = [];\n        for (let i = 0; i < current_interval_size; ++i) {\n          var adjusted_quantity = this.adjusted_quantity_matrix[this.current_sub_condition_index][i + window_start];\n          adjusted_quantities.push(adjusted_quantity);\n        }\n\n        // Set the window start to the next interval\n        window_start += current_interval_size;\n        adjusted_quantity_windows.push(adjusted_quantities);\n      }\n\n      console.log(adjusted_quantity_windows);\n\n      var variance = [];\n      var mean = [];\n      for (let i = 0; i < adjusted_quantity_windows.length; i++){\n        variance.push(math.var(adjusted_quantity_windows[i]));\n        mean.push(math.mean(adjusted_quantity_windows[i]));\n      }\n\n      var mean_of_variances = math.mean(variance);\n      var variance_of_means = math.var(mean);\n      var F = variance_of_means/mean_of_variances;\n      console.log(\"F: \" + F);\n      // Convergence if the F value is < 1 - convergenceThreshold\n      // if the F is greater than 0.25, then converge \n      converged = F < (1 - this.CONVERGENCE_THRESHOLD);\n    }\n\n    if (converged) {console.log(\"CONVERGED!!!!\")};\n\n    return converged;\n\n  }\n\n  /**\n   * Calculates the adjusted correlation depending on whether this is the\n   * first trial of the sub condition or not.\n   *\n   * @param  constants {assoc array}\n   * @return adjusted_correlation {double}          \n   */\n  calculate_adjusted_correlation(constants) {\n\n    // For the first trial, we need to initialize the adjusted correlation:\n    if (this.first_trial_of_sub_condition){\n      var adjusted_correlation = this\n                                .initialize_adjusted_statistic(constants.converge_from_above,\n                                                               constants.base_correlation,\n                                                               constants.initial_difference);\n      // Set flag to false\n      this.first_trial_of_sub_condition = false;\n    }\n    else{\n      var last_JND_trial = jsPsych.data.get().filter({type: \"jnd\"}).last(1).values()[0];\n\n      var adjusted_correlation = this\n                                 .get_next_adjusted_statistic(last_JND_trial.correct,\n                                                              constants.converge_from_above,\n                                                              last_JND_trial.adjusted_correlation,\n                                                              constants.base_correlation,\n                                                              constants.max_step_size);\n    }\n    return adjusted_correlation; \n  }\n\n  /**\n   * Initializes the adjusted correlation for the first time.\n   *\n   * @param  converge_from_above {boolean}    \n   *         base_correlation {double}         \n   *         initial_difference {double}\n   * @return adjusted_correlation {double}          \n   */\n  initialize_adjusted_statistic(converge_from_above, base_correlation, initial_difference) {\n    var adjusted_correlation;\n\n    if (converge_from_above){\n      adjusted_correlation = Math.min(this.MAX_CORRELATION, base_correlation + initial_difference); }\n    else{\n      adjusted_correlation = Math.max(this.MIN_CORRELATION, base_correlation - initial_difference);\n    };\n\n    return adjusted_correlation; \n  }\n\n  /**\n   * Calculates the next adjusted correlation/statistic.\n   *\n   * @param  correct {boolean}\n   *         converge_from_above {boolean}    \n   *         adjusted_quantity {double}         \n   *         base_correlation {double}\n   *         initial_difference {double}\n   *         max_step_size {double}\n   * @return adjusted_correlation {double}          \n   */\n  get_next_adjusted_statistic(correct, converge_from_above, adjusted_quantity, base_correlation, max_step_size) {\n    var next_adjusted_statistic;\n\n    var initial_difference = base_correlation;\n\n    if (converge_from_above) {\n      if (correct) {\n        next_adjusted_statistic = Math.max(initial_difference, adjusted_quantity - max_step_size);\n      } else {\n        next_adjusted_statistic = Math.min(this.MAX_CORRELATION, adjusted_quantity + max_step_size\n                                  * this.INCORRECT_MULTIPLIER);\n      }\n    } else {\n      if (correct) {\n        next_adjusted_statistic = Math.min(initial_difference, adjusted_quantity + max_step_size);\n      } else {\n        next_adjusted_statistic = Math.max(this.MIN_CORRELATION, adjusted_quantity - max_step_size\n                                  * this.INCORRECT_MULTIPLIER);\n      }\n    }\n\n    return next_adjusted_statistic;\n  }\n\n  /**\n   * Given a JND trial data, determines whether response is \n   * correct or not.\n   *\n   * @param  data {JsPsych.data}\n   * @return {boolean}          \n   */ \n  check_response(data) {\n\n    // For debugging purposes:\n    if (data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('q')){\n      data.correct = -1;\n      return -1; \n    }\n\n    if ((data.right_correlation > data.left_correlation) \n          && data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('m') ||\n          (data.left_correlation > data.right_correlation)\n          && data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('z')){\n\n      data.correct = true;\n      return true;\n    }\n    // Assuming that if base_correlation = adjusted_correlation, at this point \n    // any user choice is wrong.\n    else {\n      data.correct = false;\n      return false;\n    }\n  }\n\n  /**\n   * When called, will save individual trial data into a CSV.     \n   */\n  export_trial_data() {\n\n    var trial_data = jsPsych.data.get().filter({type: 'jnd', run_type: 'test'})\n                                       .filterCustom(function(x){ //Don't include the exit trials\n                                         return x.correct != -1; \n                                       })\n                                       // JND's trial variables\n                                       .ignore('type')\n                                       .ignore('run_type')\n                                       .ignore('left_correlation')\n                                       .ignore('right_correlation')\n                                       // These are variables forced on by jsPsych\n                                       .ignore('stimulus')\n                                       .ignore('key_press')\n                                       .ignore('choices')\n                                       .ignore('trial_type')\n                                       .ignore('trial_index')\n                                       .ignore('time_elapsed')\n                                       .ignore('internal_node_id');\n\n    // TODO: js converting key_string to use double quotes, needs to be single to pass into ignore() fxn\n    //\n    // for (var key in jnd_exp.trial_variables){\n    //  var key_string = '${key}';\n    //  trial_data.ignore(key);\n    // }\n\n    var string = \"S\" + this.subject_id + \"_\" + this.condition_name + \"_jnd_trial_results.csv\";\n\n    trial_data.localSave('csv', string);\n  }\n\n  /**\n   * When called, will save aggregated trial data into a CSV.     \n   */\n  export_summary_data() {\n    var csv = 'SUBJECT_ID,SUBJECT_INITIALS,PLOT,BASE,ABOVE,JND,TRIALS\\n';\n\n    var data = [];\n    \n    // Organize each row of the csv\n    for (let i = 0; i<this.sub_conditions_constants.length; i++){\n      var row = [this.subject_id, this.subject_initials, this.condition_name];\n      var constants = this.sub_conditions_constants[i];\n      var condition_data = jsPsych.data.get().filter({type: 'jnd', run_type: 'test', balanced_sub_condition: this.sub_condition_order[i]})\n                                             .filterCustom(function(x){ //Don't include the exit trials\n                                                return x.correct != -1; \n                                             })\n\n      row.push(constants.base_correlation);\n      row.push(constants.converge_from_above);\n      row.push(condition_data.select('jnd').mean());\n      row.push(condition_data.count());\n\n      data.push(row);\n    }\n\n    // Append each row\n    data.forEach(function(row){\n      csv += row.join(',');\n      csv += \"\\n\";\n    });\n\n    var hiddenElement = document.createElement('a');\n    hiddenElement.href = 'data:text/csv;charset=utf-8,' + encodeURI(csv);\n    hiddenElement.target = '_blank';\n    hiddenElement.download = \"S\" + this.subject_id + \"_\" + this.condition_name + \"_jnd_summary_results.csv\";\n    hiddenElement.click();\n  }\n}\n\n",
    "static": true,
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/public/scripts/experiments/jnd/jnd.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 219,
    "kind": "class",
    "name": "JND",
    "memberof": "scripts/experiments/jnd/jnd.js",
    "static": true,
    "longname": "scripts/experiments/jnd/jnd.js~JND",
    "access": "public",
    "export": true,
    "importPath": "VCL Framework/scripts/experiments/jnd/jnd.js",
    "importStyle": "JND",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 220,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#constructor",
    "access": "public",
    "description": "Initializes a JND experiment object. ",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "{assoc array}  Parameters passed from routing."
      }
    ]
  },
  {
    "__docId__": 221,
    "kind": "member",
    "name": "condition_name",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#condition_name",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 222,
    "kind": "member",
    "name": "condition_group",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#condition_group",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 223,
    "kind": "member",
    "name": "subject_id",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#subject_id",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 224,
    "kind": "member",
    "name": "subject_initials",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#subject_initials",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 225,
    "kind": "member",
    "name": "trial_structure",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#trial_structure",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 226,
    "kind": "member",
    "name": "graph_type",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#graph_type",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 227,
    "kind": "member",
    "name": "balancing_type",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#balancing_type",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 228,
    "kind": "member",
    "name": "MIN_CORRELATION",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#MIN_CORRELATION",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 229,
    "kind": "member",
    "name": "MAX_CORRELATION",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#MAX_CORRELATION",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 230,
    "kind": "member",
    "name": "MIN_TRIALS",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#MIN_TRIALS",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 231,
    "kind": "member",
    "name": "MAX_TRIALS",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#MAX_TRIALS",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "member",
    "name": "WINDOW_SIZE",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#WINDOW_SIZE",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 233,
    "kind": "member",
    "name": "WINDOW_INTERVAL",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#WINDOW_INTERVAL",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 234,
    "kind": "member",
    "name": "CONVERGENCE_THRESHOLD",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#CONVERGENCE_THRESHOLD",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 235,
    "kind": "member",
    "name": "INCORRECT_MULTIPLIER",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#INCORRECT_MULTIPLIER",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 236,
    "kind": "member",
    "name": "first_trial_of_sub_condition",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#first_trial_of_sub_condition",
    "access": "public",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 237,
    "kind": "member",
    "name": "adjusted_quantity_matrix",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#adjusted_quantity_matrix",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "member",
    "name": "left_coordinates",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#left_coordinates",
    "access": "public",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 239,
    "kind": "member",
    "name": "right_coordinates",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#right_coordinates",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 240,
    "kind": "member",
    "name": "distractor_coordinates",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#distractor_coordinates",
    "access": "public",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 241,
    "kind": "member",
    "name": "trial_data",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#trial_data",
    "access": "public",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 242,
    "kind": "member",
    "name": "raw_constants",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#raw_constants",
    "access": "public",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "prepare_experiment",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#prepare_experiment",
    "access": "public",
    "description": "Orders the input data according to balancing type and\ninitializes the JND object's variables.  ",
    "lineNumber": 111,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "balancing_type",
        "description": "{string}                             Type of balancing. Currently only latin_square\n                                                            is supported.\n        dataset {[{assoc array}, {assoc array}, ... ]}      The data to be ordered."
      }
    ],
    "return": null
  },
  {
    "__docId__": 244,
    "kind": "member",
    "name": "sub_condition_order",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#sub_condition_order",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 245,
    "kind": "member",
    "name": "sub_conditions_constants",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#sub_conditions_constants",
    "access": "public",
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 246,
    "kind": "member",
    "name": "current_sub_condition_index",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#current_sub_condition_index",
    "access": "public",
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "prepare_practice",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#prepare_practice",
    "access": "public",
    "description": "Orders the input dataset by randomizing it, and initializes the practice variables.",
    "lineNumber": 136,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "dataset",
        "description": "{[{assoc array}, {assoc array}, ... ]}   The data to be ordered."
      }
    ],
    "return": null
  },
  {
    "__docId__": 249,
    "kind": "member",
    "name": "practice_conditions_constants",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#practice_conditions_constants",
    "access": "public",
    "description": null,
    "lineNumber": 150,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 250,
    "kind": "member",
    "name": "current_practice_condition_index",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#current_practice_condition_index",
    "access": "public",
    "description": null,
    "lineNumber": 151,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "generate_trial",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#generate_trial",
    "access": "public",
    "description": "Generates a JND trial object for use in the JsPsych timeline.",
    "lineNumber": 160,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "{string}             \"test\" or \"practice\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "trial {object}"
    }
  },
  {
    "__docId__": 252,
    "kind": "method",
    "name": "handle_data_saving",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#handle_data_saving",
    "access": "public",
    "description": "Handles saving the relevant data on a given trial.\n\nFor reference, these are the helper variables created to assist in trial logic (i.e not present in excel)\ntrial_variables =         \n      {type: 'jnd',\n      run_type: '',\n      left_correlation: '',\n      right_correlation: '',\n      };\n\nThese are variables created WITHIN the trial logic that were not present in excel (but need to be\noutputted to results).     \nexport_variables = \n      {sub_condition: '',           // Chronological ordering of sub_condition [1, 2, 3 ... ]\n       balanced_sub_condition: '',  // Index of sub_condition according to balancing order\n       jnd: '',\n       base_correlation: '',\n       adjusted_correlation: '',\n       correct: '',\n      };",
    "lineNumber": 284,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "trial",
        "description": "{object}\n       block_type {string}           \"test\" or \"practice\"\n       constants {assoc array}\n       index {integer}\n       adjusted_correlation {double}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 253,
    "kind": "method",
    "name": "end_sub_condition",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#end_sub_condition",
    "access": "public",
    "description": "Determines whether the current sub condition can end or not.",
    "lineNumber": 311,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if sub condition should end."
    },
    "params": []
  },
  {
    "__docId__": 254,
    "kind": "method",
    "name": "is_converged_in_window",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#is_converged_in_window",
    "access": "public",
    "description": "Determines whether current subcondition has converged or not.",
    "lineNumber": 327,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if converged."
    },
    "params": []
  },
  {
    "__docId__": 255,
    "kind": "method",
    "name": "calculate_adjusted_correlation",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#calculate_adjusted_correlation",
    "access": "public",
    "description": "Calculates the adjusted correlation depending on whether this is the\nfirst trial of the sub condition or not.",
    "lineNumber": 411,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "constants",
        "description": "{assoc array}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "adjusted_correlation {double}"
    }
  },
  {
    "__docId__": 257,
    "kind": "method",
    "name": "initialize_adjusted_statistic",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#initialize_adjusted_statistic",
    "access": "public",
    "description": "Initializes the adjusted correlation for the first time.",
    "lineNumber": 443,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "converge_from_above",
        "description": "{boolean}    \n        base_correlation {double}         \n        initial_difference {double}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "adjusted_correlation {double}"
    }
  },
  {
    "__docId__": 258,
    "kind": "method",
    "name": "get_next_adjusted_statistic",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#get_next_adjusted_statistic",
    "access": "public",
    "description": "Calculates the next adjusted correlation/statistic.",
    "lineNumber": 466,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "correct",
        "description": "{boolean}\n        converge_from_above {boolean}    \n        adjusted_quantity {double}         \n        base_correlation {double}\n        initial_difference {double}\n        max_step_size {double}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "adjusted_correlation {double}"
    }
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "check_response",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#check_response",
    "access": "public",
    "description": "Given a JND trial data, determines whether response is \ncorrect or not.",
    "lineNumber": 497,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "{JsPsych.data}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 260,
    "kind": "method",
    "name": "export_trial_data",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#export_trial_data",
    "access": "public",
    "description": "When called, will save individual trial data into a CSV.     ",
    "lineNumber": 524,
    "params": [],
    "return": null
  },
  {
    "__docId__": 261,
    "kind": "method",
    "name": "export_summary_data",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#export_summary_data",
    "access": "public",
    "description": "When called, will save aggregated trial data into a CSV.     ",
    "lineNumber": 559,
    "params": [],
    "return": null
  },
  {
    "__docId__": 262,
    "kind": "file",
    "name": "scripts/experiments/jnd/jnd_timeline.js",
    "content": "import JND from \"/scripts/experiments/jnd/jnd.js\";\nexport var jnd_exp = new JND(params);\n\nvar timeline = [];\nvar address = location.protocol + \"//\" + location.hostname + \":\" + location.port; \n\n// =========================================================\n// WELCOME TRIAL BLOCK\n\nvar welcome = {\n  type: 'html-keyboard-response',\n  stimulus: `<div align = \"center\">` + `<img src=\"${address}/img/VCL_lab_logo.png\"></img><br><br>` +\n            `<b>Base:</b> JND` + '<br>' + \n            `<b>Trial Type:</b> ${jnd_exp.trial_structure}` + '<br>' + \n            `<b>Graph Type:</b> ${jnd_exp.graph_type}` + '<br>' + \n            `<b>Condition:</b> ${jnd_exp.condition_name}` + \n            '<br><br><br><p><font size = 15>Press any key to begin.<p></font>' +\n            '</div>',\n  data: {type: 'instruction'}\n};\ntimeline.push(welcome);\n\n// =========================================================\n// INSTRUCTION TRIAL BLOCKS\n\nswitch(jnd_exp.graph_type){\n  case \"scatter\":\n\n    if (jnd_exp.condition_name === \"distractor_multi\" || jnd_exp.condition_name === \"distractor_rainbow\") {\n      var instructions = {\n      type: \"html-keyboard-response\",\n      stimulus: \"<div align = 'center'> <p>In this experiment, two graphs will appear side-by-side.\" + \n          \"<br> Indicate which graph is more correlated by pressing the Z or M key. </p><p>\" +\n          \"<div style='height: 290px; width: 700px; display: block;'>\"+\n          `<div style='float: left;'><img src='${address}/img/sample_multi_distractor_1.png'></img>` +\n          \"<p class='small'><strong>Press the Z key</strong></p></div>\" +\n          `<div style='float: right;'><img src='${address}/img/sample_multi_distractor_2.png'></img>` +\n          \"<p class='small'><strong>Press the M key</strong></p></div>\" +\n          \"</div>\" + \"<div> <br><p>Press any key to continue.</p> </div>\" + \n          \"</div>\"          \n      };\n    }\n    else if (jnd_exp.condition_name === \"distractor_ratio_pilot\") {\n      var instructions = {\n      type: \"html-keyboard-response\",\n      stimulus: \"<div align = 'center'> <p>In this experiment, two graphs will appear side-by-side.\" + \n          \"<br> Indicate whether the graph with <font color='BLUE'>blue</font> points is more correlated by pressing the Z or M key. </p><p>\" +\n          \"<div style='height: 290px; width: 700px; display: block;'>\"+\n          `<div style='float: left;'><img src='${address}/img/sample_distractor_ratio_1.png'></img>` +\n          \"<p class='small'><strong>Press the Z key</strong></p></div>\" +\n          `<div style='float: right;'><img src='${address}/img/sample_distractor_ratio_2.png'></img>` +\n          \"<p class='small'><strong>Press the M key</strong></p></div>\" +\n          \"</div>\" + \"<div> <br><p>Press any key to continue.</p> </div>\" + \n          \"</div>\"          \n      };\n    }\n    else if (jnd_exp.condition_group === \"distractor\" && jnd_exp.condition_name.split(\"_\")[2] === \"shades\"){\n      var instructions = {\n      type: \"html-keyboard-response\",\n      stimulus: \"<div align = 'center'> <p>In this experiment, two graphs will appear side-by-side.\" + \n          \"<br> Indicate which graph is more correlated by pressing the Z or M key. </p><p>\" +\n          \"<div style='height: 290px; width: 700px; display: block;'>\"+\n          `<div style='float: left;'><img src='${address}/img/sample_distractor_shades_1.png'></img>` +\n          \"<p class='small'><strong>Press the Z key</strong></p></div>\" +\n          `<div style='float: right;'><img src='${address}/img/sample_distractor_shades_2.png'></img>` +\n          \"<p class='small'><strong>Press the M key</strong></p></div>\" +\n          \"</div>\" + \"<div> <br><p>Press any key to continue.</p> </div>\" + \n          \"</div>\"          \n      };\n    }\n    else if (jnd_exp.condition_group === \"distractor\") {\n\n      let name_split_array = jnd_exp.condition_name.split(\"_\");\n      let target = \"\";\n      let color = \"\";\n      let axis = \"\";\n\n      if (name_split_array.length === 4){\n        target = name_split_array[1];\n        color = name_split_array[2];\n        axis = name_split_array[3];\n      } else {\n        target = name_split_array[1];\n        color = name_split_array[3];\n        axis = name_split_array[4];\n\n      }\n\n      var instructions = {\n      type: \"html-keyboard-response\",\n      stimulus: `<div align = 'center'>In this experiment, two graphs will appear side-by-side. \n                 <br> \n                 Indicate which graph has a higher correlation of the <b>target-colored</b> ${target}s by pressing the Z or M key. \n                 <br>\n                 Ignore any squares with a <b>distractor</b> color.\n                 <br>\n                 <br>\n                 <img src='${address}/img/distractors/target-distractors/${color}_${axis}.png'></img>\n                 <br>\n                <div style='height: 43vh; display: block;'>\n                  <div style='float: left;'>\n                    <img src='${address}/img/distractors/plots/sample_distractor_${color}_1.png'></img>\n                    <p class='small'><strong>Press the Z key</strong></p>\n                  </div>\n                <div style='float: right;'>\n                  <img src='${address}/img/distractors/plots/sample_distractor_${color}_2.png'></img>\n                  <p class='small'><strong>Press the M key</strong></p></div>\n                </div>\n                <div> \n                  <br>\n                  <p>Press any key to continue.</p> \n                </div>\n                `        \n      };\n    } else {\n      var instructions = {\n      type: \"html-keyboard-response\",\n      stimulus: \"<div align = 'center'> <p>In this experiment, two graphs will appear side-by-side.\" + \n          \"<br> Indicate which graph is more correlated by pressing the Z or M key. </p><p>\" +\n          \"<div style='height: 290px; width: 700px; display: block;'>\"+\n          `<div style='float: left;'><img src='${address}/img/sample_scatter_1.png'></img>` +\n          \"<p class='small'><strong>Press the Z key</strong></p></div>\" +\n          `<div style='float: right;'><img src='${address}/img/sample_scatter_2.png'></img>` +\n          \"<p class='small'><strong>Press the M key</strong></p></div>\" +\n          \"</div>\" + \"<div> <br><p>Press any key to continue.</p> </div>\" + \n          \"</div>\"          \n      };\n    }\n    break;\n\n  case \"strip\":\n    if (jnd_exp.condition_name === \"line_length_strip\") {\n      var instructions = {\n      type: \"html-keyboard-response\",\n      stimulus: \"<div align = 'center'> <p>In this experiment, two graphs will appear one on top of the other.\" + \n          \"<br> Indicate which graph is more correlated by pressing the Z or M key. </p><p>\" +\n          \"<strong>Press the Z key if the graph <u>above</u> is more correlated.</strong>\" +\n          `<div style='float: center; display: block;'><img src='${address}/img/sample_line_length_strip.png'></img></div>` +\n          \"<strong>Press the M key if the graph <u>below</u> is more correlated.</strong>\"\n      };\n    } else {\n      var instructions = {\n      type: \"html-keyboard-response\",\n      stimulus: \"<div align = 'center'> <p>In this experiment, two graphs will appear one on top of the other.\" + \n          \"<br> Indicate which graph is more correlated by pressing the Z or M key. </p><p>\" +\n          \"<strong>Press the Z key if the graph <u>above</u> is more correlated.</strong>\" +\n          `<div style='float: center; display: block;'><img src='${address}/img/sample_jnd_strip.png'></img></div>` +\n          \"<strong>Press the M key if the graph <u>below</u> is more correlated.</strong>\"\n      };\n    }\n    break;\n\n  case \"ring\":\n    var instructions = {\n    type: \"html-keyboard-response\",\n    stimulus: \"<div align = 'center'> <p>In this experiment, two graphs will appear one on top of the other.\" + \n        \"<br> Indicate which graph is more correlated by pressing the Z or M key. </p><p>\" +\n        \"<strong>Press the Z key if the graph <u>above</u> is more correlated.</strong>\" +\n        `<div style='float: center; display: block;'><img src='${address}/img/sample_jnd_ring.png'></img></div>` +\n        \"<strong>Press the M key if the graph <u>below</u> is more correlated.</strong>\"\n    };\n    break;  \n}\n\nvar ready = {\n  type: 'html-keyboard-response',\n  stimulus: \"<div align = 'center'> <font size = 20><p>Ready? We will first do some practice trials. <p>\" + \"<br><br><p><b>Press any key to begin.</b></p></font></div>\",\n  data: {type: 'instruction'}\n}\n\nvar instruction_trials = {\n  timeline: [instructions, ready]\n};\n\ntimeline.push(instruction_trials);\n\n// =========================================================\n// PRACTICE TRIAL BLOCKS\n\n// ---------------------------------------------------------\n// FEEDBACK\n\nvar feedback = {\n  type: 'html-keyboard-response',\n  // choices: jsPsych.NO_KEYS, //No responses will be accepted as a valid response.\n  // trial_duration: 500,\n  data: {type: 'feedback'},\n  stimulus: function(){\n\n    document.body.style.backgroundColor = jnd_exp.trial_data.feedback_background_color;\n\n    var last_trial = JSON.parse(jsPsych.data.getLastTrialData().json());\n    var last_trial_correct = last_trial[0][\"correct\"];\n\n    // For debugging purposes:\n    if (last_trial_correct == -1){\n      return '<p>' + \n             '<font style=\"font-size:50px; color:blue\">Exiting from experiment.<p></font>'\n    }\n\n    else if (last_trial_correct){\n      return '<p><i class=\"fa fa-check-circle\" style=\"font-size:50px; color:green; margin-right: 10px;\"></i>' + \n             '<font style=\"font-size:50px; color:green\">Correct!<p></font>'\n    }\n    else{\n      return '<p><i class=\"fa fa-close\" style=\"font-size:50px; color:red; margin-right: 10px;\"></i>' + \n             '<font style=\"font-size:50px; color:red;\"\">Incorrect!<p></font>'\n    }\n  }\n};\n\n// ---------------------------------------------------------\n// PRACTICE TIMELINE\n\nvar practice_jnd = jnd_exp.generate_trial(\"practice\");\n\nvar practice = {\n  timeline: [practice_jnd, feedback], // We use same feedback block as that used in practice \n  loop_function: function(data){ // Return true if timeline should continue\n                                 // Return false if timeline should end\n\n    // Flag is always true for each trial since we display one trial for \n    // each condition on the practice                              \n    jnd_exp.first_trial_of_sub_condition = true;\n\n    // For debugging, if you want to exit out of experiment, press q:\n    if (jsPsych.pluginAPI.convertKeyCharacterToKeyCode('q') == data.values()[0].key_press){\n      // Turn flag on \n      jnd_exp.first_trial_of_sub_condition = true;\n      return false;\n    }\n\n    // If there are still more practice conditions, increment current index\n    if (jnd_exp.current_practice_condition_index < (jnd_exp.practice_conditions_constants.length-1)){\n      jnd_exp.current_practice_condition_index++; \n      console.log(\"!!!!!!!!!! Moved to new practice condition at index \" \n                  + jnd_exp.current_practice_condition_index);\n      return true; \n    }\n    // Else end experiment\n    else{\n      // Turn flag on \n      jnd_exp.first_trial_of_sub_condition = true;\n      return false;\n    }\n  }\n};\n\ntimeline.push(practice);\n\n// ---------------------------------------------------------\n// STOP BLOCK\n\nvar stop = {\n  type: 'html-keyboard-response',\n  stimulus: \"<div align = 'center'> <font size = 20><p>This concludes the practice trials.<p>\" + \"<br><br><p><b>Any questions?</b></p></font></div>\",\n  data: {type: 'instruction'},\n  on_start: function(stop){\n    // Reset background color to feedback\n    document.body.style.backgroundColor = jnd_exp.trial_data.feedback_background_color;\n  }\n}\n\nvar ready_experiment = {\n  type: 'html-keyboard-response',\n  stimulus: \"<div align = 'center'> <font size = 20><p>Ready?<p>\" + \"<br><br><p><b>Press any key to begin.</b></p></font></div>\",\n  data: {type: 'instruction'}\n}\n\nvar stop_trials = {\n  timeline: [stop, ready_experiment]\n};\n\ntimeline.push(stop_trials);\n\n// =========================================================\n// EXPERIMENT TRIAL BLOCKS\n\nvar trial = jnd_exp.generate_trial(\"test\");\n\nvar experiment = {\n  timeline: [trial, feedback], // We use same feedback block as that used in practice \n  loop_function: function(data){ // Return true if timeline should continue\n                                 // Return false if timeline should end\n\n    // For debugging, if you want to exit out of experiment, press q:\n    if (jsPsych.pluginAPI.convertKeyCharacterToKeyCode('q') == data.values()[0].key_press){\n      return false;\n    }\n\n    // If subcondition should end:\n    if(jnd_exp.end_sub_condition()){\n      jnd_exp.first_trial_of_sub_condition = true;\n      // If there are still more subconditions, increment current index\n      if (jnd_exp.current_sub_condition_index < (jnd_exp.sub_conditions_constants.length-1)){\n        jnd_exp.current_sub_condition_index++; \n        console.log(\"!!!!!!!!!! Moved to new sub condition at index \" \n                    + jnd_exp.current_sub_condition_index);\n        return true; \n      }\n      // Else end experiment\n      else{\n        return false;\n      }\n    } \n    // Else continue w/ current subcondition:\n    else {\n      return true;\n    }\n  },\n  on_finish: function(data){\n    jnd_exp.trial_data = data; \n  }\n};\n\ntimeline.push(experiment);\n\nconsole.log(\"======================\");\n\n// =========================================================\n// DATA DOWNLOADING \n\nvar experiment_end = {\n  type: 'html-keyboard-response',\n  stimulus: '<div align = \"center\">' + \n            '<p><font size = 10>You have completed the experiment!<p></font>' +\n            '<br>' +\n            'Trial and summary data files will now automatically download locally.' + \n            '</div>' ,\n  on_start: function(){\n\n    jnd_exp.export_trial_data();\n    jnd_exp.export_summary_data();\n    \n    // Reset background color to feedback\n    document.body.style.backgroundColor = jnd_exp.trial_data.feedback_background_color;\n  }\n};\ntimeline.push(experiment_end);\n\n// =========================================================\n// START JSPSYCH\n\njsPsych.init({\n    timeline: timeline,\n    on_finish: function(){ \n        jsPsych.data.displayData();\n    }\n});",
    "static": true,
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/public/scripts/experiments/jnd/jnd_timeline.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 263,
    "kind": "variable",
    "name": "jnd_exp",
    "memberof": "scripts/experiments/jnd/jnd_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd/jnd_timeline.js~jnd_exp",
    "access": "public",
    "export": true,
    "importPath": "VCL Framework/scripts/experiments/jnd/jnd_timeline.js",
    "importStyle": "{jnd_exp}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "scripts/experiments/jnd/jnd.js~JND"
      ]
    }
  },
  {
    "__docId__": 264,
    "kind": "variable",
    "name": "timeline",
    "memberof": "scripts/experiments/jnd/jnd_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd/jnd_timeline.js~timeline",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/jnd/jnd_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 265,
    "kind": "variable",
    "name": "address",
    "memberof": "scripts/experiments/jnd/jnd_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd/jnd_timeline.js~address",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/jnd/jnd_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 266,
    "kind": "variable",
    "name": "welcome",
    "memberof": "scripts/experiments/jnd/jnd_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd/jnd_timeline.js~welcome",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/jnd/jnd_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"data\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 267,
    "kind": "variable",
    "name": "ready",
    "memberof": "scripts/experiments/jnd/jnd_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd/jnd_timeline.js~ready",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/jnd/jnd_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 165,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"data\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 268,
    "kind": "variable",
    "name": "instruction_trials",
    "memberof": "scripts/experiments/jnd/jnd_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd/jnd_timeline.js~instruction_trials",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/jnd/jnd_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 171,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 269,
    "kind": "variable",
    "name": "feedback",
    "memberof": "scripts/experiments/jnd/jnd_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd/jnd_timeline.js~feedback",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/jnd/jnd_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 183,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"data\": *, \"stimulus\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 270,
    "kind": "variable",
    "name": "practice_jnd",
    "memberof": "scripts/experiments/jnd/jnd_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd/jnd_timeline.js~practice_jnd",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/jnd/jnd_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 215,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 271,
    "kind": "variable",
    "name": "practice",
    "memberof": "scripts/experiments/jnd/jnd_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd/jnd_timeline.js~practice",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/jnd/jnd_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 217,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *, \"loop_function\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 272,
    "kind": "variable",
    "name": "stop",
    "memberof": "scripts/experiments/jnd/jnd_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd/jnd_timeline.js~stop",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/jnd/jnd_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 254,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"data\": *, \"on_start\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 273,
    "kind": "variable",
    "name": "ready_experiment",
    "memberof": "scripts/experiments/jnd/jnd_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd/jnd_timeline.js~ready_experiment",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/jnd/jnd_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 264,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"data\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 274,
    "kind": "variable",
    "name": "stop_trials",
    "memberof": "scripts/experiments/jnd/jnd_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd/jnd_timeline.js~stop_trials",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/jnd/jnd_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 270,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 275,
    "kind": "variable",
    "name": "trial",
    "memberof": "scripts/experiments/jnd/jnd_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd/jnd_timeline.js~trial",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/jnd/jnd_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 279,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 276,
    "kind": "variable",
    "name": "experiment",
    "memberof": "scripts/experiments/jnd/jnd_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd/jnd_timeline.js~experiment",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/jnd/jnd_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 281,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *, \"loop_function\": *, \"on_finish\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 277,
    "kind": "variable",
    "name": "experiment_end",
    "memberof": "scripts/experiments/jnd/jnd_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd/jnd_timeline.js~experiment_end",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/jnd/jnd_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 323,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"on_start\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 278,
    "kind": "file",
    "name": "scripts/experiments/jnd_radius/jnd_radius.js",
    "content": "// import {generateDistribution} from \"/scripts/generators/gaussian_distribution_generator.js\";\nimport {balance_subconditions} from \"/scripts/experiment-properties/balancing/balancing_controller.js\";\nimport {get_data, \n        get_data_subset} from \"/scripts/experiment-properties/data/data_controller.js\";\nimport {randomize_position,\n        randomize_radius_position,\n        force_greater_right_position} from \"/scripts/helpers/experiment_helpers.js\";\n\nexport default class JND_Radius {\n\n  /**\n   * Initializes a JND_Radius experiment object. \n   *\n   * @param  params {assoc array}  Parameters passed from routing.\n   */\n  constructor(params) {\n\n    let trial_structure = params[\"trial_structure\"];\n    let condition_name = params[\"condition\"];\n    let graph_type = params[\"graph_type\"];\n    let balancing_type = params[\"balancing\"];\n    let conversion_factor = params[\"conversion_factor\"]\n\n    this.condition_name = condition_name; \n    this.subject_id = params[\"subject_id\"];\n    this.subject_initials = params[\"subject_initials\"];\n\n    // ========================================\n    // PARAMETER CHECKING\n\n    // **NOTE: EXPERIMENTS variable comes from /public/config/experiments-config.js\n    if (!EXPERIMENTS[\"jnd_radius\"][\"trial_structure\"].includes(trial_structure)) {\n      throw Error(trial_structure + \" is not supported.\");}\n    else {\n      this.trial_structure = trial_structure;\n    }\n\n    if (!EXPERIMENTS[\"jnd_radius\"][\"graph_type\"].includes(graph_type)){\n      throw Error(graph_type + \" is not supported.\")} \n    else { \n      this.graph_type = graph_type;\n    };  \n\n    if (!EXPERIMENTS[\"jnd_radius\"][\"balancing_type\"].includes(balancing_type)) {\n      throw Error(balancing_type + \" is not supported.\") }\n    else {\n      this.balancing_type = balancing_type;\n    }  \n\n    // ========================================\n    // EXPERIMENT CONSTANTS\n\n    this.PIXELS_PER_CM = conversion_factor;\n    this.MIN_RADIUS = 2;\n    this.MAX_RADIUS = 6;\n    this.MIN_TRIALS = 24;\n    this.MAX_TRIALS = 52;\n    this.WINDOW_SIZE = 24;\n    this.WINDOW_INTERVAL = 3;\n    this.CONVERGENCE_THRESHOLD = 0.75; \n    this.INCORRECT_MULTIPLIER = 3;\n\n    // ========================================\n    // PRACTICE EXPERIMENT VARIABLES\n\n    this.practice_conditions_constants;\n    this.current_practice_condition_index; \n\n    // ========================================\n    // TEST EXPERIMENT VARIABLES\n\n    this.first_trial_of_sub_condition = true;\n    this.sub_condition_order;\n    this.sub_conditions_constants;\n    this.current_sub_condition_index;\n    this.adjusted_quantity_matrix = {};   // The matrix is in this format:\n                                          // { sub_condition_index : [adjusted_quantity1, adjusted_quantity2 ... ] }\n\n    // ========================================\n    // CURRENT TRIAL DATA\n\n    // Plotting-related vars\n    this.left_radius = \"\";\n    this.right_radius = \"\";\n\n    // JsPsych trial_data for the current trial\n    this.trial_data = \"\";\n\n    // ========================================\n    // PREPARE EXPERIMENT\n\n    // Extract raw constants\n    this.raw_constants = get_data(this);\n\n    // Prepare experiment\n    this.prepare_experiment();\n  }\n\n  /**\n   * Orders the input data according to balancing type and\n   * initializes the JND object's variables.  \n   *\n   * @param  balancing_type {string}                             Type of balancing. Currently only latin_square\n   *                                                             is supported.\n   *         data_set {[{assoc array}, {assoc array}, ... ]}     The data to be ordered. \n   *         practice_set {[{assoc array}, {assoc array}, ... ]} The practice data. \n   */ \n  prepare_experiment() {\n\n    let dataset = this.raw_constants;\n\n    this.sub_condition_order = balance_subconditions(this.balancing_type, this.constructor.name.toLowerCase(), dataset.length);\n\n    var ordered_data_set = [];\n\n    // Order the data set according to the latin square\n    // Initialize adjusted_quantity_matrix size \n    for (let i=0; i < this.sub_condition_order.length; i++){\n      ordered_data_set[i] = dataset[this.sub_condition_order[i]];\n      this.adjusted_quantity_matrix[i] = [];\n    }\n\n    // Set experiment trials \n    this.sub_conditions_constants = ordered_data_set;\n    this.current_sub_condition_index = 0; \n\n  }\n\n  /**\n   * Generates a JND trial object for use in the JsPsych timeline.\n   *\n   * @param  type {string}             \"test\" or \"practice\"\n   * @return trial {object}\n   */ \n  generate_trial(block_type) {\n\n    if ((block_type !== \"test\") && (block_type !== \"practice\")) {throw Error(block_type + \" is not supported.\")};\n\n    // Initialize a variable for this so it is usable inside on_start\n    var jnd_radius_exp = this; \n    var address = location.protocol + \"//\" + location.hostname + \":\" + location.port + \"/jnd_radius_trial\"; \n\n    var trial = {\n      type:'external-html-keyboard-response',\n      url: address,\n      choices:['z', 'm', 'q'], //q is exit button (for debugging)\n      execute_script: true,\n      response_ends_trial: true,\n      on_start: function(trial){ // NOTE: on_start takes in trial var \n\n        // Set the constants to be used:\n        if (block_type == \"test\"){ \n          var index = jnd_radius_exp.current_sub_condition_index; \n          var constants = jnd_radius_exp.sub_conditions_constants[index];\n        }\n        else { \n          var index = jnd_radius_exp.current_practice_condition_index; \n          var constants = jnd_radius_exp.practice_conditions_constants[index];\n        }\n\n        // Calculate adjusted radius\n        var adjusted_radius = jnd_radius_exp.calculate_adjusted_radius(constants);\n\n        // Handling saving this trial's data: \n        jnd_radius_exp.handle_data_saving(trial, block_type, constants, index, adjusted_radius);\n\n        // Randomize position of the base and adjusted graphs\n        var result = randomize_radius_position(trial, constants.base_radius, adjusted_radius);\n\n        // Randomize position of the shapes\n        let random = Math.floor(Math.random() * Math.floor(2));\n        let shape1 = constants.shapes[0];\n        let shape2 = constants.shapes[1];\n\n        trial.data.shapes = random <= 0.5 ? [shape1, shape2] : [shape2, shape1];\n\n        // // For testing purposes, can force R graph to have greater correlation\n        // var result = force_greater_right_position(trial,\n        //                                           base_coordinates,\n        //                                           adjusted_coordinates,\n        //                                           constants.base_correlation,\n        //                                           adjusted_correlation);\n\n        jnd_radius_exp.left_radius = result.left;\n        jnd_radius_exp.right_radius = result.right;\n        jnd_radius_exp.trial_data = trial.data; \n\n        let left_radius_conv = result.left * jnd_radius_exp.PIXELS_PER_CM;\n        let right_radius_conv = result.right * jnd_radius_exp.PIXELS_PER_CM;\n        jnd_radius_exp.radii = [left_radius_conv, right_radius_conv];\n\n        console.log(\"[RIGHT] Radius: \" + trial.data.right_radius);\n        console.log(\"[LEFT] Radius: \" + trial.data.left_radius);\n        \n      },\n      on_finish: function(data){ // NOTE: on_finish takes in data var \n        jnd_radius_exp.check_response(data);\n        console.log(\"RESPONSE: \" + data.correct);\n      } \n    };\n\n    return trial; \n  }\n\n  /**\n   * Handles saving the relevant data on a given trial.\n   *\n   * For reference, these are the helper variables created to assist in trial logic (i.e not present in excel)\n   * trial_variables =         \n   *       {type: 'jnd',\n   *       run_type: '',\n   *       left_radius: '',\n   *       right_radius: '',\n   *       };\n   *\n   * These are variables created WITHIN the trial logic that were not present in excel (but need to be\n   * outputted to results).     \n   * export_variables = \n   *       {sub_condition: '',           // Chronological ordering of sub_condition [1, 2, 3 ... ]\n   *        balanced_sub_condition: '',  // Index of sub_condition according to balancing order\n   *        jnd: '',\n   *        base_radius: '',\n   *        adjusted_radius: '',\n   *        correct: '',\n   *       };\n   *\n   * @param trial {object}\n   *        block_type {string}           \"test\" or \"practice\"\n   *        constants {assoc array}\n   *        index {integer}\n   *        adjusted_correlation {double}\n   */\n  handle_data_saving(trial, block_type, constants, index, adjusted_radius) {\n\n    // Add all constants from excel\n    trial.data = constants;\n\n    // Adding constants that required computation (not from excel)\n    trial.data.type = \"jnd\";\n    trial.data.adjusted_radius = adjusted_radius;\n    trial.data.jnd = Math.abs(adjusted_radius - constants.base_radius);\n    trial.data.sub_condition = index; \n    trial.data.balanced_sub_condition = this.sub_condition_order[index];\n\n    // Block specific saves \n    if (block_type == \"test\"){\n      this.adjusted_quantity_matrix[index].push(adjusted_radius);\n      trial.data.run_type = \"test\";\n    }\n    else{\n      trial.data.run_type = \"practice\";\n    }\n  }\n\n  /**\n   * Determines whether the current sub condition can end or not.\n   * \n   * @return {boolean}            True if sub condition should end.\n   */\n  end_sub_condition() {\n\n    if (this.adjusted_quantity_matrix[this.current_sub_condition_index].length == this.MAX_TRIALS ||\n          this.is_converged_in_window()){\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n\n  /**\n   * Determines whether current subcondition has converged or not.\n   *\n   * @return {boolean}            True if converged.\n   */\n  is_converged_in_window() {\n    \n    var converged = false;\n    var num_completed_trials = this.adjusted_quantity_matrix[this.current_sub_condition_index].length;\n\n    // Check if we have completed the minimum number of trials\n    // and if the number of completed trials is greater than the window size\n    if (num_completed_trials >= this.MIN_TRIALS && num_completed_trials >= this.WINDOW_SIZE) {\n\n      // 2D Matrix of windows of adjusted quantities\n      var adjusted_quantity_windows = [];\n\n      // The index of the last trial\n      var last_trial = num_completed_trials - 1;\n\n      // Compute the interval size and remainder\n      // The remainder is computed in case the window size isn't divisible by the # intervals\n      var interval_size = this.WINDOW_SIZE / this.WINDOW_INTERVAL;\n      var interval_remainder = this.WINDOW_SIZE % this.WINDOW_INTERVAL;\n\n      // This is the first trial in the window\n      // For example:\n      // numCompletedTrials = 5\n      // windowSize = 3\n      // [ 0 1 2 3 4 5 6 7 8 9 ]\n      // windowStart would be at index: 5 - 3 = 2\n      var window_start = num_completed_trials - this.WINDOW_SIZE;\n      console.log(\"num completed: \" + num_completed_trials);\n      console.log(\"window start: \" + window_start);\n\n      // Iterate over all of the trials from the start of the window to the last trial\n      // and organize them into the 2D adjustedQuantityWindows matrix\n      while (window_start < last_trial) {\n\n        // While we have extra elements that don't fit into an interval\n        // add one extra to each window interval\n        var current_interval_size = interval_remainder > 0 ? interval_size + 1 : interval_size;\n        if (interval_remainder > 0) {\n          interval_remainder--;\n        }\n\n        // Collect the adjusted quantity values from the trials into the double[]\n        var adjusted_quantities = [];\n        for (let i = 0; i < current_interval_size; ++i) {\n          var adjusted_quantity = this.adjusted_quantity_matrix[this.current_sub_condition_index][i + window_start];\n          adjusted_quantities.push(adjusted_quantity);\n        }\n\n        // Set the window start to the next interval\n        window_start += current_interval_size;\n        adjusted_quantity_windows.push(adjusted_quantities);\n      }\n\n      console.log(adjusted_quantity_windows);\n\n      var variance = [];\n      var mean = [];\n      for (let i = 0; i < adjusted_quantity_windows.length; i++){\n        variance.push(math.var(adjusted_quantity_windows[i]));\n        mean.push(math.mean(adjusted_quantity_windows[i]));\n      }\n\n      var mean_of_variances = math.mean(variance);\n      var variance_of_means = math.var(mean);\n      var F = variance_of_means/mean_of_variances;\n      console.log(\"F: \" + F);\n      // Convergence if the F value is < 1 - convergenceThreshold\n      // if the F is greater than 0.25, then converge \n      converged = F < (1 - this.CONVERGENCE_THRESHOLD);\n    }\n\n    if (converged) {console.log(\"CONVERGED!!!!\")};\n\n    return converged;\n\n  }\n\n  /**\n   * Calculates the adjusted radius depending on whether this is the\n   * first trial of the sub condition or not.\n   *\n   * @param  constants {assoc array}\n   * @return adjusted_radius {double}          \n   */\n  calculate_adjusted_radius(constants) {\n\n    // For the first trial, we need to initialize the adjusted correlation:\n    if (this.first_trial_of_sub_condition){\n      var adjusted_radius = this\n                                .initialize_adjusted_statistic(constants.converge_from_above,\n                                                               constants.base_radius,\n                                                               constants.initial_difference);\n      // Set flag to false\n      this.first_trial_of_sub_condition = false;\n    }\n    else{\n      var last_JND_trial = jsPsych.data.get().filter({type: \"jnd\"}).last(1).values()[0];\n\n      var adjusted_radius = this\n                                 .get_next_adjusted_statistic(last_JND_trial.correct,\n                                                              constants.converge_from_above,\n                                                              last_JND_trial.adjusted_radius,\n                                                              constants.base_radius);\n    }\n    return adjusted_radius; \n  }\n\n  /**\n   * Initializes the adjusted radius for the first time.\n   *\n   * @param  converge_from_above {boolean}    \n   *         base_radius {double}         \n   *         initial_difference {double}\n   * @return adjusted_radius {double}          \n   */\n  initialize_adjusted_statistic(converge_from_above, base_radius, initial_difference) {\n    var adjusted_radius;\n\n    if (converge_from_above) {\n      adjusted_radius = base_radius + initial_difference;\n    } else {\n      adjusted_radius = base_radius - initial_difference;\n    }\n\n    return adjusted_radius; \n  }\n\n  /**\n   * Calculates the next adjusted correlation/statistic.\n   *\n   * @param  correct {boolean}\n   *         converge_from_above {boolean}    \n   *         adjusted_quantity {double}         \n   *         base_correlation {double}\n   *         initial_difference {double}\n   *\n   * @return adjusted_correlation {double}          \n   */\n  get_next_adjusted_statistic(correct, converge_from_above, adjusted_quantity, base_radius) {\n    const CORRECT_STEP_SIZE = 0.002;\n    const INCORRECT_STEP_SIZE = 0.006;\n\n    var next_adjusted_statistic;\n\n    var initial_difference = base_radius;\n\n    if (converge_from_above) {\n      if (correct) {\n        next_adjusted_statistic = adjusted_quantity - CORRECT_STEP_SIZE;\n      } else {\n        next_adjusted_statistic = adjusted_quantity + INCORRECT_STEP_SIZE;\n      }\n    } else {\n      if (correct) {\n        next_adjusted_statistic = adjusted_quantity + CORRECT_STEP_SIZE;\n      } else {\n        next_adjusted_statistic = adjusted_quantity - INCORRECT_STEP_SIZE;\n      }\n    }\n\n    return next_adjusted_statistic;\n  }\n\n  /**\n   * Given a JND trial data, determines whether response is \n   * correct or not.\n   *\n   * @param  data {JsPsych.data}\n   * @return {boolean}          \n   */ \n  check_response(data) {\n\n    // For debugging purposes:\n    if (data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('q')){\n      data.correct = -1;\n      return -1; \n    }\n\n    let right_area = 0.25*Math.PI*(this.right_radius * this.right_radius);\n    let left_area = 0.25*Math.PI*(this.left_radius * this.left_radius);\n\n    if ((right_area > left_area) \n          && data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('m') ||\n          (left_area > right_area)\n          && data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('z')){\n\n      data.correct = true;\n      return true;\n    }\n    // Assuming that if base_correlation = adjusted_correlation, at this point \n    // any user choice is wrong.\n    else {\n      data.correct = false;\n      return false;\n    }\n  }\n\n  /**\n   * When called, will save individual trial data into a CSV.     \n   */\n  export_trial_data() {\n\n    var trial_data = jsPsych.data.get().filter({type: 'jnd', run_type: 'test'})\n                                       .filterCustom(function(x){ //Don't include the exit trials\n                                         return x.correct != -1; \n                                       })\n                                       // JND's trial variables\n                                       .ignore('type')\n                                       .ignore('run_type')\n                                       .ignore('left_radius')\n                                       .ignore('right_radius')\n                                       // These are variables forced on by jsPsych\n                                       .ignore('stimulus')\n                                       .ignore('key_press')\n                                       .ignore('choices')\n                                       .ignore('trial_type')\n                                       .ignore('trial_index')\n                                       .ignore('time_elapsed')\n                                       .ignore('internal_node_id');\n\n    // TODO: js converting key_string to use double quotes, needs to be single to pass into ignore() fxn\n    //\n    // for (var key in jnd_exp.trial_variables){\n    //  var key_string = '${key}';\n    //  trial_data.ignore(key);\n    // }\n\n    var string = \"S\" + this.subject_id + \"_\" + this.condition_name + \"_jnd_slice_trial_results.csv\";\n\n    trial_data.localSave('csv', string);\n  }\n\n  /**\n   * When called, will save aggregated trial data into a CSV.     \n   */\n  export_summary_data() {\n    var csv = 'SUBJECT_ID,SUBJECT_INITIALS,PLOT,BASE,ABOVE,JND,TRIALS\\n';\n\n    var data = [];\n    \n    // Organize each row of the csv\n    for (let i = 0; i<this.sub_conditions_constants.length; i++){\n      var row = [this.subject_id, this.subject_initials, this.condition_name];\n      var constants = this.sub_conditions_constants[i];\n      var condition_data = jsPsych.data.get().filter({type: 'jnd', run_type: 'test', balanced_sub_condition: this.sub_condition_order[i]})\n                                             .filterCustom(function(x){ //Don't include the exit trials\n                                                return x.correct != -1; \n                                             })\n\n      row.push(constants.base_radius);\n      row.push(constants.converge_from_above);\n      row.push(condition_data.select('jnd').mean());\n      row.push(condition_data.count());\n\n      data.push(row);\n    }\n\n    // Append each row\n    data.forEach(function(row){\n      csv += row.join(',');\n      csv += \"\\n\";\n    });\n\n    var hiddenElement = document.createElement('a');\n    hiddenElement.href = 'data:text/csv;charset=utf-8,' + encodeURI(csv);\n    hiddenElement.target = '_blank';\n    hiddenElement.download = \"S\" + this.subject_id + \"_\" + this.condition_name + \"_jnd_slice_summary_results.csv\";\n    hiddenElement.click();\n  }\n}\n",
    "static": true,
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/public/scripts/experiments/jnd_radius/jnd_radius.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 279,
    "kind": "class",
    "name": "JND_Radius",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js",
    "static": true,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "access": "public",
    "export": true,
    "importPath": "VCL Framework/scripts/experiments/jnd_radius/jnd_radius.js",
    "importStyle": "JND_Radius",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 280,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#constructor",
    "access": "public",
    "description": "Initializes a JND_Radius experiment object. ",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "{assoc array}  Parameters passed from routing."
      }
    ]
  },
  {
    "__docId__": 281,
    "kind": "member",
    "name": "condition_name",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#condition_name",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 282,
    "kind": "member",
    "name": "subject_id",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#subject_id",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 283,
    "kind": "member",
    "name": "subject_initials",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#subject_initials",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 284,
    "kind": "member",
    "name": "trial_structure",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#trial_structure",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "member",
    "name": "graph_type",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#graph_type",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 286,
    "kind": "member",
    "name": "balancing_type",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#balancing_type",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 287,
    "kind": "member",
    "name": "PIXELS_PER_CM",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#PIXELS_PER_CM",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 288,
    "kind": "member",
    "name": "MIN_RADIUS",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#MIN_RADIUS",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 289,
    "kind": "member",
    "name": "MAX_RADIUS",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#MAX_RADIUS",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 290,
    "kind": "member",
    "name": "MIN_TRIALS",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#MIN_TRIALS",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 291,
    "kind": "member",
    "name": "MAX_TRIALS",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#MAX_TRIALS",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 292,
    "kind": "member",
    "name": "WINDOW_SIZE",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#WINDOW_SIZE",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 293,
    "kind": "member",
    "name": "WINDOW_INTERVAL",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#WINDOW_INTERVAL",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 294,
    "kind": "member",
    "name": "CONVERGENCE_THRESHOLD",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#CONVERGENCE_THRESHOLD",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 295,
    "kind": "member",
    "name": "INCORRECT_MULTIPLIER",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#INCORRECT_MULTIPLIER",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 296,
    "kind": "member",
    "name": "first_trial_of_sub_condition",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#first_trial_of_sub_condition",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 297,
    "kind": "member",
    "name": "adjusted_quantity_matrix",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#adjusted_quantity_matrix",
    "access": "public",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 298,
    "kind": "member",
    "name": "left_radius",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#left_radius",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 299,
    "kind": "member",
    "name": "right_radius",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#right_radius",
    "access": "public",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 300,
    "kind": "member",
    "name": "trial_data",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#trial_data",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 301,
    "kind": "member",
    "name": "raw_constants",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#raw_constants",
    "access": "public",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 302,
    "kind": "method",
    "name": "prepare_experiment",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#prepare_experiment",
    "access": "public",
    "description": "Orders the input data according to balancing type and\ninitializes the JND object's variables.  ",
    "lineNumber": 108,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "balancing_type",
        "description": "{string}                             Type of balancing. Currently only latin_square\n                                                            is supported.\n        data_set {[{assoc array}, {assoc array}, ... ]}     The data to be ordered. \n        practice_set {[{assoc array}, {assoc array}, ... ]} The practice data."
      }
    ],
    "return": null
  },
  {
    "__docId__": 303,
    "kind": "member",
    "name": "sub_condition_order",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#sub_condition_order",
    "access": "public",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 304,
    "kind": "member",
    "name": "sub_conditions_constants",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#sub_conditions_constants",
    "access": "public",
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 305,
    "kind": "member",
    "name": "current_sub_condition_index",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#current_sub_condition_index",
    "access": "public",
    "description": null,
    "lineNumber": 125,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 306,
    "kind": "method",
    "name": "generate_trial",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#generate_trial",
    "access": "public",
    "description": "Generates a JND trial object for use in the JsPsych timeline.",
    "lineNumber": 135,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "{string}             \"test\" or \"practice\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "trial {object}"
    }
  },
  {
    "__docId__": 307,
    "kind": "method",
    "name": "handle_data_saving",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#handle_data_saving",
    "access": "public",
    "description": "Handles saving the relevant data on a given trial.\n\nFor reference, these are the helper variables created to assist in trial logic (i.e not present in excel)\ntrial_variables =         \n      {type: 'jnd',\n      run_type: '',\n      left_radius: '',\n      right_radius: '',\n      };\n\nThese are variables created WITHIN the trial logic that were not present in excel (but need to be\noutputted to results).     \nexport_variables = \n      {sub_condition: '',           // Chronological ordering of sub_condition [1, 2, 3 ... ]\n       balanced_sub_condition: '',  // Index of sub_condition according to balancing order\n       jnd: '',\n       base_radius: '',\n       adjusted_radius: '',\n       correct: '',\n      };",
    "lineNumber": 233,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "trial",
        "description": "{object}\n       block_type {string}           \"test\" or \"practice\"\n       constants {assoc array}\n       index {integer}\n       adjusted_correlation {double}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 308,
    "kind": "method",
    "name": "end_sub_condition",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#end_sub_condition",
    "access": "public",
    "description": "Determines whether the current sub condition can end or not.",
    "lineNumber": 260,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if sub condition should end."
    },
    "params": []
  },
  {
    "__docId__": 309,
    "kind": "method",
    "name": "is_converged_in_window",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#is_converged_in_window",
    "access": "public",
    "description": "Determines whether current subcondition has converged or not.",
    "lineNumber": 276,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if converged."
    },
    "params": []
  },
  {
    "__docId__": 310,
    "kind": "method",
    "name": "calculate_adjusted_radius",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#calculate_adjusted_radius",
    "access": "public",
    "description": "Calculates the adjusted radius depending on whether this is the\nfirst trial of the sub condition or not.",
    "lineNumber": 360,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "constants",
        "description": "{assoc array}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "adjusted_radius {double}"
    }
  },
  {
    "__docId__": 312,
    "kind": "method",
    "name": "initialize_adjusted_statistic",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#initialize_adjusted_statistic",
    "access": "public",
    "description": "Initializes the adjusted radius for the first time.",
    "lineNumber": 391,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "converge_from_above",
        "description": "{boolean}    \n        base_radius {double}         \n        initial_difference {double}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "adjusted_radius {double}"
    }
  },
  {
    "__docId__": 313,
    "kind": "method",
    "name": "get_next_adjusted_statistic",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#get_next_adjusted_statistic",
    "access": "public",
    "description": "Calculates the next adjusted correlation/statistic.",
    "lineNumber": 414,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "correct",
        "description": "{boolean}\n        converge_from_above {boolean}    \n        adjusted_quantity {double}         \n        base_correlation {double}\n        initial_difference {double}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "adjusted_correlation {double}"
    }
  },
  {
    "__docId__": 314,
    "kind": "method",
    "name": "check_response",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#check_response",
    "access": "public",
    "description": "Given a JND trial data, determines whether response is \ncorrect or not.",
    "lineNumber": 446,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "{JsPsych.data}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 315,
    "kind": "method",
    "name": "export_trial_data",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#export_trial_data",
    "access": "public",
    "description": "When called, will save individual trial data into a CSV.     ",
    "lineNumber": 476,
    "params": [],
    "return": null
  },
  {
    "__docId__": 316,
    "kind": "method",
    "name": "export_summary_data",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#export_summary_data",
    "access": "public",
    "description": "When called, will save aggregated trial data into a CSV.     ",
    "lineNumber": 511,
    "params": [],
    "return": null
  },
  {
    "__docId__": 317,
    "kind": "file",
    "name": "scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "content": "import JND_Radius from \"/scripts/experiments/jnd_radius/jnd_radius.js\";\nexport var jnd_radius_exp = new JND_Radius(params);\n\nvar timeline = [];\nvar address = location.protocol + \"//\" + location.hostname + \":\" + location.port; \n\n// Firefox check for formatting\nif (typeof InstallTrigger !== 'undefined') {\n  var isFirefox = true;\n} else {\n  var isFirefox = false;\n}\n\n// =========================================================\n// WELCOME TRIAL BLOCK\n\nlet shape_names = jnd_radius_exp.condition_name.split(\"_\");\n\nvar welcome = {\n  type: 'html-keyboard-response',\n  stimulus: `<div align = \"center\" style=\"margin-top: ${isFirefox ? \"25vh\" : \"0\"}\">` + `<img src=\"${address}/img/VCL_lab_logo.png\"></img><br><br>` +\n            `<b>Base:</b> ${jnd_radius_exp.constructor.name}` + '<br>' + \n            `<b>Trial Type:</b> ${jnd_radius_exp.trial_structure}` + '<br>' + \n            `<b>Condition:</b> ${shape_names[0]}, ${shape_names[1]}` + \n            '<br><br><br><p><font size = 15>Press any key to begin.<p></font>' +\n            '</div>',\n  data: {type: 'instruction'}\n};\ntimeline.push(welcome);\n\n// =========================================================\n// INSTRUCTION TRIAL BLOCKS\n\nvar instructions = {\n  type: \"html-keyboard-response\",\n  stimulus:       \n      `\n      <div align = 'center' style = 'margin-top: ${isFirefox ? \"35vh\" : \"0\"}; height: 35vh; display: block'>\n        <p>In this experiment, two shapes will appear side-by-side.\n        <br>\n        Indicate which graph is has a <b>greater area</b> by pressing the Z or M key. </p><p>\n        <div style='height: auto;'>\n          <div style='float: left;'>\n            <img src=\"${address}/img/sample_${shape_names[0]}.png\"></img> \n            <p class='small'><strong>Press the Z key</strong></p>\n          </div>\n\n          <div style='float: right;'>\n            <img src=\"${address}/img/sample_${shape_names[1]}.png\"></img>\n            <p class='small'><strong>Press the M key</strong></p>\n          </div>\n        </div>\n      </div>  \n      <br>\n      <div style='text-align: center; display: block'><br><br><br><p>Press any key to continue.</div>\n      ` \n};\n\ntimeline.push(instructions);\n\n// =========================================================\n// FEEDBACK\n\nvar feedback = {\n  type: 'html-keyboard-response',\n  choices: jsPsych.NO_KEYS, //No responses will be accepted as a valid response.\n  trial_duration: 500,\n  data: {type: 'feedback'},\n  stimulus: function(){\n\n    document.body.style.backgroundColor = jnd_radius_exp.trial_data.feedback_background_color;\n\n    var last_trial = JSON.parse(jsPsych.data.getLastTrialData().json());\n    var last_trial_correct = last_trial[0][\"correct\"];\n\n    // For debugging purposes:\n    if (last_trial_correct == -1){\n      return '<p>' + \n             `<div style = \"margin-top: ${isFirefox ? \"45vh\" : \"0\"};\"><font style=\"font-size:50px; color:blue\">Exiting from experiment.<p></font></div>`\n    }\n\n    else if (last_trial_correct){\n      return `<p><div style = \"margin-top: ${isFirefox ? \"45vh\" : \"0\"};\"><i class=\"fa fa-check-circle\" style=\"font-size:50px; color:green; margin-right: 10px;\"></i>` + \n             '<font style=\"font-size:50px; color:green\">Correct!<p></font></div>'\n    }\n    else{\n      return `<p><div style = \"margin-top: ${isFirefox ? \"45vh\" : \"0\"};\"><i class=\"fa fa-close\" style=\"font-size:50px; color:red; margin-right: 10px;\"></i>` + \n             '<font style=\"font-size:50px; color:red;\"\">Incorrect!<p></font></div>'\n    }\n  }\n};\n\n// =========================================================\n// EXPERIMENT TRIAL BLOCKS\n\nvar trial = jnd_radius_exp.generate_trial(\"test\");\n\nvar experiment = {\n  timeline: [trial, feedback], // We use same feedback block as that used in practice \n  loop_function: function(data){ // Return true if timeline should continue\n                                 // Return false if timeline should end\n\n    // For debugging, if you want to exit out of experiment, press q:\n    if (jsPsych.pluginAPI.convertKeyCharacterToKeyCode('q') == data.values()[0].key_press){\n      return false;\n    }\n\n    // If subcondition should end:\n    if(jnd_radius_exp.end_sub_condition()){\n      jnd_radius_exp.first_trial_of_sub_condition = true;\n      // If there are still more subconditions, increment current index\n      if (jnd_radius_exp.current_sub_condition_index < (jnd_radius_exp.sub_conditions_constants.length-1)){\n        jnd_radius_exp.current_sub_condition_index++; \n        console.log(\"!!!!!!!!!! Moved to new sub condition at index \" \n                    + jnd_radius_exp.current_sub_condition_index);\n        return true; \n      }\n      // Else end experiment\n      else{\n        return false;\n      }\n    } \n    // Else continue w/ current subcondition:\n    else {\n      return true;\n    }\n  },\n  on_finish: function(data){\n    jnd_radius_exp.trial_data = data; \n  }\n};\n\ntimeline.push(experiment);\n\nconsole.log(\"======================\");\n\n// =========================================================\n// DATA DOWNLOADING \n\nvar experiment_end = {\n  type: 'html-keyboard-response',\n  stimulus: `<div align = \"center\" style = \"margin-top: ${isFirefox ? \"45vh\" : \"0\"};\">` + \n            '<p><font size = 10>You have completed the experiment!<p></font>' +\n            '<br>' +\n            'Trial and summary data files will now automatically download locally.' + \n            '</div>' ,\n  on_start: function(){\n\n    jnd_radius_exp.export_trial_data();\n    jnd_radius_exp.export_summary_data();\n\n    // Reset background color to feedback\n    document.body.style.backgroundColor = jnd_radius_exp.trial_data.feedback_background_color;\n  }\n};\ntimeline.push(experiment_end);\n\n// =========================================================\n// START JSPSYCH\n\njsPsych.init({\n    timeline: timeline,\n    on_finish: function(){ \n        jsPsych.data.displayData();\n    }\n});\n",
    "static": true,
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/public/scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 318,
    "kind": "variable",
    "name": "jnd_radius_exp",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd_radius/jnd_radius_timeline.js~jnd_radius_exp",
    "access": "public",
    "export": true,
    "importPath": "VCL Framework/scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "importStyle": "{jnd_radius_exp}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius"
      ]
    }
  },
  {
    "__docId__": 319,
    "kind": "variable",
    "name": "timeline",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd_radius/jnd_radius_timeline.js~timeline",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 320,
    "kind": "variable",
    "name": "address",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd_radius/jnd_radius_timeline.js~address",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 321,
    "kind": "variable",
    "name": "shape_names",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd_radius/jnd_radius_timeline.js~shape_names",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 322,
    "kind": "variable",
    "name": "welcome",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd_radius/jnd_radius_timeline.js~welcome",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"data\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 323,
    "kind": "variable",
    "name": "instructions",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd_radius/jnd_radius_timeline.js~instructions",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 324,
    "kind": "variable",
    "name": "feedback",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd_radius/jnd_radius_timeline.js~feedback",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"choices\": *, \"trial_duration\": number, \"data\": *, \"stimulus\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 325,
    "kind": "variable",
    "name": "trial",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd_radius/jnd_radius_timeline.js~trial",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 326,
    "kind": "variable",
    "name": "experiment",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd_radius/jnd_radius_timeline.js~experiment",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *, \"loop_function\": *, \"on_finish\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 327,
    "kind": "variable",
    "name": "experiment_end",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd_radius/jnd_radius_timeline.js~experiment_end",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 140,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"on_start\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 328,
    "kind": "file",
    "name": "scripts/experiments/stevens/stevens.js",
    "content": "// import {generateDistribution} from \"/scripts/generators/gaussian_distribution_generator.js\";\nimport {initialize_random_order} from \"/scripts/experiment-properties/balancing/generators/random_generator.js\";\nimport {initialize_latin_square} from \"/scripts/experiment-properties/balancing/generators/latin_square_generator.js\";\nimport {balance_subconditions} from \"/scripts/experiment-properties/balancing/balancing_controller.js\";\nimport {get_data, \n        get_data_subset} from \"/scripts/experiment-properties/data/data_controller.js\";\nimport {randomize_position,\n        randomize_radius_position,\n        force_greater_right_position} from \"/scripts/helpers/experiment_helpers.js\";\n\nexport default class Stevens {\n\n  /**\n   * Initializes a Stevens experiment object. \n   *\n   * @param  params {assoc array}  Parameters passed from routing.\n   */\n  constructor(params) {\n\n    let trial_structure = params[\"trial_structure\"];\n    let condition_name = params[\"condition\"];\n    let graph_type = params[\"graph_type\"];\n    let balancing_type = params[\"balancing\"];\n\n    this.condition_name = condition_name; \n    this.condition_group = this.condition_name.split('_')[0]; // Mostly to handle \"distractor\" conditions.\n                                                              // TODO: Should have a better flag for it.\n    this.subject_id = params[\"subject_id\"];\n    this.subject_initials = params[\"subject_initials\"];\n\n    // ========================================\n    // PARAMETER CHECKING\n\n    // **NOTE: EXPERIMENTS variable comes from /public/config/experiments-config.js\n    if (!EXPERIMENTS[\"stevens\"][\"trial_structure\"].includes(trial_structure)) {\n      throw Error(trial_structure + \" is not supported.\");}\n    else {\n      this.trial_structure = trial_structure;\n    }\n\n    if (!EXPERIMENTS[\"stevens\"][\"graph_type\"].includes(graph_type)){\n      throw Error(graph_type + \" is not supported.\")} \n    else { \n      this.graph_type = graph_type;\n    };  \n\n    if (!EXPERIMENTS[\"stevens\"][\"balancing_type\"].includes(balancing_type)) {\n      throw Error(balancing_type + \" is not supported.\") }\n    else {\n      this.balancing_type = balancing_type;\n    }  \n\n    // ========================================\n    // EXPERIMENT CONSTANTS\n\n    this.MAX_STEP_INTERVAL = 10;\n\n    // ========================================\n    // EXPERIMENT VARIABLES\n\n    this.input_count_array; // Array of length trials_per_round, each index representing num inputs per round \n                            // for a given sub condition\n    this.sub_conditions_constants;\n    this.current_sub_condition_index;\n    this.round_end = false;\n\n    // ========================================\n    // PRACTICE EXPERIMENT VARIABLES\n\n    this.practice_conditions_constants;\n    this.adjusted_midpoint_matrix = {}; \n    this.practice_trial_data = {};\n    this.practice_end = false;\n\n    // ========================================\n    // TEST EXPERIMENT VARIABLES\n\n    this.experiment_conditions_constants;\n    this.sub_condition_order = [];\n\n    // ========================================\n    // CURRENT TRIAL DATA\n\n    // Plotting-related vars\n    this.left_coordinates = \"\";\n    this.right_coordinates = \"\";\n    this.middle_coordinates = \"\";\n    this.distractor_coordinates = \"\";\n\n    // JsPsych trial_data for the current trial\n    this.trial_data = \"\";\n\n    // ========================================\n    // PREPARE EXPERIMENT\n\n    // Extract raw constants\n    this.raw_constants = get_data(this);\n    \n    // Prepare experiment + practice data\n    this.prepare_experiment();\n    this.prepare_practice();  \n\n  }\n\n  /**\n   * Orders the input data according to balancing type and\n   * initializes the Stevens object's variables.  \n   *\n   * @param  balancing_type {string}                           Type of balancing. Currently only latin_square\n   *                                                           is supported.\n   *         dataset {[{assoc array}, {assoc array}, ... ]}   The data to be ordered. \n   */\n  prepare_experiment() {\n\n    let dataset = this.raw_constants;\n\n    var ordered_dataset = [];\n\n    switch (this.trial_structure) {\n\n      case \"foundational\":\n        this.set_foundational_dataset_order(dataset);\n        break;\n\n      case \"design\":\n        this.sub_condition_order = balance_subconditions(this.balancing_type, this.constructor.name.toLowerCase(), dataset.length);\n        break;\n\n      case \"custom\":\n        ordered_dataset = dataset;\n        break;\n    }\n\n    // Order the data set according to the latin square\n    for (let i=0; i < this.sub_condition_order.length; i++){\n      ordered_dataset[i] = dataset[this.sub_condition_order[i]];\n\n      // Alternate the start ref to be low or high for each subcondition\n      if (i%2 === 0) {\n        ordered_dataset[i][\"start_ref\"] = ordered_dataset[i][\"low_ref\"];\n      } else {\n        ordered_dataset[i][\"start_ref\"] = ordered_dataset[i][\"high_ref\"];\n      }\n    }\n\n    // Set experiment trials\n    this.experiment_conditions_constants = ordered_dataset;    \n  }\n\n  /**\n   * Creates the practice dataset by taking the first FOUR subconditions.\n   *\n   * @param  dataset {[{assoc array}, {assoc array}, ... ]}   The data to be ordered. \n   */\n  prepare_practice() {\n\n    let dataset = this.raw_constants;\n    let practice_dataset = [];\n\n    for (let i=0; i < 4; i++){\n      practice_dataset[i] = dataset[i];\n      this.practice_trial_data[i] = [];\n\n      // Alternate the start ref to be low or high for each subcondition\n      if (i%2 === 0) {\n        practice_dataset[i][\"start_ref\"] = dataset[i][\"low_ref\"];\n      } else {\n        practice_dataset[i][\"start_ref\"] = dataset[i][\"high_ref\"];\n      }\n    }\n\n    this.sub_conditions_constants = practice_dataset;\n    this.current_sub_condition_index = 0; \n    this.input_count_array = new Array(this.sub_conditions_constants[0].trials_per_round).fill(0);\n  }\n\n\n\n  /**\n   * Sets the subcondition order for foundational range.\n   * Needs to balance INDIVIDUALLY the round and test type conditions,\n   * then maintain that order (e.g. all test goes first, then consistency)\n   *\n   * @param  dataset {[{assoc array}, {assoc array}, ... ]}   The data used to be ordered. \n   */\n  set_foundational_dataset_order(dataset) {\n\n    // To hold individual data sets according to round type\n    var test_dataset = [];\n    var consistency_dataset = [];\n\n    // To hold balanced indexes\n    var test_order = []; \n    var consistency_order = [];\n\n    // Extract dataset according to test or consistency round type\n    for (let subcondition of dataset) {\n\n      if (subcondition[\"round_type\"] === \"test\") {\n        test_dataset.push(subcondition);\n      } else {\n        consistency_dataset.push(subcondition);\n      }\n    }\n\n    // Get balancing order for EACH round type dataset individually\n    switch(this.balancing_type) {\n\n      case 'latin_square':\n        test_order = initialize_latin_square(test_dataset.length);\n        consistency_order = initialize_latin_square(consistency_dataset.length);\n        break;\n\n      case 'random':\n        test_order = initialize_random_order(test_dataset.length);\n        consistency_order = initialize_random_order(consistency_dataset.length);\n        break;\n\n      default:\n        throw Error(this.balancing_type + \" balancing type is not supported.\");\n    }\n\n    // Since test dataset will run first, add index length of it to consistency order\n    for (let i = 0; i < consistency_order.length; i++) {\n      consistency_order[i] += test_dataset.length;\n    }\n\n    //  Merge the two orders \n    this.sub_condition_order = test_order.concat(consistency_order);\n  }\n\n  /**\n   * Resets all relevant variables to now use the test version.\n   * (input_count_array, sub_conditions_constants, and current_sub_condition_index\n   * are shared variables between the practice and test trials).\n   *\n   * This function is called once all the practice trials have run. \n   */\n  end_practice_experiment() {\n    this.sub_conditions_constants = this.experiment_conditions_constants;\n    this.input_count_array = new Array(this.sub_conditions_constants[0].trials_per_round).fill(0);\n    this.current_sub_condition_index = 0;\n  }\n\n  /**\n   * Calculates exclusion criteria using standard deviation and variance.\n   * Subcondition is flagged if:\n   * - Standard deviation > 0.2\n   * - Anchoring > 0.6\n   *\n   * @ return     HTML of subcondition data to print onto screen\n   */\n  calculate_exclusion_criteria() {\n\n    let string = \"\";\n\n    for (let i = 0; i < Object.keys(this.practice_trial_data).length; i++) {\n\n      let subcondition_data = this.practice_trial_data[i];\n      let mids = this.get_estimated_mids(subcondition_data);\n\n      let std_dev = this.get_standard_deviation(mids);\n      let anchoring_value = this.get_anchoring_value(mids);\n\n      let rounded_mids = [];\n      for (let mid of mids) {\n        rounded_mids.push(mid.toFixed(3));\n      }\n\n      let anchoring_color = \"BLACK\";\n      if (anchoring_value > 0.5) {\n        anchoring_color = \"RED\";\n      }\n\n      let std_dev_color = \"BLACK\";\n      if (std_dev > 0.2) {\n        std_dev_color = \"RED\";\n      }\n\n      string += `\n        <div align = \"center\" style = \"text-align: left; float:left; width: 20vw\">\n        <font size = 2><b> Subcondition: ${i+1} </b>\n        <br>\n        Midpoint values: ${rounded_mids}\n        <br>\n        <font color = ${std_dev_color}> Standard Deviation: ${std_dev} </font>\n        <br>\n        <font color = ${anchoring_color}> Anchoring Value: ${anchoring_value} </font>\n        <br>\n        <br>\n        </font>\n        </div>\n        `\n    }\n\n    return string;\n  }\n\n  /**\n   * Calculates the standard deviation for the specified subcondition.\n   * @ param  {array}   array of estimated mids for that trial\n   *\n   * @ return {double}  standard deviation\n   */\n  get_standard_deviation(estimated_mids) {\n\n    let values = [];\n\n    // Calculate mean:\n    let mean = 0;\n    for (let mid of estimated_mids) {\n      mean += mid;\n    }\n    mean = mean / estimated_mids.length;\n\n    // Calculate variance:\n    let variance = 0;\n    for (let mid of estimated_mids) {\n      variance += Math.pow(mid - mean, 2);\n    }\n    variance = variance / (estimated_mids.length - 1);\n\n    return Math.sqrt(variance).toFixed(3);\n  }\n\n  /**\n   * Calculates the anchoring value for the specified subcondition.\n   * @ param  {array}   array of estimated mids for that trial\n   *\n   * @ return {double} anchoring value\n   */\n  get_anchoring_value(estimated_mids) {\n\n    let high_ref_trial_sum = 0;\n    let low_ref_trial_sum = 0;\n\n    // Iterate through each estimated mid (trial) of a given subcondition\n    for (let i = 0; i < estimated_mids.length; i++) {\n      // Evens have the low ref as their starter \n      if (i % 2 === 0) {\n        low_ref_trial_sum += estimated_mids[i];\n      } else {\n        high_ref_trial_sum += estimated_mids[i];\n      }\n    }\n\n    return Math.abs(high_ref_trial_sum - low_ref_trial_sum).toFixed(3);\n  }\n\n  /**\n   * Retrieves the estimated midpoints of each trial for the subcondition.\n   *\n   * @ return {array}  of estimated mids \n   */\n  get_estimated_mids(subcondition_data) {\n\n    let estimated_mids = [];\n\n    for (let trial of subcondition_data) {\n      estimated_mids.push(trial.estimated_mid);\n    }\n\n    return estimated_mids;\n  }\n\n  /**\n   * Generates a Stevens object for use in the JsPsych timeline.\n   *\n   * @param  type {string}                             \"test\" or \"practice\"\n   * @return trial {object}\n   */   \n  generate_trial(block_type) {\n\n    if ((block_type !== \"test\") && (block_type !== \"practice\")) {throw Error(block_type + \" is not supported.\")};\n\n    // Initialize a variable for this so it is usable inside on_start\n    var stevens_exp = this; \n    var address = location.protocol + \"//\" + location.hostname + \":\" + location.port + \"/stevens_trial\"; \n\n    var trial = {\n        type:'external-html-keyboard-response',\n        url: address,\n        choices: [77, 90, 32, 81],  // m = 77 (up), z = 90 (down), 32 = spacebar, 81 = q (exit button for debugging)\n        execute_script: true,\n        response_ends_trial: true, \n        data: {},\n        on_start: function(trial){ // NOTE: on_start takes in trial var \n\n          // Set the constants to be used:\n          var index = stevens_exp.current_sub_condition_index; \n          var constants = stevens_exp.sub_conditions_constants[index];\n\n          // Retrieve data from last trial:\n          var last_stevens_trial = stevens_exp.get_last_trial(trial, block_type, index);\n\n          // Handling saving the data: \n          stevens_exp.handle_data_saving(trial, block_type, constants, estimated_correlation, last_stevens_trial, index);\n\n          // Set the estimated correlation\n          var estimated_correlation = stevens_exp.update_estimated_correlation(trial, constants, last_stevens_trial);\n\n          console.log(\"round refreshes: \" + trial.data.round_refreshes);\n          console.log(\"trial/round num: \" + trial.data.trial_num);\n          console.log(\"num adjustments: \" + trial.data.num_adjustments);\n          console.log(\"input count per trial: \" + stevens_exp.input_count_array);\n\n          // Generate distributions\n          var high_coordinates = generateDistribution(constants.high_ref, \n                                                      constants.error, \n                                                      constants.num_points, \n                                                      constants.num_SD, \n                                                      constants.mean, \n                                                      constants.SD);\n          \n          var low_coordinates = generateDistribution(constants.low_ref, \n                                                     constants.error, \n                                                     constants.num_points, \n                                                     constants.num_SD, \n                                                     constants.mean,\n                                                     constants.SD);\n          \n          var estimated_coordinates = generateDistribution(estimated_correlation, \n                                                        constants.error, \n                                                        constants.num_points, \n                                                        constants.num_SD, \n                                                        constants.mean, \n                                                        constants.SD);\n          \n          // If there is a distractor population, generate it:\n          if (stevens_exp.condition_group === \"distractor\") {\n            stevens_exp.generate_distractor_coordinates(constants);\n          }\n\n          // Randomize position of the high and low correlated graphs for a given round\n          if (trial.data.round_refreshes == 1){\n            var result = randomize_position(trial, \n                                           high_coordinates,\n                                           low_coordinates, \n                                           constants.high_ref, \n                                           constants.low_ref);\n            trial.data.high_ref_is_right = result.base_is_right;\n          }\n\n          if (trial.data.high_ref_is_right){\n            stevens_exp.right_coordinates = high_coordinates;\n            stevens_exp.left_coordinates = low_coordinates;\n            stevens_exp.coordinates = [low_coordinates, estimated_coordinates, high_coordinates];\n          }\n          else{\n            stevens_exp.right_coordinates = low_coordinates;\n            stevens_exp.left_coordinates = high_coordinates;\n            stevens_exp.coordinates = [high_coordinates, estimated_coordinates, low_coordinates];\n          }\n\n          stevens_exp.trial_data = trial.data; \n\n          console.log(\"[RIGHT] Correlation: \" + trial.data.right_correlation);\n          console.log(\"[MIDPOINT] Correlation: \" + trial.data.estimated_mid);\n          console.log(\"[LEFT] Correlation: \" + trial.data.left_correlation);\n        }\n      };\n\n    return trial; \n  }\n\n  /**\n   * Will generate the distractor coordinates and save them to the instance.\n   *\n   * @param  {object}  constants (for the given trial)       \n   */\n  generate_distractor_coordinates(constants) {\n\n    let left_dist_coordinates = generateDistribution(constants.dist_base,\n                                                           constants.dist_error,\n                                                           constants.dist_num_points,\n                                                           constants.num_SD,\n                                                           constants.mean,\n                                                           constants.SD);\n    \n    let middle_dist_coordinates = generateDistribution(constants.dist_base,\n                                                           constants.dist_error,\n                                                           constants.dist_num_points,\n                                                           constants.num_SD,\n                                                           constants.mean,\n                                                           constants.SD);\n\n    let right_dist_coordinates = generateDistribution(constants.dist_base,\n                                                           constants.dist_error,\n                                                           constants.dist_num_points,\n                                                           constants.num_SD,\n                                                           constants.mean,\n                                                           constants.SD);\n\n    this.distractor_coordinates = [left_dist_coordinates, middle_dist_coordinates, right_dist_coordinates];\n  }\n\n  /**\n   * Retrieves the last stevens trial depending on block_type for a\n   * given sub condition index. \n   * If this is the first trial of a given block_type, returns null. \n   *\n   * @param  trial {object}   \n   *         block_type {string}          \"test\" or \"practice\"         \n   *         index {integer}\n   * @return last_stevens_trial {object}           \n   */\n  get_last_trial(trial, block_type, index) {\n\n    var last_stevens_trial; \n    trial.data.type = \"stevens\";\n    \n    // Set trial run_type depending on block type\n    // (we need to set trial's run_type so we can do the filter in the\n    // next if block)\n    if (block_type == \"test\"){\n      trial.data.run_type = \"test\";\n    }\n    else{\n      trial.data.run_type = \"practice\";\n    }\n\n    // Retrieve previous stevens trial if it exists\n    if (block_type == \"practice\" && jsPsych.data.get().filter({type: \"stevens\", run_type: \"practice\", sub_condition: index}).last(1).values()[0]){\n      last_stevens_trial = jsPsych.data.get().filter({type: \"stevens\", run_type: \"practice\", sub_condition: index}).last(1).values()[0];\n    }\n    else if (block_type == \"test\" && jsPsych.data.get().filter({type: \"stevens\", run_type: \"test\", sub_condition: index}).last(1).values()[0]){\n      last_stevens_trial = jsPsych.data.get().filter({type: \"stevens\", run_type: \"test\", sub_condition: index}).last(1).values()[0];\n    }\n    else{\n      last_stevens_trial = null;\n    }\n\n    return last_stevens_trial; \n  }\n\n  /**\n   * Handles saving the relevant data on a given trial.\n   *\n   * For reference, these are the helper variables created to assist in trial logic (i.e not present in excel)\n   * this.trial_variables =         \n   *       {type: 'stevens',\n   *       run_type: '',\n   *       left_correlation: '',\n   *       right_correlation: '',\n   *       round_refreshes: 0,      // Number of times there is a refresh for a given round \n   *       high_ref_is_right: false\n   *       start_ref: ''\n   *       };\n   *\n   * These are variables created WITHIN the trial logic that were not present in excel (but need to be\n   * outputted to results).         \n   * this.export_variables = \n   *       {trial_num: 0,                // Round index trial is currently on (aka trial_num from excel)\n   *        sub_condition: '',           // Chronological ordering of sub_condition [1, 2, 3 ... ]\n   *        balanced_sub_condition: '',  // Index of sub_condition according to balancing order\n   *        estimated_mid: '',\n   *        num_adjustments: 0,          // Number of inputs for a given round (aka num_adjustments from excel)\n   *        trials_per_round: '',\n   *       };\n   *\n   * @param trial {object}\n   *        block_type {string}               \"test\" or \"practice\"\n   *        constants {assoc array}\n   *        estimated_correlation {double}\n   *        last_stevens_trial {object}\n   *        index {integer}\n   */\n  handle_data_saving(trial, block_type, constants, estimated_correlation, last_stevens_trial, index) {\n\n    trial.data = Object.assign({}, trial.data, constants);\n\n    trial.data.sub_condition = index;\n    trial.data.balanced_sub_condition = this.sub_condition_order[index];\n\n    trial.trial_duration = trial.data.regen_rate;\n\n    // If trial is still part of same sub-condition, carry over constants from\n    // the previous trial\n    if (last_stevens_trial){\n\n      trial.data.step_size = last_stevens_trial.step_size;\n      trial.data.right_correlation = last_stevens_trial.right_correlation;\n      trial.data.left_correlation = last_stevens_trial.left_correlation;\n      trial.data.high_ref_is_right = last_stevens_trial.high_ref_is_right;\n\n      // If a round has just ended:\n      // - increment the trial_num\n      // - set refresh number back to 1\n      // - reset the number of adjustments to 0\n      // - swap the start ref to be high/low depending on the previous round's start ref\n      if (this.round_end == true){\n\n        trial.data.trial_num = last_stevens_trial.trial_num + 1;\n        trial.data.num_adjustments = 0;\n        trial.data.round_refreshes = 1;\n\n        if (last_stevens_trial.start_ref === constants.high_ref) {\n          trial.data.start_ref = constants.low_ref;\n        } else {\n          trial.data.start_ref = constants.high_ref;\n        }\n\n        this.round_end = false; //Reset flag\n      }\n      // Else trial_num, num_adjustments and start_ref is the same, but round_refresh ++ \n      else{\n        trial.data.trial_num = last_stevens_trial.trial_num;\n        trial.data.num_adjustments = last_stevens_trial.num_adjustments;\n        trial.data.start_ref = last_stevens_trial.start_ref;\n        trial.data.round_refreshes = last_stevens_trial.round_refreshes + 1;\n      }\n    }\n    // Else this is the first refresh of a given trial \n    else{\n      trial.data.trial_num = 0;\n      trial.data.num_adjustments = 0;\n      trial.data.round_refreshes = 1;\n    }\n  }\n\n  /**\n   * Updates the estimated correlation.\n   * If  : \n   *    Is the first trial, will initialize the correlation and step size.\n   * Else:\n   *    If there was a key press in previous trial, will calculate the\n   *    the estimated correlation (depending on whether it was an inc or dec).\n   *    Else if no key press in previous trial, will set estimated correlation\n   *    to the previous trial's. \n   *\n   * @param  trial {object}   \n   *         constants {object}         \n   *         last_trial {object}\n   * @return estimated_correlation {double}           \n   */\n  update_estimated_correlation(trial, constants, last_trial) {\n\n    var estimated_correlation;\n    var index = this.current_sub_condition_index;\n\n    // If first trial (estimated_correlation is null), so initialize\n    // estimated midpoint and set step size:\n    if (trial.data.round_refreshes == 1){\n  \n      //Initialize the estimated midpoint correlation:\n      //estimated_correlation = Math.random() < 0.5 ? constants.low_ref : constants.high_ref;\n      estimated_correlation = trial.data.start_ref;\n      trial.data.estimated_mid = estimated_correlation;\n      trial.data.step_size = (constants.high_ref - constants.low_ref) / this.MAX_STEP_INTERVAL;\n\n    }\n    // If there is input on PREVIOUS trial, change the midpoint + increment trial number\n    // (Since we are plotting the new middle graph based on PREVIOUS input, we look\n    // at the last_trials's estimated_correlation and step size.)\n    else if (last_trial.key_press && (last_trial.key_press == trial.choices[0] || last_trial.key_press == trial.choices[1])){\n\n      // Need to check that if hits either high or low ref, it DOESN'T count as a num_adjustment\n      let is_unchanged = false;\n\n      switch (last_trial.key_press){\n\n        case trial.choices[0]: // up\n\n          estimated_correlation = Math.min(constants.high_ref, last_trial.estimated_mid + (Math.random() * last_trial.step_size));\n          \n          // If they've hit the max (high_ref)\n          if (estimated_correlation === constants.high_ref) {\n            is_unchanged = true;\n          }\n          break;\n\n        case trial.choices[1]: // down\n\n          estimated_correlation = Math.max(constants.low_ref, last_trial.estimated_mid - (Math.random() * last_trial.step_size));\n          \n          // If they've hit the min (low_ref)\n          if (estimated_correlation === constants.low_ref) {\n            is_unchanged = true;\n          }\n          break;\n      }\n\n      // For valid changes (i.e not going beyond max or below min), can then \n      // increment num_adjustments\n      if (!is_unchanged){\n        trial.data.num_adjustments = last_trial.num_adjustments + 1;\n        this.input_count_array[trial.data.trial_num]++;\n      }  \n\n    }\n\n    // Else use the previous trial's midpoint\n    else{\n\n      // QUESTION: If there is user input, on the next viz, the graph will display \n      // that estimated correlation. However, AFTER that, we are changing the \n      // estimated correlation??\n\n      // Based on StevensTrial.java (line 75), the estimated midpoint gets updated this way:\n      // var prev_constants = this.sub_conditions_constants[current_sub_condition_index-1];\n      // if (last_trial.estimated_correlation == prev_constants.high_ref){\n      //   estimated_midpoint = constants.low_ref;\n      // }\n      // else{\n      //   estimated_midpoint = constants.high_ref;\n      // }\n\n      estimated_correlation = last_trial.estimated_mid;\n    }\n\n    // Update the trial's estimated_mid\n    trial.data.estimated_mid = estimated_correlation;\n\n    return estimated_correlation;\n  }\n\n  /**\n   * Determines whether the round can end or not. A round can end ONLY if\n   * there has been at least 1 input from the user on the given round \n   *\n   * @return {boolean}            True if sub condition should end.\n   */\n  end_round() {\n\n    let last_trial = jsPsych.data.get().last(1).values()[0];\n\n    return !(last_trial.num_adjustments === 0);\n  }\n\n  /**\n   * Determines whether the current sub condition can end or not.\n   * \n   * @return {boolean}            True if sub condition should end.\n   */\n  end_sub_condition() {\n    \n    var trials_per_round = this.sub_conditions_constants[0].trials_per_round;\n    \n    if (this.input_count_array[trials_per_round - 1] == 0){ \n      return false;\n    }\n    else{\n      // Reset array\n      this.input_count_array = new Array(this.sub_conditions_constants[0].trials_per_round).fill(0);\n      return true;\n    }\n  }\n\n  /**\n   * When called, will save individual trial data into a CSV.     \n   */\n  export_trial_data() {\n\n    var csv = 'condition,trial_num,sub_condition,balanced_sub_condition,high_ref,estimated_mid,low_ref,num_adjustments,trials_per_round,error,sum_rt,num_points,mean,SD,num_SD,round_type,step_size,point_color,background_color,text_color,axis_color,point_size,regen_rate\\n';\n    // Get most recent subcondition - will have the max subcondition value\n    var max_sub_condition = jsPsych.data.get().filter({type: 'stevens', run_type: 'test'}).last(1).values()[0].sub_condition;\n    var data = [];\n\n    // Iterate through each sub condition\n    for (let i = 0; i<=max_sub_condition; i++){\n      var condition_data = jsPsych.data.get().filter({type: 'stevens', run_type: 'test', sub_condition: i})\n                                             .filterCustom(function(x){ //Don't include trials with no user input\n                                                return x.rt != null;\n                                             });                                \n      var condition_values = condition_data.values()[0];\n      var max_trial_num = condition_data.last(1).values()[0].trial_num; //The last trial of this sub-condition\n                                                                        //has the last trial num\n      // Iterate through each trial of a given sub condition                                                               \n      for (let j = 0; j<=max_trial_num; j++){\n        //Data for a given trial of a sub condition\n        var trial_data = condition_data.filter({trial_num: j});\n        //Take the last trial's estimated mid since we want the most recent value\n        var last_estimated_mid = trial_data.last(1).values()[0].estimated_mid;\n        var last_num_adjustments = trial_data.last(1).values()[0].num_adjustments;\n        var sum_rt = trial_data.filterCustom(function(x){ return x.key_press != 81 }) //Don't use the exit trial rt\n                                   .select('rt')\n                                   .sum();\n                                              \n        var row = [this.condition_name];\n\n        row.push(j+1);\n        row.push(condition_values.sub_condition);\n        row.push(condition_values.balanced_sub_condition);\n        row.push(condition_values.high_ref);\n        row.push(last_estimated_mid);\n        row.push(condition_values.low_ref);\n        row.push(last_num_adjustments);\n        row.push(condition_values.trials_per_round);\n        row.push(condition_values.error);\n        row.push(average_rt);\n        row.push(condition_values.num_points);\n        row.push(condition_values.mean);\n        row.push(condition_values.SD);\n        row.push(condition_values.num_SD);\n        row.push(condition_values.round_type);\n        row.push(condition_values.step_size);\n        row.push(condition_values.point_color);\n        row.push(condition_values.background_color);\n        row.push(condition_values.text_color);\n        row.push(condition_values.axis_color);\n        row.push(condition_values.point_size);\n        row.push(condition_values.regen_rate);\n\n        data.push(row);\n      }\n    }\n\n    // Append each row\n    data.forEach(function(row){\n      csv += row.join(',');\n      csv += \"\\n\";\n    });\n\n    var hiddenElement = document.createElement('a');\n    hiddenElement.href = 'data:text/csv;charset=utf-8,' + encodeURI(csv);\n    hiddenElement.target = '_blank';\n    hiddenElement.download = \"S\" + this.subject_id + \"_\" +this.condition_name + \"_stevens_trial_results.csv\";\n    hiddenElement.click();\n  }\n\n  /**\n   * When called, will save aggregated trial data into a CSV.     \n   */\n  export_summary_data() {\n    var csv = 'SUBJECT_ID,SUBJECT_INITIALS,ROUND_TYPE,NUM_TRIALS,HIGH_REF,ESTIMATED_MIDPOINT,LOW_REF\\n';\n\n    var data = [];\n    \n    // Organize each row of the csv\n    for (let i = 0; i<this.sub_conditions_constants.length; i++){\n      var row = [];\n      var constants = this.sub_conditions_constants[i];\n      var condition_data = jsPsych.data.get().filter({type: 'stevens', run_type: 'test', balanced_sub_condition: this.sub_condition_order[i]})\n                                             .filterCustom(function(x){ //Don't include the exit trials\n                                                return x.correct != -1; \n                                             })\n                                             .filterCustom(function(x){ //Don't include trials with no user input\n                                                return x.rt != null;\n                                             });\n\n      row.push(this.subject_id);\n      row.push(this.subject_initials);\n      row.push(constants.round_type);\n      row.push(constants.trials_per_round);\n      row.push(constants.high_ref);\n      row.push(condition_data.select('estimated_mid').mean());\n      row.push(constants.low_ref);  \n\n      data.push(row);\n    }\n\n    // Append each row\n    data.forEach(function(row){\n      csv += row.join(',');\n      csv += \"\\n\";\n    });\n\n    var hiddenElement = document.createElement('a');\n    hiddenElement.href = 'data:text/csv;charset=utf-8,' + encodeURI(csv);\n    hiddenElement.target = '_blank';\n    hiddenElement.download = \"S\" + this.subject_id + \"_\" + this.condition_name + \"_stevens_summary_results.csv\";\n    hiddenElement.click();\n  }\n}\n",
    "static": true,
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/public/scripts/experiments/stevens/stevens.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 329,
    "kind": "class",
    "name": "Stevens",
    "memberof": "scripts/experiments/stevens/stevens.js",
    "static": true,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens",
    "access": "public",
    "export": true,
    "importPath": "VCL Framework/scripts/experiments/stevens/stevens.js",
    "importStyle": "Stevens",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 330,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#constructor",
    "access": "public",
    "description": "Initializes a Stevens experiment object. ",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "{assoc array}  Parameters passed from routing."
      }
    ]
  },
  {
    "__docId__": 331,
    "kind": "member",
    "name": "condition_name",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#condition_name",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 332,
    "kind": "member",
    "name": "condition_group",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#condition_group",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 333,
    "kind": "member",
    "name": "subject_id",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#subject_id",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 334,
    "kind": "member",
    "name": "subject_initials",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#subject_initials",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 335,
    "kind": "member",
    "name": "trial_structure",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#trial_structure",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 336,
    "kind": "member",
    "name": "graph_type",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#graph_type",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 337,
    "kind": "member",
    "name": "balancing_type",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#balancing_type",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 338,
    "kind": "member",
    "name": "MAX_STEP_INTERVAL",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#MAX_STEP_INTERVAL",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 339,
    "kind": "member",
    "name": "round_end",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#round_end",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 340,
    "kind": "member",
    "name": "adjusted_midpoint_matrix",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#adjusted_midpoint_matrix",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 341,
    "kind": "member",
    "name": "practice_trial_data",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#practice_trial_data",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 342,
    "kind": "member",
    "name": "practice_end",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#practice_end",
    "access": "public",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 343,
    "kind": "member",
    "name": "sub_condition_order",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#sub_condition_order",
    "access": "public",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 344,
    "kind": "member",
    "name": "left_coordinates",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#left_coordinates",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 345,
    "kind": "member",
    "name": "right_coordinates",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#right_coordinates",
    "access": "public",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 346,
    "kind": "member",
    "name": "middle_coordinates",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#middle_coordinates",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 347,
    "kind": "member",
    "name": "distractor_coordinates",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#distractor_coordinates",
    "access": "public",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 348,
    "kind": "member",
    "name": "trial_data",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#trial_data",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 349,
    "kind": "member",
    "name": "raw_constants",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#raw_constants",
    "access": "public",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 350,
    "kind": "method",
    "name": "prepare_experiment",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#prepare_experiment",
    "access": "public",
    "description": "Orders the input data according to balancing type and\ninitializes the Stevens object's variables.  ",
    "lineNumber": 113,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "balancing_type",
        "description": "{string}                           Type of balancing. Currently only latin_square\n                                                          is supported.\n        dataset {[{assoc array}, {assoc array}, ... ]}   The data to be ordered."
      }
    ],
    "return": null
  },
  {
    "__docId__": 352,
    "kind": "member",
    "name": "experiment_conditions_constants",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#experiment_conditions_constants",
    "access": "public",
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 353,
    "kind": "method",
    "name": "prepare_practice",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#prepare_practice",
    "access": "public",
    "description": "Creates the practice dataset by taking the first FOUR subconditions.",
    "lineNumber": 155,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "dataset",
        "description": "{[{assoc array}, {assoc array}, ... ]}   The data to be ordered."
      }
    ],
    "return": null
  },
  {
    "__docId__": 354,
    "kind": "member",
    "name": "sub_conditions_constants",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#sub_conditions_constants",
    "access": "public",
    "description": null,
    "lineNumber": 172,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 355,
    "kind": "member",
    "name": "current_sub_condition_index",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#current_sub_condition_index",
    "access": "public",
    "description": null,
    "lineNumber": 173,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 356,
    "kind": "member",
    "name": "input_count_array",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#input_count_array",
    "access": "public",
    "description": null,
    "lineNumber": 174,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 357,
    "kind": "method",
    "name": "set_foundational_dataset_order",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#set_foundational_dataset_order",
    "access": "public",
    "description": "Sets the subcondition order for foundational range.\nNeeds to balance INDIVIDUALLY the round and test type conditions,\nthen maintain that order (e.g. all test goes first, then consistency)",
    "lineNumber": 186,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "dataset",
        "description": "{[{assoc array}, {assoc array}, ... ]}   The data used to be ordered."
      }
    ],
    "return": null
  },
  {
    "__docId__": 359,
    "kind": "method",
    "name": "end_practice_experiment",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#end_practice_experiment",
    "access": "public",
    "description": "Resets all relevant variables to now use the test version.\n(input_count_array, sub_conditions_constants, and current_sub_condition_index\nare shared variables between the practice and test trials).\n\nThis function is called once all the practice trials have run. ",
    "lineNumber": 239,
    "params": [],
    "return": null
  },
  {
    "__docId__": 363,
    "kind": "method",
    "name": "calculate_exclusion_criteria",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#calculate_exclusion_criteria",
    "access": "public",
    "description": "Calculates exclusion criteria using standard deviation and variance.\nSubcondition is flagged if:\n- Standard deviation > 0.2\n- Anchoring > 0.6\n\n@ return     HTML of subcondition data to print onto screen",
    "lineNumber": 253,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 364,
    "kind": "method",
    "name": "get_standard_deviation",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#get_standard_deviation",
    "access": "public",
    "description": "Calculates the standard deviation for the specified subcondition.\n@ param  {array}   array of estimated mids for that trial\n\n@ return {double}  standard deviation",
    "lineNumber": 305,
    "params": [
      {
        "name": "estimated_mids",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 365,
    "kind": "method",
    "name": "get_anchoring_value",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#get_anchoring_value",
    "access": "public",
    "description": "Calculates the anchoring value for the specified subcondition.\n@ param  {array}   array of estimated mids for that trial\n\n@ return {double} anchoring value",
    "lineNumber": 332,
    "params": [
      {
        "name": "estimated_mids",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 366,
    "kind": "method",
    "name": "get_estimated_mids",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#get_estimated_mids",
    "access": "public",
    "description": "Retrieves the estimated midpoints of each trial for the subcondition.\n\n@ return {array}  of estimated mids ",
    "lineNumber": 355,
    "params": [
      {
        "name": "subcondition_data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 367,
    "kind": "method",
    "name": "generate_trial",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#generate_trial",
    "access": "public",
    "description": "Generates a Stevens object for use in the JsPsych timeline.",
    "lineNumber": 372,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "{string}                             \"test\" or \"practice\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "trial {object}"
    }
  },
  {
    "__docId__": 368,
    "kind": "method",
    "name": "generate_distractor_coordinates",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#generate_distractor_coordinates",
    "access": "public",
    "description": "Will generate the distractor coordinates and save them to the instance.",
    "lineNumber": 471,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "constants",
        "description": "(for the given trial)"
      }
    ],
    "return": null
  },
  {
    "__docId__": 370,
    "kind": "method",
    "name": "get_last_trial",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#get_last_trial",
    "access": "public",
    "description": "Retrieves the last stevens trial depending on block_type for a\ngiven sub condition index. \nIf this is the first trial of a given block_type, returns null. ",
    "lineNumber": 507,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "trial",
        "description": "{object}   \n        block_type {string}          \"test\" or \"practice\"         \n        index {integer}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "last_stevens_trial {object}"
    }
  },
  {
    "__docId__": 371,
    "kind": "method",
    "name": "handle_data_saving",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#handle_data_saving",
    "access": "public",
    "description": "Handles saving the relevant data on a given trial.\n\nFor reference, these are the helper variables created to assist in trial logic (i.e not present in excel)\nthis.trial_variables =         \n      {type: 'stevens',\n      run_type: '',\n      left_correlation: '',\n      right_correlation: '',\n      round_refreshes: 0,      // Number of times there is a refresh for a given round \n      high_ref_is_right: false\n      start_ref: ''\n      };\n\nThese are variables created WITHIN the trial logic that were not present in excel (but need to be\noutputted to results).         \nthis.export_variables = \n      {trial_num: 0,                // Round index trial is currently on (aka trial_num from excel)\n       sub_condition: '',           // Chronological ordering of sub_condition [1, 2, 3 ... ]\n       balanced_sub_condition: '',  // Index of sub_condition according to balancing order\n       estimated_mid: '',\n       num_adjustments: 0,          // Number of inputs for a given round (aka num_adjustments from excel)\n       trials_per_round: '',\n      };",
    "lineNumber": 568,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "trial",
        "description": "{object}\n       block_type {string}               \"test\" or \"practice\"\n       constants {assoc array}\n       estimated_correlation {double}\n       last_stevens_trial {object}\n       index {integer}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 373,
    "kind": "method",
    "name": "update_estimated_correlation",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#update_estimated_correlation",
    "access": "public",
    "description": "Updates the estimated correlation.\nIf  : \n   Is the first trial, will initialize the correlation and step size.\nElse:\n   If there was a key press in previous trial, will calculate the\n   the estimated correlation (depending on whether it was an inc or dec).\n   Else if no key press in previous trial, will set estimated correlation\n   to the previous trial's. ",
    "lineNumber": 636,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "trial",
        "description": "{object}   \n        constants {object}         \n        last_trial {object}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "estimated_correlation {double}"
    }
  },
  {
    "__docId__": 374,
    "kind": "method",
    "name": "end_round",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#end_round",
    "access": "public",
    "description": "Determines whether the round can end or not. A round can end ONLY if\nthere has been at least 1 input from the user on the given round ",
    "lineNumber": 723,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if sub condition should end."
    },
    "params": []
  },
  {
    "__docId__": 375,
    "kind": "method",
    "name": "end_sub_condition",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#end_sub_condition",
    "access": "public",
    "description": "Determines whether the current sub condition can end or not.",
    "lineNumber": 735,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if sub condition should end."
    },
    "params": []
  },
  {
    "__docId__": 377,
    "kind": "method",
    "name": "export_trial_data",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#export_trial_data",
    "access": "public",
    "description": "When called, will save individual trial data into a CSV.     ",
    "lineNumber": 752,
    "params": [],
    "return": null
  },
  {
    "__docId__": 378,
    "kind": "method",
    "name": "export_summary_data",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#export_summary_data",
    "access": "public",
    "description": "When called, will save aggregated trial data into a CSV.     ",
    "lineNumber": 824,
    "params": [],
    "return": null
  },
  {
    "__docId__": 379,
    "kind": "file",
    "name": "scripts/experiments/stevens/stevens_timeline.js",
    "content": "import Stevens from \"/scripts/experiments/stevens/stevens.js\";\nexport var stevens_exp = new Stevens(params);\n\nvar timeline = [];\nvar address = location.protocol + \"//\" + location.hostname + \":\" + location.port; \n\n// =========================================================\n// WELCOME TRIAL BLOCK\n\nvar welcome = {\n  type: 'html-keyboard-response',\n  stimulus: `<div align = \"center\">` + `<img src=\"${address}/img/VCL_lab_logo.png\"></img><br><br>` +\n            `<b>Base:</b> stevens` + '<br>' + \n            `<b>Trial Type:</b> ${stevens_exp.trial_structure}` + '<br>' + \n            `<b>Graph Type:</b> ${stevens_exp.graph_type}` + '<br>' + \n            `<b>Condition:</b> ${stevens_exp.condition_name}` + \n            '<br><br><br><p><font size = 15>Press any key to begin.<p></font>' +\n            '</div>',\n  data: {type: 'instruction'}\n};\ntimeline.push(welcome);\n\n// =========================================================\n// INSTRUCTION TRIAL BLOCKS\n\nswitch(stevens_exp.graph_type){\n  case \"scatter\":\n\n    if (stevens_exp.condition_group === \"distractor\" && stevens_exp.condition_name.split(\"_\")[2] === \"shades\"){\n      var instructions = {\n        type: \"html-keyboard-response\",\n        stimulus: \"<div align = 'center'> <p>In this experiment, you will be using the <b>m</b>\" +\n            \" and <b>z</b> keys to adjust the center graph <br> so that its correlation is roughly\" +\n            \" the <u>midpoint</u> between the left and right graphs. <br><br>\" +\n            \" <b>m</b> increases the correlation. <br>\" +\n            \" <b>z</b> decreases the correlation. <br><br>\" + \n            `<div style='float: left; margin-bottom: 25px;'><img src='${address}/img/stevens/distractor_shades.png'></img></div>` +\n            \"<br> <br> <br> When you are done adjusting the center graph, hit the <b>spacebar</b>.\" + \n            \"<br> Press any key to continue. </div>\"     \n      }\n    }\n    else if (stevens_exp.condition_group === \"distractor\") {\n      var instructions = {\n        type: \"html-keyboard-response\",\n        stimulus: \"<div align = 'center'> <p>In this experiment, you will be using the <b>m</b>\" +\n            \" and <b>z</b> keys to adjust the center graph <br> so that its correlation is roughly\" +\n            \" the <u>midpoint</u> between the left and right graphs. <br><br>\" +\n            \" <b>m</b> increases the correlation. <br>\" +\n            \" <b>z</b> decreases the correlation. <br><br>\" + \n            `<div style='float: left; margin-bottom: 25px;'><img src='${address}/img/stevens/distractor_square.png'></img></div>` +\n            \"<br> <br> <br> When you are done adjusting the center graph, hit the <b>spacebar</b>.\" + \n            \"<br> Press any key to continue. </div>\"     \n      }\n    } else {\n      var instructions = {\n        type: \"html-keyboard-response\",\n        stimulus: \"<div align = 'center'> <p>In this experiment, you will be using the <b>m</b>\" +\n            \" and <b>z</b> keys to adjust the center graph <br> so that its correlation is roughly\" +\n            \" the <u>midpoint</u> between the left and right graphs. <br><br>\" +\n            \" <b>m</b> increases the correlation. <br>\" +\n            \" <b>z</b> decreases the correlation. <br><br>\" + \n            `<div style='float: left; margin-bottom: 25px;'><img src='${address}/img/stevens/scatter.png'></img></div>` +\n            \"<br> <br> <br> When you are done adjusting the center graph, hit the <b>spacebar</b>.\" + \n            \"<br> Press any key to continue. </div>\"     \n       } \n    }    \n    break;\n  case \"strip\":\n    if (stevens_exp.condition_name === \"line_length_strip\") {\n      var instructions = {\n        type: \"html-keyboard-response\",\n        stimulus: \"<div align = 'center'> <p>In this experiment, you will be using the <b>m</b>\" +\n            \" and <b>z</b> keys to adjust the center graph <br> so that its correlation is roughly\" +\n            \" the <u>midpoint</u> between the left and right graphs. <br><br>\" +\n            \" <b>m</b> increases the correlation. <br>\" +\n            \" <b>z</b> decreases the correlation. <br><br>\" + \n            `<div style='float: left; margin-bottom: 25px;'><img src='${address}/img/stevens/line_length_strip.png'></img></div>` +\n            \"<br> <br> <br> When you are done adjusting the center graph, hit the <b>spacebar</b>.\" + \n            \"<br> Press any key to continue. </div>\"      \n      }\n    } else {\n      var instructions = {\n        type: \"html-keyboard-response\",\n        stimulus: \"<div align = 'center'> <p>In this experiment, you will be using the <b>m</b>\" +\n            \" and <b>z</b> keys to adjust the center graph <br> so that its correlation is roughly\" +\n            \" the <u>midpoint</u> between the left and right graphs. <br><br>\" +\n            \" <b>m</b> increases the correlation. <br>\" +\n            \" <b>z</b> decreases the correlation. <br><br>\" + \n            `<div style='float: left; margin-bottom: 25px;'><img src='${address}/img/stevens/strip.png'></img></div>` +\n            \"<br> <br> <br> When you are done adjusting the center graph, hit the <b>spacebar</b>.\" + \n            \"<br> Press any key to continue. </div>\"      \n      }\n    }\n    break;\n  case \"ring\":  \n    var instructions = {\n      type: \"html-keyboard-response\",\n      stimulus: \"<div align = 'center'> <p>In this experiment, you will be using the <b>m</b>\" +\n          \" and <b>z</b> keys to adjust the center graph <br> so that its correlation is roughly\" +\n          \" the <u>midpoint</u> between the left and right graphs. <br><br>\" +\n          \" <b>m</b> increases the correlation. <br>\" +\n          \" <b>z</b> decreases the correlation. <br><br>\" + \n          `<div style='float: left; margin-bottom: 25px;'><img src='${address}/img/stevens/ring_strip_size.png'></img></div>` +\n          \"<br> <br> <br> When you are done adjusting the center graph, hit the <b>spacebar</b>.\" + \n          \"<br> Press any key to continue. </div>\"      \n    }\n    break;\n};\n\nvar ready = {\n  type: 'html-keyboard-response',\n  stimulus: \"<div align = 'center'> <font size = 20><p>Ready? We will first do some practice trials. <p>\" + \"<br> <br> <p><b>Press any key to begin.</b></p></font></div>\",\n  data: {type: 'instruction'}\n}\n\nvar instruction_trials = {\n  timeline: [instructions, ready]\n};\n\ntimeline.push(instruction_trials);\n\n// =========================================================\n// PRACTICE TRIAL BLOCKS\n\n// ---------------------------------------------------------\n// PRACTICE TIMELINE\n\nvar practice_trial = stevens_exp.generate_trial(\"practice\");\n\nvar practice = {\n  timeline: [practice_trial],\n  loop_function: function(data){ // Return true if timeline should continue\n                                 // Return false if timeline should end\n\n    // For debugging, if you want to exit out of experiment, press q:\n    if (jsPsych.pluginAPI.convertKeyCharacterToKeyCode('q') == data.values()[0].key_press){\n      stevens_exp.end_practice_experiment();\n      stevens_exp.round_end = false;\n      console.log(\"!!!!!!!!!! Practice trials finished \");\n      return false;\n    }\n\n    // If spacebar is pressed and we can end the round (there was at least 1 input)\n    if (32 == data.values()[0].key_press && stevens_exp.end_round()){\n\n      // Save the midpoint for exclusion criteria calculations later\n      let curr_index = stevens_exp.current_sub_condition_index;    \n      stevens_exp.practice_trial_data[curr_index].push(stevens_exp.trial_data);\n\n      // If there are still more rounds for this sub condition\n      if (!stevens_exp.end_sub_condition()){\n        console.log(\"!!!!!!!! GO TO NEXT ROUND \");\n        stevens_exp.round_end = true;\n        return true;\n      }\n      // If there are still more subconditions, increment current index\n      else if (stevens_exp.current_sub_condition_index < (stevens_exp.sub_conditions_constants.length-1)){ \n        stevens_exp.current_sub_condition_index++; \n        console.log(\"!!!!!!!!!! Moved to new sub condition at index \" \n                     + stevens_exp.current_sub_condition_index);\n        return true; \n      }\n      // Else end experiment\n      else{\n        console.log(\"!!!!!!!!!! Practice trials finished \");\n        stevens_exp.end_practice_experiment();\n        stevens_exp.round_end = false;\n\n        return false;\n      }\n    } \n    // Else continue w/ current subcondition:\n    else {\n      return true;\n    }\n\n  }\n};\n\ntimeline.push(practice);\n\n// ---------------------------------------------------------\n// STOP BLOCK\n\nvar stop = {\n  type: 'html-keyboard-response',\n  stimulus: function() {\n    let results = stevens_exp.calculate_exclusion_criteria();\n\n    return \"<div>\" + results + \"</div>\" + \n           \"<div align = 'center'> <font size = 6><p>This concludes the practice trials.<p>\" + \n           \"<p><b>Any questions?</b></p></font></div>\";\n  },\n  data: {type: 'instruction'},\n  on_start: function(stop){\n    // Reset background color to feedback\n    document.body.style.backgroundColor = 'WHITE';\n  }\n}\n\nvar ready_experiment = {\n  type: 'html-keyboard-response',\n  stimulus: \"<div align = 'center'> <font size = 20><p>Ready?<p>\" + \"<br><br><p><b>Press any key to begin.</b></p></font></div>\",\n  data: {type: 'instruction'}\n}\n\nvar stop_trials = {\n  timeline: [stop, ready_experiment]\n};\n\ntimeline.push(stop_trials);\n\n\n// =========================================================\n// EXPERIMENT TRIAL BLOCKS\n\nvar trial = stevens_exp.generate_trial(\"test\");\n\nvar experiment = {\n  timeline: [trial],\n  loop_function: function(data){ // Return true if timeline should continue\n                                 // Return false if timeline should end\n\n    // For debugging, if you want to exit out of experiment, press q:\n    if (jsPsych.pluginAPI.convertKeyCharacterToKeyCode('q') == data.values()[0].key_press){\n      return false;\n    }\n\n    // If spacebar is pressed and we can end the round (there was at least 1 input)\n    if (32 == data.values()[0].key_press && stevens_exp.end_round()){\n\n      // If there are still more rounds for this sub condition\n      if (!stevens_exp.end_sub_condition()){\n        console.log(\"!!!!!!!! GO TO NEXT ROUND \");\n        stevens_exp.round_end = true;\n        return true;\n      }\n      // If there are still more subconditions, increment current index\n      else if (stevens_exp.current_sub_condition_index < (stevens_exp.sub_conditions_constants.length-1)){ \n        stevens_exp.current_sub_condition_index++; \n        console.log(\"!!!!!!!!!! Moved to new sub condition at index \" \n                     + stevens_exp.current_sub_condition_index);\n        return true; \n      }\n      // Else end experiment\n      else{\n        return false;\n      }\n    } \n    // Else continue w/ current subcondition:\n    else {\n      return true;\n    }\n\n  }\n};\n\ntimeline.push(experiment);\n\nconsole.log(\"======================\");\n\n// =========================================================\n// DATA DOWNLOADING \n\nvar experiment_end = {\n  type: 'html-keyboard-response',\n  stimulus: '<div align = \"center\">' + \n            '<p><font size = 10>You have completed the experiment!<p></font>' +\n            '<br>' +\n            'Trial and summary data files will now automatically download locally.' + \n            '</div>' ,\n  on_start: function(){\n\n    stevens_exp.export_trial_data();\n    stevens_exp.export_summary_data();\n\n    // Reset background color to feedback\n    document.body.style.backgroundColor = 'WHITE';\n  }\n};\ntimeline.push(experiment_end);\n\n// =========================================================\n// START JSPSYCH\n\njsPsych.init({\n    timeline: timeline,\n    on_finish: function(){ \n        jsPsych.data.displayData();\n    }\n});",
    "static": true,
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/public/scripts/experiments/stevens/stevens_timeline.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 380,
    "kind": "variable",
    "name": "stevens_exp",
    "memberof": "scripts/experiments/stevens/stevens_timeline.js",
    "static": true,
    "longname": "scripts/experiments/stevens/stevens_timeline.js~stevens_exp",
    "access": "public",
    "export": true,
    "importPath": "VCL Framework/scripts/experiments/stevens/stevens_timeline.js",
    "importStyle": "{stevens_exp}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "scripts/experiments/stevens/stevens.js~Stevens"
      ]
    }
  },
  {
    "__docId__": 381,
    "kind": "variable",
    "name": "timeline",
    "memberof": "scripts/experiments/stevens/stevens_timeline.js",
    "static": true,
    "longname": "scripts/experiments/stevens/stevens_timeline.js~timeline",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/stevens/stevens_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 382,
    "kind": "variable",
    "name": "address",
    "memberof": "scripts/experiments/stevens/stevens_timeline.js",
    "static": true,
    "longname": "scripts/experiments/stevens/stevens_timeline.js~address",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/stevens/stevens_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 383,
    "kind": "variable",
    "name": "welcome",
    "memberof": "scripts/experiments/stevens/stevens_timeline.js",
    "static": true,
    "longname": "scripts/experiments/stevens/stevens_timeline.js~welcome",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/stevens/stevens_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"data\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 384,
    "kind": "variable",
    "name": "ready",
    "memberof": "scripts/experiments/stevens/stevens_timeline.js",
    "static": true,
    "longname": "scripts/experiments/stevens/stevens_timeline.js~ready",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/stevens/stevens_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"data\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 385,
    "kind": "variable",
    "name": "instruction_trials",
    "memberof": "scripts/experiments/stevens/stevens_timeline.js",
    "static": true,
    "longname": "scripts/experiments/stevens/stevens_timeline.js~instruction_trials",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/stevens/stevens_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 386,
    "kind": "variable",
    "name": "practice_trial",
    "memberof": "scripts/experiments/stevens/stevens_timeline.js",
    "static": true,
    "longname": "scripts/experiments/stevens/stevens_timeline.js~practice_trial",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/stevens/stevens_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 387,
    "kind": "variable",
    "name": "practice",
    "memberof": "scripts/experiments/stevens/stevens_timeline.js",
    "static": true,
    "longname": "scripts/experiments/stevens/stevens_timeline.js~practice",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/stevens/stevens_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *, \"loop_function\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 388,
    "kind": "variable",
    "name": "stop",
    "memberof": "scripts/experiments/stevens/stevens_timeline.js",
    "static": true,
    "longname": "scripts/experiments/stevens/stevens_timeline.js~stop",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/stevens/stevens_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 185,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"data\": *, \"on_start\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 389,
    "kind": "variable",
    "name": "ready_experiment",
    "memberof": "scripts/experiments/stevens/stevens_timeline.js",
    "static": true,
    "longname": "scripts/experiments/stevens/stevens_timeline.js~ready_experiment",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/stevens/stevens_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 201,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"data\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 390,
    "kind": "variable",
    "name": "stop_trials",
    "memberof": "scripts/experiments/stevens/stevens_timeline.js",
    "static": true,
    "longname": "scripts/experiments/stevens/stevens_timeline.js~stop_trials",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/stevens/stevens_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 207,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 391,
    "kind": "variable",
    "name": "trial",
    "memberof": "scripts/experiments/stevens/stevens_timeline.js",
    "static": true,
    "longname": "scripts/experiments/stevens/stevens_timeline.js~trial",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/stevens/stevens_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 217,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 392,
    "kind": "variable",
    "name": "experiment",
    "memberof": "scripts/experiments/stevens/stevens_timeline.js",
    "static": true,
    "longname": "scripts/experiments/stevens/stevens_timeline.js~experiment",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/stevens/stevens_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 219,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *, \"loop_function\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 393,
    "kind": "variable",
    "name": "experiment_end",
    "memberof": "scripts/experiments/stevens/stevens_timeline.js",
    "static": true,
    "longname": "scripts/experiments/stevens/stevens_timeline.js~experiment_end",
    "access": "public",
    "export": false,
    "importPath": "VCL Framework/scripts/experiments/stevens/stevens_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 265,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"on_start\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 394,
    "kind": "file",
    "name": "scripts/helpers/experiment_helpers.js",
    "content": "export {randomize_position,\n        randomize_radius_position,\n        force_greater_right_position}\n\n/** \n * Randomizes the position of the base and adjusted coordinates\n * being displayed on the left or right graphs, and returns\n * the coordinates for the graphs.\n * @param  trial {object}\n *         base_coordinates { {x_values: [], y_values: []} }  \n *         adjusted_coordinates { {x_values: [], y_values: []} }        \n *         base_correlation {double}\n *         adjusted_correlation {double}\n * @return result { {left: [coordinates], right: [coordinates]} }          \n */\nfunction randomize_position(trial, base_coordinates, adjusted_coordinates, base_correlation, adjusted_correlation){\n\n  var result = {left: [], right: [], base_is_right: true};\n\n  if (Math.random() < 0.5){\n    result.left = base_coordinates;\n    result.base_is_right = false; \n    trial.data.left_correlation = base_correlation;\n\n    result.right = adjusted_coordinates;\n    trial.data.right_correlation = adjusted_correlation;\n    }\n  else{\n    result.left = adjusted_coordinates;\n    trial.data.left_correlation = adjusted_correlation;\n\n    result.right = base_coordinates;\n    trial.data.right_correlation = base_correlation;\n  }\n\n  return result;\n}\n\nfunction randomize_radius_position(trial, base_radius, adjusted_radius) {\n\n  var result = {left: 0, right: 0, base_is_right: true};\n\n  if (Math.random() < 0.5){\n    result.left = base_radius;\n    result.base_is_right = false; \n    trial.data.left_radius = base_radius;\n\n    result.right = adjusted_radius;\n    trial.data.right_radius = adjusted_radius;\n    }\n  else{\n    result.left = adjusted_radius;\n    trial.data.left_radius = adjusted_radius;\n\n    result.right = base_radius;\n    trial.data.right_radius = base_radius;\n  }\n\n  return result;\n}\n\n/** \n * Forces the right graph to always have the greater correlation.\n * Used for testing purposes.\n *\n * @param  trial {object}\n *         base_coordinates { {x_values: [], y_values: []} }  \n *         adjusted_coordinates { {x_values: [], y_values: []} }        \n *         base_correlation {double}\n *         adjusted_correlation {double}\n * @return result { {left: [coordinates], right: [coordinates]} }          \n */\nfunction force_greater_right_position(trial, base_coordinates, adjusted_coordinates, base_correlation, adjusted_correlation){\n  var result = {left: [], right: []};\n\n  if (base_correlation > adjusted_correlation){\n    result.right = base_coordinates;\n    trial.data.right_correlation = base_correlation;\n\n    result.left = adjusted_coordinates;\n    trial.data.left_correlation = adjusted_correlation;\n  }\n  else{\n    result.right = adjusted_coordinates;\n    trial.data.right_correlation = adjusted_correlation;\n\n    result.left = base_coordinates;\n    trial.data.left_correlation = base_correlation;\n  }\n\n  return result;\n}\n",
    "static": true,
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/public/scripts/helpers/experiment_helpers.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 395,
    "kind": "function",
    "name": "randomize_position",
    "memberof": "scripts/helpers/experiment_helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/helpers/experiment_helpers.js~randomize_position",
    "access": "public",
    "export": true,
    "importPath": "VCL Framework/scripts/helpers/experiment_helpers.js",
    "importStyle": "{randomize_position}",
    "description": "Randomizes the position of the base and adjusted coordinates\nbeing displayed on the left or right graphs, and returns\nthe coordinates for the graphs.",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "trial",
        "description": "{object}\n        base_coordinates { {x_values: [], y_values: []} }  \n        adjusted_coordinates { {x_values: [], y_values: []} }        \n        base_correlation {double}\n        adjusted_correlation {double}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "result { {left: [coordinates], right: [coordinates]} }"
    }
  },
  {
    "__docId__": 396,
    "kind": "function",
    "name": "randomize_radius_position",
    "memberof": "scripts/helpers/experiment_helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/helpers/experiment_helpers.js~randomize_radius_position",
    "access": "public",
    "export": true,
    "importPath": "VCL Framework/scripts/helpers/experiment_helpers.js",
    "importStyle": "{randomize_radius_position}",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [
      {
        "name": "trial",
        "types": [
          "*"
        ]
      },
      {
        "name": "base_radius",
        "types": [
          "*"
        ]
      },
      {
        "name": "adjusted_radius",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 397,
    "kind": "function",
    "name": "force_greater_right_position",
    "memberof": "scripts/helpers/experiment_helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/helpers/experiment_helpers.js~force_greater_right_position",
    "access": "public",
    "export": true,
    "importPath": "VCL Framework/scripts/helpers/experiment_helpers.js",
    "importStyle": "{force_greater_right_position}",
    "description": "Forces the right graph to always have the greater correlation.\nUsed for testing purposes.",
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "trial",
        "description": "{object}\n        base_coordinates { {x_values: [], y_values: []} }  \n        adjusted_coordinates { {x_values: [], y_values: []} }        \n        base_correlation {double}\n        adjusted_correlation {double}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "result { {left: [coordinates], right: [coordinates]} }"
    }
  },
  {
    "kind": "index",
    "content": "# VCL Web Framework\n\nThis is a Node.js application that serves as the modernization of the original VCL Java Framework.\n\n## Set Up\n\n#### (1) Git clone the repository\n#### (2) Install Node\n\nVisit the following link to download Node: [here.](https://nodejs.org/en/)\n\n#### (3) Install Dependencies\n\nNavigate into the folder:\n```\ncd VCL-Web-Framework\n```\nThen run:\n```\nnpm install\n```\n\n#### (4) Run the Application\n\n```\nnode app.js\n```\n\nOr alternatively, with nodemon:\n\n```\nnodemon app.js\n```\n\nThe app is available at [localhost:8080](localhost:8080). If you want to access it at a different port, change the port number in app.js (line 57).\n",
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"VCL Framework\",\n  \"version\": \"1.0.0\",\n  \"description\": \"This is a Node.js application that runs proof of concept experiments for the following:\",\n  \"main\": \"app.js\",\n  \"dependencies\": {\n    \"@babel/core\": \"^7.1.2\",\n    \"@babel/preset-env\": \"^7.1.0\",\n    \"@babel/preset-react\": \"^7.0.0\",\n    \"babel-loader\": \"^8.0.4\",\n    \"body-parser\": \"^1.18.3\",\n    \"d3\": \"^5.7.0\",\n    \"ejs\": \"^2.6.1\",\n    \"esdoc-inject-script-plugin\": \"^1.0.0\",\n    \"esdoc-inject-style-plugin\": \"^1.0.0\",\n    \"esdoc-integrate-manual-plugin\": \"^1.0.0\",\n    \"express\": \"^4.16.4\",\n    \"gaussian\": \"^1.1.0\",\n    \"html-webpack-plugin\": \"^3.2.0\",\n    \"latin-square\": \"^2.0.4\",\n    \"nodemon\": \"^1.18.4\",\n    \"react\": \"^16.5.2\",\n    \"react-dom\": \"^16.5.2\",\n    \"webpack\": \"^4.20.2\",\n    \"webpack-cli\": \"^3.1.2\",\n    \"webpack-dev-middleware\": \"^3.4.0\",\n    \"webpack-hot-middleware\": \"^2.24.3\"\n  },\n  \"devDependencies\": {\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\"\n  },\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/coyiutoc/VCL_Correlation_POC.git\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/coyiutoc/VCL_Correlation_POC/issues\"\n  },\n  \"homepage\": \"https://github.com/coyiutoc/VCL_Correlation_POC#readme\"\n}\n",
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "globalIndex": true,
    "content": "# VCL Web Framework\n\nThis is a Node.js application that serves as the modernization of the original VCL Java Framework.\n\n## Set Up\n\n#### (1) Git clone the repository\n#### (2) Install Node\n\nVisit the following link to download Node: [here.](https://nodejs.org/en/)\n\n#### (3) Install Dependencies\n\nNavigate into the folder:\n```\ncd VCL-Web-Framework\n```\nThen run:\n```\nnpm install\n```\n\n#### (4) Run the Application\n\n```\nnode app.js\n```\n\nOr alternatively, with nodemon:\n\n```\nnodemon app.js\n```\n\nThe app is available at [localhost:8080](localhost:8080). If you want to access it at a different port, change the port number in app.js (line 57).\n",
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/README.md",
    "name": "README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/README.md",
    "name": "README.md",
    "content": "# VCL Web Framework\n\nThis is a Node.js application that serves as the modernization of the original VCL Java Framework.\n\n## Set Up\n\n#### (1) Git clone the repository\n#### (2) Install Node\n\nVisit the following link to download Node: [here.](https://nodejs.org/en/)\n\n#### (3) Install Dependencies\n\nNavigate into the folder:\n```\ncd VCL-Web-Framework\n```\nThen run:\n```\nnpm install\n```\n\n#### (4) Run the Application\n\n```\nnode app.js\n```\n\nOr alternatively, with nodemon:\n\n```\nnodemon app.js\n```\n\nThe app is available at [localhost:8080](localhost:8080). If you want to access it at a different port, change the port number in app.js (line 57).\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/docs/manual/pages/terminology.md",
    "name": "./docs/manual/pages/terminology.md",
    "content": "# Terminology\n\nBelow is common terminology the lab uses when describing experiments.\n\n## Describing an Experiment\n\nEvery experiment has the following:\n\n- **Experiment** : the type of task to be performed.\n- **Condition** : dictated by the task, the method(s) used, and the stimuli type.\n- **Subcondition** : a set of stable constants.\n- **Trial** : marked by the user making a meaningful response/input that is purposely recorded.\n  - E.g. I am trying to adjust the correlation of a specific plot to be the midpoint between a plot with a high correlation, and a plot with a lower correlation. The final correlation that I have adjusted marks the relevant trial data to be saved.\n- **Action** : the actions a user can make within a trial.\n  - E.g. In the above trial example, I can be taking actions to increase or decrease my correlation.\n\n### **Task**\nThe decision task defined in terms of the stimuli and question posed.\n- **Detection** : \"there may be any number of alternative stimuli, but one is blank, and the observer is asked only to distinguish between the blank and the other stimuli.\"\n- **Discrimination** : \"there are any number of alternative stimuli, but one of the stimuli (which need not be blank), is designated as the reference, and the observer is asked only to distinguish between the reference and other stimuli.\"\n\n### **Method** \n- **Forced Choice** : \"traditionally characterized by two separate stimulus presentations, one blank and one nonblank, in random order. The two stimuli may be presented successively or side by side. The observer is asked whether the nonblank stimulus was first or second (or on the left or right).\"\n- **Matching** : \"two stimuli are presented, and the observer is asked to adjust one to match the other.\"\n- **Staircase** : \"for difference thresholds, a variable stimulus is adjusted to increase its absolute difference from a standard stimulus whenever the difference is not discriminated or is adjusted to decrease its absolute difference from the standard stimulus whenever the difference is discriminated.\"\n   - _**E.g.**_ We have two scatter plots side by side. Let us say plot A has r = 0.5 and plot B has r = 0.8. The task is to pick the plot with the higher correlation.\n     - _You correctly pick plot B:_ So the next trial will be harder, in that the correlations of the two plots are now closer together. For example, plot A would have r = 0.5 and plot B would have r = 0.7.  \n     - _You incorrectly pick plot A:_ So the next trial will be easier, in that the correlations of the two plots are now wider apart. For example, plot A would have r = 0.5 and plot B would have r = 0.9.\n\n### **Properties** \n- **Balancing** : the ways in which the subconditions for a given condition are ordered.\n   - Random\n   - Latin-Square\n- **Graph Type** : e.g. scatter plots, ring plots, strip plots, shapes \n- **Graphical Manipulation**: \n  - May be on how the points are plotted e.g. for strip plots, a y coordinate defines the horizontal translation of the \"strip\" and x coordinate defines the height of the \"strip\".\n  - May be in terms of how many distributions are plotted on the same graph e.g. on the same axes, we can have TWO scatter plots with different correlations.\n\n\n---\nDefinitions adapted from:\n\n_D. G., & Farell, B. (lOlD). Psychophysical methods. In M. Bass, C. DeCusatis. J. Enoch, V. Lakshmit1arayanan. G. U, C. MacDonald, V. Mahajan & E. V. Stryland (Eds,), Handbook 01 Optics. Third Edition, VDlume III: Visioo and Vision Optics (w. 3.1-3.12). New Yori<: McGraw+liR. http:// psych.nyu,edu/pelilpubslpelIi20 IOpsychophysical-methods,pdt_\n\n\n## Condition Identifiers\n\nEach condition is uniquely defined by 4 properties.\n\n### **Base Experiment**\n\nDefines the underlying procedural logic of the experiment.\n\n- JND\n- Stevens\n- Equalizer\n- Estimation\n\n### **Trial Structure**\n\nThe trial structure represents the range or pattern of correlation values, and defines a set of constants for each subcondition. Each condition can follow these pattern of values, or use it's own custom structure.\n\nThe two main types of patterns are Design or Foundational.\n\n- Foundational : 17 subconditions, base correlation is in the range of [0.0, 0.9] in 0.1 increments.\n- Design       : 15 subconditions, grouped into five sets with base correlation values set at 0.3, 0.6, 0.9.\n- Estimation\n- Custom       : used when a condition does not follow any of the above structures.\n\n### **Balancing**\n\nHow subconditions in a given condition get ordered.\n\n- Randomized\n- Latin Square\n\n### **Graph Types**\n\nThe type of graph used in the visualization.\n\n- Scatter\n- Strip\n- Ring\n- Shapes\n\n### **Attributes**\n\nAny given condition will always have a base, trial structure, balancing and graph type. However, they will also have a set of variables that manipulate different aspects of the distribution, graphical properties of the visualization, and non-graphical properties such as having a custom instruction set. \n\nHere is a non-comprehensive list of properties that could be manipulated by a condition.\n\n* Experimental attributes:\n  * Distribution type\n  * Base correlation of the reference plot\n  * Whether the correlation converges from above or below\n  * Complete list of experimental attributes [here](/VCL-Web-Framework/manual/supported_properties.html#experimental-attributes)\n* Graphical attributes: \n   * Some examples if `plot type = scatter`:\n      * Point shape\n      * Point color\n      * Point size\n   * Some examples if `plot type = strip`:\n      * Line length\n      * Line width\n   * Complete list of graphical attributes [here](/VCL-Web-Framework/manual/supported_properties.html#experimental-attributes)   \n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/docs/manual/pages/architecture.md",
    "name": "./docs/manual/pages/architecture.md",
    "content": "# Architecture\n\nThe framework runs on a web-based stack, using JsPsych for experimental logic support and D3 for visualization.\n\n## Stack\n\n- Javascript\n- Node.js\n- Express.js\n- JsPsych\n- D3.js\n- ESDoc (for documentation)\n\n## Structure\n\nBelow is a very high-level overview of the entire structure. Basically:\n\n1. `conditions.js` feeds into the index to generate the UI, and send the correct identifiers for that condition.\n2. Upon user input on UI, we do a GET request to obtain the correct HTML based on `base experiment`. \n3. The experiment HTML is linked to an **experiment timeline** and **model singleton class**. \n  - The timeline uses JsPsych, which helps order the presentation of what is displayed to the user.\n  - The singleton class extracts the right data, balances subconditions, does any calculations necessary on a trial-by-trial basis, and sends what needs to be presented to the timeline and to the `trial HTML`, which displays all trial presentations.\n4. Experimental properties, such as graphing, constants used, balancing, or the type of distribution, are fed into the singleton or into the trial HTML (since it is doing the displaying).\n\n![image of architecture](/VCL-Web-Framework/manual/img/architecture.png)\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/docs/manual/pages/experiments.md",
    "name": "./docs/manual/pages/experiments.md",
    "content": "# Experiments\n\nThese are the following experiments supported by our framework. The table lists the values for the different identifiers used.\n\nFor the Madison's multiple ensemble experiments from December 2018, it is in the repo [here](https://github.com/Wongelawit/Correlation_MultipleEnsemble) - you need to pull the `Numerosity-Task` and `visualSearch` branches independently. (So the experiments are **NOT** on master.)\n\nLook [here](/VCL-Web-Framework/manual/terminology.html#condition-identifiers) to understand what identifiers are.\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/docs/manual/pages/jnd.md",
    "name": "./docs/manual/pages/jnd.md",
    "content": "# >> JND\n\n- **Task**: Discrimination\n- **Method**: Forced choice with Staircase\n\n## Specifications\n\n**_**Note that all CAPPED variables are constants taken from the excel sheets/data file.**_**\n\n- For a given subcondition, there are at minimum 24 trials and at maximum 52. Once a user has reached the 24th trial, we start computing for convergence by calculating an F-value to see if it is lower than the threshold. \n  - If the F-value is < `(1-CONVERGENCE_THRESHOLD)`, then the current subcondition ends, and proceeds to the next subcondition.\n  - If the F-value is >= `(1-CONVERGENCE_THRESHOLD)`, then the trials continue.\n\n### Practice Procedure\n\n- We choose 4 subconditions randomly, and let the participant run through those. It otherwise follows the same procedure like the test detailed below.\n\n### Test Procedure\n- For a given subcondition's trial:\n  - The BASE_CORRELATION for that subcondition will be used to calculate the distribution of one plot, but we need to calculate the adjusted correlation on a trial-by-trial basis.\n    - _At the first presentation of a trial_, there is a need to compute the adjusted correlation. \n      - If converging from above, we calculate it by: `Math.min(MAX_CORRELATION, BASE_CORRELATION + INITIAL_DIFFERENCE)`\n      - If converging from below, we calculate it by: `Math.max(MAX_CORRELATION, BASE_CORRELATION - INITIAL_DIFFERENCE)`\n    - _If this is NOT the first presentation of a trial_, then use the **staircase method** to calculate the adjusted correlation. \n      - If converging from above:\n        - If the **previous** trial was correct, adjusted correlation = `Math.max(INITIAL_DIFFERENCE, previous adjusted correlation - MAX_STEP_SIZE)`\n        - If the **previous** trial was incorrect, adjusted correlation = `Math.min(MAX_CORRELATION, previous adjusted correlation + MAX_STEP_SIZE * INCORRECT_MULTIPLIER)`\n      - If converging from below:\n        - If the **previous** trial was correct, adjusted correlation = `Math.min(INITIAL_DIFFERENCE, previous adjusted correlation + MAX_STEP_SIZE)`\n        - If the **previous** trial was incorrect, adjusted correlation = `Math.max(MIN_CORRELATION, previous adjusted correlation - MAX_STEP_SIZE * INCORRECT_MULTIPLIER)`\n   - Generate a gaussian distribution using the BASE_CORRELATION and adjusted correlation.\n   - Plot each distribution onto a separate plot, and randomize whether the right/left plots get the base or adjusted correlation. The manner in which the distribution is plotted varies depending on the type of plot. For example:\n       - For a conventional strip, the x coordinate defines the horizontal translation while the y coordinate determines the height of the \"strip\".\n       - For a conventional ring, the x coordinate defines the horizontal translation while the y coordinate determines the radius of the \"ring\".\n   - A user can make keyboard inputs with the \"z\" or \"m\" keys. \"z\" corresponds to the left graph, \"m\" corresponds to the right graph.\n\n## JsPsych Timeline\n### General Timeline\n\n```\n- Display instructions\n- Ready screen\n- Display JND practice trials {\n    For a given JND experiment, continue to display trials if: \n    - There are still more practice subconditions\n  }  \n- Stop screen\n- Ready screen\n- Display JND test trials {\n    For a given JND experiment, continue to display trials if: \n    - There are still more test subconditions\n  }  \n- Stop screen with data download options\n```\n\n### Trial Logic\n\nWithin the trial object, all computations for distributions and constants are performed in the `on_start()` function. This means that prior to a trial executing, we perform ALL operations detailed in this function. This trial object can be found on line 120 in `scripts/experiments/jnd.js`. \n\nIn general, this is what is executed:\n```javascript\non_start: function(){\n\n  // Retrieve the constants (i.e variables listed in the section below) for the given subcondition index i\n  var constants = get_constants_for_subcondition(i); \n  \n  // Calculate adjusted correlation\n  // (Refer to next section for pseudocode of this function)\n  var adjusted_correlation = calculate_adjusted_correlation(constants);\n\n  // Save all relevant constants of this trial to the JsPsych data object\n  handle_data_saving(constants); \n\n  var base_coordinates = generate_distribution(constants.BASE_CORRELATION, \n                                               constants.ERROR, \n                                               constants.NUM_POINTS, \n                                               constants.NUM_SD, \n                                               constants.MEAN,\n                                               constants.SD);\n\n  var adjusted_coordinates = generate_distribution(adjusted_correlation, \n                                               constants.ERROR, \n                                               constants.NUM_POINTS, \n                                               constants.NUM_SD, \n                                               constants.MEAN,\n                                               constants.SD);\n\n  // Randomize position of the base/adjusted correlations to be either left/right\n  // and keep these positions constant for a given subcondition\n  var result = randomize_position(base_coordinates, adjusted_coordinates);\n  \n  // Set these correlations to the global D3 variables used for plotting\n  left_coordinates = result.left;\n  right_coordinates = result.right; \n\n} \n```\n\n### Adjusted Correlation\nBelow is the pseudocode for how the adjusted correlation value is generated for a given trial. \n\n```javascript\n\nvar MIN_CORRELATION = 0.0;\nvar MAX_CORRELATION = 1.0;\nvar INCORRECT_MULTIPLIER = 3;\n\nfunction calculate_adjusted_correlation(constants){\n  \n   // If first trial, compute solely using constants:\n   if (this_is_the_first_trial()){\n      var adjusted_correlation = initialize_adjusted_statistic(constants.CONVERGE_FROM_ABOVE,\n                                                               constants.BASE_CORRELATION, \n                                                               constants.INITIAL_DIFFERENCE);\n   }\n   // If not first trial, data from previous trial is needed:\n   else{\n     var last_JND_trial = get_data_from_last_trial();\n\n     var adjusted_correlation = get_next_adjusted_statistic(last_JND_trial.correct,\n                                                            constants.CONVERGE_FROM_ABOVE,\n                                                            last_JND_trial.adjusted_correlation,\n                                                            constants.BASE_CORRELATION,\n                                                            constants.MAX_STEP_SIZE);\n   }\n   return adjusted_correlation;\n}\n\nfunction initialize_adjusted_statistic(converge_from_above, base_correlation, initial_difference){\n\n  var adjusted_correlation;\n\n  if (converge_from_above){\n    adjusted_correlation = Math.min(MAX_CORRELATION, base_correlation + initial_difference); }\n  else{\n    adjusted_correlation = Math.max(MIN_CORRELATION, base_correlation - initial_difference);\n  };\n\n  return adjusted_correlation;\n}\n\nfunction get_next_adjusted_statistic(correct, converge_from_above, adjusted_quantity, base_correlation, max_step_size){\n\n  var next_adjusted_statistic;\n\n  var initial_difference = base_correlation;\n\n  if (converge_from_above) {\n    if (correct) {\n      next_adjusted_statistic = Math.max(initial_difference, adjusted_quantity - max_step_size);\n    } else {\n      next_adjusted_statistic = Math.min(MAX_CORRELATION, adjusted_quantity + max_step_size\n                                * INCORRECT_MULTIPLIER);\n    }\n  } else {\n    if (correct) {\n      next_adjusted_statistic = Math.min(initial_difference, adjusted_quantity + max_step_size);\n    } else {\n      next_adjusted_statistic = Math.max(MIN_CORRELATION, adjusted_quantity - max_step_size\n                                * INCORRECT_MULTIPLIER);\n    }\n  }\n\n  return next_adjusted_statistic;\n}\n```\n\n### Constants\nThese are the constants extracted from the input excel sheets. The values of these constants differ for each sub condition.\n\n- BASE_CORRELATION\n- ERROR\n- MAX_STEP_SIZE\n- CONVERGE_FROM_ABOVE\n- INITIAL_DIFFERENCE\n- NUM_POINTS\n- MEAN\n- SD\n- NUM_SD\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/docs/manual/pages/jnd_radius.md",
    "name": "./docs/manual/pages/jnd_radius.md",
    "content": "# >> JND Radius\n\n- **Task**: Discrimination\n- **Method**: Forced choice with Staircase\n\n## Specifications\n\n**_**Note that all CAPPED variables are constants taken from the excel sheets/data file.**_**\n\n- For a given subcondition, there are at minimum 24 trials and at maximum 52. Once a user has reached the 24th trial, we start computing for convergence by calculating an F-value to see if it is lower than the threshold. \n  - If the F-value is < `(1-CONVERGENCE_THRESHOLD)`, then the current subcondition ends, and proceeds to the next subcondition.\n  - If the F-value is >= `(1-CONVERGENCE_THRESHOLD)`, then the trials continue.\n\n### Test Procedure\n- For a given subcondition's trial:\n  - The BASE_RADIUS for that subcondition will be used to calculate the distribution of one plot, but we need to calculate the adjusted radius on a trial-by-trial basis.\n    - _At the first presentation of a trial_, there is a need to compute the adjusted radius. \n      - If converging from above, we calculate it by: `BASE_RADIUS + INITIAL_DIFFERENCE`\n      - If converging from below, we calculate it by: `BASE_RADIUS - INITIAL_DIFFERENCE`\n    - _If this is NOT the first presentation of a trial_, then use the **staircase method** to calculate the adjusted radius. \n      - If converging from above:\n        - If the **previous** trial was correct, adjusted radius = `previous adjusted radius - 0.002`\n        - If the **previous** trial was incorrect, adjusted correlation = `previous adjusted radius + 0.006`\n      - If converging from below:\n        - If the **previous** trial was correct, adjusted correlation = `previous adjusted radius + 0.002`\n        - If the **previous** trial was incorrect, adjusted correlation = `previous adjusted radius - 0.006`\n   - Generate the shape using the BASE_RADIUS and adjusted radius.\n   - Plot each shape side by side, and randomize whether the right/left areas get the base or adjusted shapes.\n   - A user can make keyboard inputs with the \"z\" or \"m\" keys. \"z\" corresponds to the left graph, \"m\" corresponds to the right graph.\n\n### Constants\nThese are the constants extracted from the input excel sheets. The values of these constants differ for each sub condition.\n\n- BASE_RADIUS\n- CONVERGE_FROM_ABOVE\n- INITIAL_DIFFERENCE\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/docs/manual/pages/stevens.md",
    "name": "./docs/manual/pages/stevens.md",
    "content": "# >> Stevens\n\n- **Task**: Discrimination\n- **Method**: Estimation w/ Bisection\n\n## Specifications\n\n**_**Note that all CAPPED variables are constants taken from the excel sheets/data file.**_**\n\n### Practice Procedure\n\n- We choose the first **4** subconditions of the data constants (prior to any balancing being done on the subconditions). It otherwise follows the same procedure like the test detailed below.\n- Exclusion criteria is calculated during the practice procedure. 2 values are calculated at the end of every subcondition, then stored to be displayed to the researcher who will then determine whether the participant should be excluded or not. \n  - We calculate standard deviation using the estimated correlations at the end of a trial (e.g. the value when the user hits space bar).\n  - To calculate anchoring, summate the final estimated correlation values for when the trial started with the LOW_REF for the middle plot, and the values for when the trial started with the HIGH_REF for the middle plot. So there would be 2 values for when the user started on LOW_REF, and 2 values for when the user started on HIGH_REF. Then take the absolute difference between these 2 sums.\n    - `anchoring_value = Math.abs(high_ref_trial_sum - low_ref_trial_sum)`\n  - So essentially, there will be 4 sets of anchoring and standard deviation values. \n  - A subcondition is flagged if the anchoring value > 0.5 or if the standard deviation is > 0.2. \n\n### Test Procedure\n- A subcondition's structure is \"nested\" in a sense, in which the user has **4** tries (TRIALS_PER_ROUND) to set the middle graph to be the midpoint between the two other plots. \n  - For example: let us say a subcondition is defined to have a high correlation (HIGH_REF) of 1.0 and a low correlation (LOW_REF) of 0. These are the R values for the two comparison plots. However, the starting value for the middle plot (the one that participants adjust) will alternate between starting off as the HIGH_REF or LOW_REF.\n     - Trial 1: middle graph's starting correlation = LOW_REF\n     - Trial 2: middle graph's starting correlation = HIGH_REF\n     - Trial 3: middle graph's starting correlation = LOW_REF\n     - Trial 4: middle graph's starting correlation = HIGH_REF\n  - A trial is defined as a series of presentations using the HIGH_REF and LOW_REF values, in which the position of the HIGH_REF and LOW_REF distributions are constant (e.g. in Round 1: right graph = HIGH_REF, left graph = LOW_REF). The positioning of whether the left/right plots get which distribution is random **across** trials, but **consistent** within a trial. So Round 2 might have the right graph = LOW_REF and left graph = HIGH_REF instead.\n     - Within a given trial, the user can use the \"z\" or \"m\" keys to decrease or increase respectively the correlation of the middle graph. Once the user believes that their middle correlation is a midpoint between the two straddling graphs, they hit _spacebar_ to lock in their answer. So this process happens 4 times, with (a) the middle graph alternating between taking the LOW or HIGH_REF, and (b) the straddling graphs randomizing in position in terms of whether the left or right get the HIGH and LOW_REF correlations.\n   - To calculate the estimated correlation with respect to the key press (e.g. they want to increase or decrease the correlation), the following formulas apply:\n     - `step_size = (HIGH_REF - LOW_REF) / MAX_STEP_INTERVAL`\n     - If increasing the correlation, `estimated_correlation = Math.min(HIGH_REF, last trial's estimated correlation + (Math.random() * step_size)`\n     - If decreasing the correlation, `estimated_correlation = Math.max(LOW_REF, last trial's estimated correlation - (Math.random() * step_size)`\n   - Within a given trial, all the distributions will **refresh** (e.g. new distributions will be generated using the HIGH_REF, LOW_REF and estimated correlation values) with a refresh rate defined by REGEN_RATE. \n- Distributions used are gaussian. The manner in which the distribution is plotted varies depending on the type of plot. For example:\n   - For a conventional strip, the x coordinate defines the horizontal translation while the y coordinate determines the height of the \"strip\".\n   - For a conventional ring, the x coordinate defines the horizontal translation while the y coordinate determines the radius of the \"ring\".\n\n## JsPsych Timeline\n```\n- Display instructions\n- Ready screen\n- Display Stevens practice trials {\n    For a given Stevens experiment, continue to display trials if: \n    - The person has inputted less than the value of TRIALS_PER_ROUND for a given subcondition, or, \n    - There are still more subconditions to show, or\n    - The person's performance has not passed the exclusion criteria\n  }  \n- Stop screen\n- Ready screen\n- Display Stevens test trials {\n    For a given Stevens experiment, continue to display trials if: \n    - The person has inputted less than the value of TRIALS_PER_ROUND for a given subcondition, or, \n    - There are still more subconditions to show\n  }  \n- Stop screen with data download options\n```\n\n### Trial Logic\n\nWithin the trial object, all computations for distributions and constants are performed in the `on_start()` function. This means that prior to a trial executing, we perform ALL operations detailed in this function. This trial object can be found on line 123 in `scripts/experiments/stevens.js`. \n\nIn general, this is what is executed:\n```javascript\non_start: function(){\n\n  // Retrieve the constants (i.e variables listed in the section below) for the given subcondition index i\n  var constants = get_constants_for_subcondition(i); \n  \n  // Save all relevant constants of this trial to the JsPsych data object\n  handle_data_saving(constants); \n\n  // Update the estimated correlation\n  // (Refer to next section for pseudocode of this function)\n  var estimated_correlation = update_estimated_correlation(this.trial, constants, last_trial); \n\n  // Generate the gaussian distributions\n  var high_coordinates = generate_distribution(constants.HIGH_REF, \n                                               constants.ERROR, \n                                               constants.NUM_POINTS, \n                                               constants.NUM_SD, \n                                               constants.MEAN,\n                                               constants.SD);\n\n  var high_coordinates = generate_distribution(constants.LOW_REF, \n                                               constants.ERROR, \n                                               constants.NUM_POINTS, \n                                               constants.NUM_SD, \n                                               constants.MEAN,\n                                               constants.SD);\n\n  var estimated_coordinates = generate_distribution(estimated_correlation, \n                                               constants.ERROR, \n                                               constants.NUM_POINTS, \n                                               constants.NUM_SD, \n                                               constants.MEAN,\n                                               constants.SD);\n\n  // Randomize position of the low/high correlations to be either left/right\n  // and keep these positions constant for a given subcondition\n  if (is_last_trial_of_subcondition(i)){\n    var result = randomize_position(high_coordinates, low_coordinates);\n  }\n  \n  // Set these correlations to the global D3 variables used for plotting\n  left_coordinates = result.left;\n  right_coordinates = result.right; \n  middle_coordinates = estimated_coordinates;\n\n} \n```\n\n### Estimated Correlation\nBelow is the pseudocode for how the estimated correlation value is generated for a given trial. \n\n```javascript\nvar MAX_STEP_INTERVAL = 10;\n\nfunction update_estimated_correlation(trial, constants, last_trial){\n\n  var estimated_correlation;\n\n  // If this is the first trial, we need to initialize the middle correlation value\n  if (this_is_the_first_trial()){\n    estimated_correlation = Math.random() < 0.5 ? constants.LOW_REF : constants.HIGH_REF;\n    trial.data.step_size = (constants.HIGH_REF - constants.LOW_REF) / MAX_STEP_INTERVAL;\n  }\n\n  // If there was a key press in the last value, we set this current trial's middle correlation value\n  // to be based on that input\n  else if (last_trial.key_press != null && last_trial.key_press.is_valid_value){\n    if (last_trial.key_press == UP_VALUE){\n      estimated_correlation = Math.min(constants.HIGH_REF, last_trial.estimated_correlation + (Math.random() * \n      last_trial.step_size));\n    }\n    else if (last_trial.key_press == DOWN_VALUE){\n      estimated_correlation = Math.max(constants.LOW_REF, last_trial.estimated_correlation - (Math.random() * \n      last_trial.step_size));\n    }\n  }\n\n  // If there was no input in the last trial\n  else {\n    estimated_correlation = last_trial.estimated_correlation;\n  }\n\n  return estimated_correlation;\n}\n```\n\n### Constants\nThese are the constants extracted from the input excel sheets. The values of these constants differ for each sub condition.\n\n- DISTRIBUTION_TYPE\n- ROUND_TYPE\n- TRIALS_PER_ROUND\n- HIGH_REF\n- LOW_REF\n- ERROR\n- NUM_POINTS\n- POINT_SIZE\n- POINT_COLOR\n- BACKGROUND_COLOR\n- TEXT_COLOR\n- AXIS_COLOR\n- REGEN_RATE\n- MEAN\n- SD\n- NUM_SD",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/docs/manual/pages/estimation.md",
    "name": "./docs/manual/pages/estimation.md",
    "content": "# >> Estimation\n\n- **Task**: Discrimination\n- **Method**: Estimation w/ Bisection\n\n## Specifications\n\n* This task presents 2 shapes side by side. One shape is the reference shape, while the other is the modifiable shape, in which the user can increase or decrease the size of the shape (by pressing the M or Z keys). The goal is that the user will adjust the size of the modifiable shape so that it is as equal as possible to the reference shape's area. \n* Subconditions:\n  * 3 types of shapes - circle, square, or triangle\n    * So there are 3 x 3 = 9 different permutations of paired shapes (e.g. circle-circle, circle-square, circle-triangle etc.) - duplicates (3) = 6 permutations\n  * 3 sizes that the reference shape can start on - 2cm, 4cm or 6 cm\n  * 2 ways the modifiable shape can \"start\" on e.g. they can be either _smaller_ or _larger_ in size than the reference shape\n    * For 2cm reference shape, low = 1.2, high = 3\n    * For 4cm reference shape, low = 3.1, high = 5.3\n    * For 6cm reference shape, low = 5.0, high = 6.5\n  * **Total number of subconditions** = 6 [permutation of pairs] x 3 [possible reference sizes] = 18 subconditions\n* Randomize the order of the 18 subconditions.\n* On a given subcondition:\n  * The reference and modifiable shape positions can be either left or right (randomized). So before a subcondition starts, there will be text like \"Adjust the shape on the _left/right_ so that its size equals that of the other shape.\"\n  * For a given subcondition, there are 4 trials. In each trial, the user basically has to make the modifiable shape the same as the reference shape. On a given trial:\n     * For trials 1 and 3, the modifiable shape's size will start on the low value as specified above (e.g. if 2cm is the reference shape, then modifiable shape's size is 1.2)\n     * For trials 2 and 4, the modifiable shape's size will start on the high value as specified above.\n     * The y position of the shapes relative to each other should be slightly jittered (e.g. if have a circle and square, the circle is not completely aligned with the square, so could be a few pixels higher or lower etc.) - the degree of jitter can be randomized.\n     * The user can press the z [make shape bigger] or m [make shape smaller] keys.\n        * The step size of the adjustment will be randomized (so not constant).\n     * They can adjust for an unlimited amount of times.\n     * Once satisfied, they hit space bar, which then records the size of their modified shape.\n     * This happens 3 more times (for the same subcondition).\n  * After the 4 trials for a given subcondition, experiment then moves to the next subcondition.\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/docs/manual/pages/supported_properties.md",
    "name": "./docs/manual/pages/supported_properties.md",
    "content": "# Supported Properties\n\n## Identifiers\n\nBelow are all the supported values for each of the four identifiers. \n\n### Base Experiment\n\n### Trial Structure\n\n### Balancing\n\n### Graph Types\n\n## Subcondition Attributes\n\nBelow are each of the attributes used to define a subcondition. For experimental attributes, some attributes \nMUST be defined depending on the experiment. Usually, if you are adding a new condition that uses a pre-existing trial structure, the base subconditions from the trial structure already define all these attributes.\n\nDepending on the graph type of the condition, certain graphical attributes can be customized. They will default \nto a specific value if they are not defined in your new condition.\n\n### Experimental Attributes\n\n### Graphical Attributes\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/docs/manual/pages/conditions.md",
    "name": "./docs/manual/pages/conditions.md",
    "content": "# Conditions\n\nBelow is a list of all supported conditions in the framework organized by experiment.\n\n** 1/2/2019 - Madison's Visual Search + Numerosity experiments from December 2018 can be found [here.](https://github.com/Wongelawit/Correlation_MultipleEnsemble/tree/Numerosity-Task)",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/docs/manual/pages/developing_new_conditions.md",
    "name": "./docs/manual/pages/developing_new_conditions.md",
    "content": "# Developing New Conditions\n\n## For Researchers\n\nIf you are planning to add a new condition that uses the base experiments already supported, please provide the following information.\n\nTo see what identifiers are supported, refer to the page [here](/VCL-Web-Framework/manual/developing_new_conditions.html/supported_properties.html#subcondition-attributes).\n\n- **Condition Name**\n- **High-Level Description of Condition**\n- **Identifiers**\n  - **Base Experiment**\n  - **Trial Structure**\n  - **Balancing**\n  - **Graph Type**\n- **Subconditions**\n  - **How many subconditions?**\n  - **What is changing on each subcondition? List all variables.**\n  - **How are each of the variables being changed? List all equations/computations needed if changing on a trial-by-trial basis.**\n\n### Example\n\nLet us say you want to make a new condition for a JND Design experiment that changes point size on each grouping of the Design trial structure. This is what your information would look like:\n\n- **Condition Name**: small_point_sizes\n- **High-Level Description of Condition**: Standard JND scatter plot condition, except point sizes vary between 5 - 13 pixels for each 0.3, 0.6, 0.9 base correlation grouping.\n- **Identifiers**\n  - **Base Experiment**: JND\n  - **Trial Structure**: Design\n  - **Balancing**: Latin Square\n  - **Graph Type**: Scatter\n- **Subconditions**\n  - **How many subconditions?**: 15\n  - **What is changing on each subcondition? List all variables.**: Point size\n  - **How are each of the variables being changed on each subcondition? List all equations/computations needed if changing on trial-by-trial basis.**: The design trial structure has 5 groupings of the base_correlation = 0.3, 0.6, 0.9, making 15 total subconditions. For each group, point size is different.\n     - Group 1 point size = 5 px\n     - Group 2 point size = 7 px\n     - Group 3 point size = 9 px\n     - Group 4 point size = 11 px\n     - Group 5 point size = 13 px\n\n## For Developers\n\n### (1) Add to config\n\nUnder `public/config/conditions-config`, add a new key and javascript object at the bottom. The object should something like below.\n\nRefer [here](/VCL-Web-Framework/manual/developing_new_conditions.html/supported_properties.html#identifiers) for what is supported on each identifier (experiment, graph type, trial structure, balancing).\n\n```\nname_of_new_condition: {\n\texperiment: [],\n\tgraph_type: [],\n\ttrial_structure: [],\n\tbalancing: \"\",\n\tdisplay_name: \"New condition name\",\n\tdisplay_info: {\n\t\tdescription: \"\",\n\t\tresearcher: \"\",\n\t\tdeveloper: \"\"\n\t}\n}\t\n```\nCheck that when you load the UI, your condition is visible with the identifiers specified.\n\nNote that `experiment`, `graph_type` and `trial_structure` can take multiple strings (in an array). So you can have the SAME condition name,\nwith the same kind of subcondition-level manipulation, but different underlying base experiment, different graph type, or different trial structure. Good examples of these are the base experiments that run across JND and Stevens, and are supported on both scatter and strip graph types. \n\nIf we use the example from above, the JS object looks like this:\n```\nsmall_point_sizes: {\n\texperiment: [\"jnd\"],\n\tgraph_type: [\"scatter\"],\n\ttrial_structure: [\"design\"],\n\tbalancing: \"latin_square\",\n\tdisplay_name: \"Small Point Sizes\",\n\tdisplay_info: {\n\t\tdescription: \"Standard JND scatter plot condition, except point sizes vary between\" +  \n\t\t\t\t\t \"5 - 13 pixels for each 0.3, 0.6, 0.9 base correlation grouping.\",\n\t\tresearcher: \"Caitlin Coyiuto\",\n\t\tdeveloper: \"Caitlin Coyiuto\"\n\t}\n}\n```\n\n### (2) Add subconditions\n\nAdd the attributes needed to run each subcondition into the right data file. All data files are in `public/scripts/experiment-properties/data/constants`. All attributes that are supported can be found here [here](/VCL-Web-Framework/manual/supported_properties.html#subcondition-attributes).\n\nHow the subconditions work is that for a given trial structure, the application **MERGES** all attributes defined in the `BASE` object with all attributes defined in the `CONDITIONS` object. From the example, `small_point_sizes` is a JND condition using a design trial structure. So the app generates the subconditions for `small_point_sizes` by merging the attributes from `JND_BASE[\"design\"]` and `JND_CONDITIONS[\"small_point_sizes\"]`.\n\nIf the trial structure is already supported, you would only need to add all subconditions in a `key: []` structure to the `CONDITIONS` object.\n- Add a JS object into the file with the same experiment base name. You want to add the new key-value pair into the object for `CONDITIONS`.\n- Note that **each entry in the array represents ONE subcondition. So you must define all\nattributes that are being changed on a subcondition-basis.**\n  - The number of entries in the array **must match** the number of entries in the trial structure array. (E.g. if the design trial structure has 15 subconditions/rows, then the new array under `CONDITIONS` must also have 15 rows).\n- You can **OVERRIDE** any of the attributes found in the base subconditions. E.g. you can redefine \"point_size\" in your subcondition if you are changing it on a subcondition-basis.\n- An example of a new object holding all subconditions should look something like this:\n\n\n```\nname_of_new_condition:\n[\n\t{attribute1: ___, attribute2: ____}, //first subcondition\n\n\t{attribute1: ___, attribute2: ____}, //second subcondition\n\n\t{attribute1: ___, attribute2: ____}, //third...\n\n\t{attribute1: ___, attribute2: ____},\n\n\t.....                                //Number of rows = number of rows or subconditions in trial structure\n]\n```\n\nUsing the example from above, we are just changing `point_size`, so we need to define each of the sizes on every subcondition.\nNote that the subconditions for a JND Design already has `point_size` (look at `JND_BASE[\"design\"]`). By re-defining the `point_size`\nattribute here, you are **OVERRIDING** the `point_size` variable in the base. Also note that the number of rows below are equal to the number of rows in `JND_BASE[\"design\"]`.\n\n```\nsmall_point_sizes:\n    [\n    {point_size: 5},\n\n    {point_size: 5},\n\n    {point_size: 5},\n\n    {point_size: 7},\n\n    {point_size: 7},\n\n    {point_size: 7},\n\n    {point_size: 9},\n\n    {point_size: 9},\n\n    {point_size: 9},\n\n    {point_size: 11},\n\n    {point_size: 11},\n\n    {point_size: 11},\n\n    {point_size: 13},\n\n    {point_size: 13},\n\n    {point_size: 13},\n    ]\n ```\n\nAgain, depending on your trial structure, the application will merge the constants you define in `CONDITIONS` with any that are defined in the `BASE` to get all attributes for the subconditions. So for this example, all the subconditions for `small_point_sizes` is whatever is listed in the `JND_BASE[\"design\"]`, plus whatever is defined in the `CONDITIONS` variable. \n\n```\n[\n    {distribution_type: \"gaussian\", base_correlation: 0.3, error: 0.0001, max_step_size: 0.01, \n    converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, \n    num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', \n    feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 5}, // <-- point_size is now   \n                                                                                   // overriden (usually for JND \n                                                                                   // design, point_size = 6)\n\n    {distribution_type: \"gaussian\", base_correlation: 0.6, error: 0.0001, max_step_size: 0.01, \n    converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, \n    num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', \n    feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 5},\n    .....\n]\n```\n\n ### (3) Update instructions\n\n To update the instructions that are displayed to the participant, you will have to add additional code to the\n timeline object. Navigate to the `_timeline.js` associated with the condition's experiment. Under 'INSTRUCTION TRIAL BLOCKS', under the case for the condition's graph type, add an instruction block. \n\n For this example, we would go to `/experiments/jnd/jnd_timeline.js`, and add another if statement under\n case \"scatter\". \n\n ### (4) Update docs\n\n The docs dynamically gets all the condition data specified in the config files. However, it needs to be compiled to be re-updated.\n\n Run this in the command line:\n\n `./node_modules/.bin/esdoc`\n\n And check that your condition exists in the [Conditions tab](/VCL-Web-Framework/manual/conditions.html).\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/caitlincoyiuto/Documents/UBC/VCLLab/VCL_POC/docs/manual/pages/developing_new_properties.md",
    "name": "./docs/manual/pages/developing_new_properties.md",
    "content": "# Developing New Properties\n\nSometimes, new conditions require new properties to be added to the framework. This section goes through how to add new properties for each identifier.\n\n## Trial Structures\n\nTo add a new trial structure to an **existing** experiment:\n\n1. In `public/config/trial-structure-config.js`, add a new key-object pair. Add the relevant doc information like the pre-existing trial structures.\n2. Make sure that the base experiment supports the new structure:\n- In `public/config/experiments-config.js`, add the name of the new trial structure under the `trial_structure` key for the correct base experiment.\n- Navigate to the right `public/scripts/data/constants/___data.js` file for the base experiment. Determine how many subconditions the structure will support, and add the new key-array object under the `<experiment_name>_BASE` object. For example:\n```\nconst JND_BASE = {\n\t....\n\n\tnew_trial_structure: // <--\n\t[\n\t\t{ ... }\n\t\t{ ... }\n\t\tetc. \n\t]\n}\n```\nWhen adding the attributes, make sure you add **all attributes that the experiment needs to run**. Look at the attributes required for each experiment [here](/VCL-Web-Framework/manual/supported_properties.html#experimental-attributes).\n3. In `public/scripts/data/custom_subcondition_generator.js`, add a new key-object pair under `CUSTOM_TRIAL_STRUCTURE_CONDITIONS`. \n```\nvar CUSTOM_TRIAL_STRUCTURE_CONDITIONS = {\n\tfoundational : [],\n\t...\n\n    new_structure: [] // <-- \n}\n```\n\n## Balancing Types\n\nIf you want to add a new way to balance subconditions:\n\n1. In `public/config/balancing-config.js`, add a new key-object pair. Add the relevant doc information like the pre-existing balancing types.\n2. Create a new generator file inside `scripts/experiment-properties/balancing/generators`. It should take **the length of the dataset array, and return the ordered indices of the subconditions.** E.g., if the dataset has 4 subconditions, the random generator will give back [2, 0, 1, 3] AKA randomize the order of the indices.\n3. Make sure the balancing controller supports the new type. In `scripts/experiment-properties/balancing/balancing_controllers.js`, import the function from your generator js, then add another case in the switch statement.\n4. Make sure that the base experiment supports the new structure. In `public/config/experiments-config.js`, add the name of the new balancing type under the `balancing_type` key for the correct base experiment.\n\n## Graph-Related\n\nIn terms of graph-related properties, you could either be adding attributes to an **already existing graph type**, or adding an entire new type of **plot or graph type**. \n\n### Graphical Attributes\n\nThis assumes that you are adding to a **pre-existing graph type**. E.g. if you want to add `stroke_width` to the `scatter` graph type.\n\n1. In `public/config/graphing-config.js` add a key-object pair under the `attributes` of the graph type. Fill in the doc information, and what the default value is. If the attribute only takes in a **fixed** set of inputs, add a key called `valid_inputs: [input1, input2 .... ]`.\n2. Add d3 code to handle the new attribute. Open the right js file corresponding to the graph type in `public/scripts/graphing/d3-base-plots`. \n\n### Graph Types\n\nIf you want to add a **completely new graph type** (AKA plot):\n\n1. In `public/config/graphing-config.js`, add a new key-object pair for the graph type. Add the doc information, and all the attributes that can be manipulatable by subconditions.\n2. In `public/config/experiments-config.js`, add the name of the graph type under the experiment that it will support.\n3. In `public/scripts/experiment-properties/graphing/graphing_controller.js`:\n - Add a new switch case in `plot_distributions`. \n - Add a new \"prepare\" function - it can be modelled after `prepare_scatter_plot`, but in the event that you need to pass additional params which are dependent on the trial data, you can add those in your `attributes` object too (look at `prepare_shapes_plot`). Basically, the prepare function sets up all the data and attributes needed for a **single** plot, and passes it into the d3 script that will actually generate the plot.\n4. Now you need to write the d3 code, which will take in the the `attributes` object created in your `prepare` function.\n - Create a new js file named after the graph type inside `d3-base-plots`. \n - Write your d3 code. You will be appending the chart to a div with id = `graph`. So you would be doing something like:\n```\nlet chart = d3.select(\"#graph\")\n\t\t\t  .append(\"svg\")\n\t\t\t     ......\n```\n\n### Point/Shape Types\n\nFor some conditions, there may be a need to simply add a new kind of `point_type` (belonging to `scatter` graph type) or a new type of shape taken inside the `shapes` array (belonging to `shapes` graph type).\n\n1. In `public/config/graphing-config.js`, add the name of the new kind of point or shape type, either under the `valid_inputs` key of scatter's `point_type`, or shapes' `shapes`. \n2. Add the relevant d3 code in the `public/scripts/experiment-properties/graphing/d3-base-plots`. \n- If adding a new `point-type`, open `scatter_plot.js`, and add a switch case with the d3 code in `plot_scatter_points`. \n- If adding a new shape type for `shapes`, open `shape_plot.js`, and add a switch case inside `create_shape_plot`. Write the d3 function to handle that case.\n\n## Adding Experiments\n\nIn the case you are building an entirely new experiment, you will have to do all of the above, plus build the jsPsych timeline and model object to support the timeline. If you haven't read up on [JsPsych](https://www.jspsych.org/), I would suggest you do that first, and at least do the [reaction time tutorial](https://www.jspsych.org/tutorials/rt-task/).\n\n1. In `public/config/experiments-config.js`, add a new key-object inside `EXPERIMENTS`. You need to provide the `trial_structure`, `graph_type`, `balancing_type`, `docs`, and all `attributes` the experiment supports. Refer to the above ^^ instructions if you are adding any new properties for the identifiers.\n2. Create the **relevant html files** that (a) holds the jsPsych timeline, and (b) displays the trials. E.g. look under `public/views/jnd` - there is an HTML for jnd_experiment.html and jnd_trial_display.html.\n  - Create a new folder with the same name as your experiment under `public/views` for your experiment.\n  - Add an HTML file called `<experiment_name>_experiment.html` and `<experiment_name>_trial_display.html`. \n  - Inside the experiment HTML, you will pass the routing params from the server side. Literally copy and paste below and change all the `<Experiment Name>` tags to the new experiment.\n  ```\n  <!DOCTYPE html>\n\t<html>\n\t  <head>\n\n\t    <title>VCL: <Experiment Name> Experiment</title>\n\n\t    <%- include('../header'); %>\n\n\t    <script type=\"text/javascript\">\n\n\t      // Routing params from EJS:\n\t      var params = {\"trial_structure\": \"<%= trial_structure %>\",\n\t                    \"condition\": \"<%= condition %>\",\n\t                    \"graph_type\": \"<%= graph_type %>\",\n\t                    \"balancing\": \"<%= balancing %>\",\n\t                    \"subject_id\": \"<%= subject_id %>\",\n\t                    \"subject_initials\": \"<%= subject_initials %>\"};\n\n\t    </script>\n\n\t    <script type=\"module\" src=\"/scripts/experiments/<experiment_name>/<experiment_name>_timeline.js\" ></script>\n\n\t  </head>\n\n\t  <body>\n\t  </body>\n\n\t</html>\n  ```\n  - Inside the trial display HTML, we need to call the function to plot the graphs. Copy and paste below, and change the `<experiment name>` tags.\n  ```\n  <!DOCTYPE html>\n\t<html>\n\t<head>\n\t    <link rel=\"icon\" href=\"./img/VCL_favicon.png\">\n\n\t    <!-- Scripts: -->\n\n\t    <!-- D3: -->\n\t    <script src = \"https://d3js.org/d3.v4.min.js\"></script>\n\t    <script src=\"https://d3js.org/d3-selection-multi.v0.4.min.js\"></script>\n\n\t</head>\n\t<body>\n\t  <div align = \"center\">\n\t    \n\t    <!-- D3 graph goes here: -->\n\t    <div id=\"graph\">\n\t    </div>\n\t    \n\t    <script type=\"module\">\n\t    \n\t        import { <experiment_name>_exp } from \"/scripts/experiments/<experiment_name>/<experiment_name>_timeline.js\";\n\t        import { plot_distributions } from \"/scripts/experiment-properties/graphing/graphing_controller.js\";\n\t        \n\t        plot_distributions(<experiment_name>_exp);\n\n\t    </script>\n\t  </div>\n\t</body>\n\t</html>\n  ```\t\n3. Add your **data** for the experiment. \n  - In `/scripts/data/constants` add a new js file called `<experiment_name>_data.js`. \n  - Add all your subcondition data for the trial structure it supports, and any new conditions. Refer [here](/VCL-Web-Framework/manual/developing_new_properties.html#trial-structures) if you're making a new trial structure, and [part 2 of here](/VCL-Web-Framework/manual/developing_new_conditions.html) for the new conditions.\n  - In `/scripts/data/data_controller.js`, import your `BASE` and `CONDITIONS` variables your data js file. \n    - Add the new base experiment to `EXPERIMENT_BASES` and `EXPERIMENT_CONDITIONS`.\n4. Update **server-side routing**. Open `app.js` under root, and add another `else if` statement. Make the response render the `<experiment_name>_experiment.html` that you recently created. \n5. Add the **experimental logic**. You need to build: **(a) the JsPsych timeline,** and **(b) a model class to support the timeline.** You **MAY** not need a new model class, especially if your experiment is simple enough and doesn't have a lot trial-by-trial dependencies (e.g. look at the visualSearch branch from [here](https://github.com/Wongelawit/Correlation_MultipleEnsemble)). I would suggest using `JND_Radius` as a base, it is the simplest among the experiments.\n  - Add a new folder under `public/scripts/experiments`.\n  - Add two js files, (or one if you don't need the model class), called `<experiment_name>.js` and `<experiment_name>_timeline.js`. \n  - For the timeline, there should be blocks for:\n    - The welcome page\n    - Instructions\n    - Feedback (if any after a trial)\n    - Experimental trial\n    - The end page\n  - For the model class, you need to be able to:\n    - Retrieve the right data from the /constants folder\n    - Balance the data\n    - Make the trial block (e.g. `generate_trial` jsPsych object)\n    - Save any variables that the researchers want saved on a trial-by-trial basis\n    - Determine what is a correct/incorrect response, and change the next trial's presentation (if the experiment demands it)\n    - Export the data once the experiment ends\n  - There is no template for the model class, though there are some functions that you can probably re-use from `JND_Radius` (aka `prepare_experiment`), but a lot of the constants are subject to whatever the experiment needs, and the `generate_trial` object is task-dependent.   \n\n## Overriding\n\nThere are instances where new conditions or plots cannot be supported naturally by the framework. These usually are **unconventional** instances. A good example are all the conditions prefixed with `distractor_<color>_shades`. These conditions plot **TWO** distributions onto a scatter graph, and additionally do not follow any of the supported trial structures. There is therefore a way to **NOT USE** the base plots (e.g. anything in `d3-base-plots`) and to not be dependent on any of the trial structures, so you can create your subconditions dynamically instead of declaring them inside `/data/constants`. \n\n### Custom Plots\n\nAssuming that you have a plot that can be categorized under one of the main graph types, but there is some **unconventional** set-up involved that may likely break or cause the main base plot code to become messy, create a custom d3 script. \n\nFor example, the `distractor` conditions plot two distributions onto a single scatter plot, and also have a very specific way of plotting points to allow equal occlusion between the distributions. Adding this into this functionality into the `d3-base-plots/scatter_plot.js` will likely make things very messy. So we created a custom D3 script for it instead (`d3-custom-plots/distractor_scatter_plot.js`).\n\n1. Inside `/scripts/experiment-properties/graphing/custom_graphing_controller.js`. \n   - Add an if-else clause inside the function `is_custom_plot`. Basically should return true for your condition.\n   - Add an if-else clause inside `prepare_custom_plot`, and create a new function that sets up the attributes to be sent to your d3 function.\n   - Import that function at the top of this script.\n2. Create the d3 script. Add a new custom plot script inside `/d3-custom-plots`.\n3. Lastly, although the d3 code is customized for your condition, the framework still assumes that your condition uses one of the base plots (e.g scatter, strip etc.). If the new plot doesn't fit \"naturally\" into these types, then you might as well create a [new graph type](/VCL-Web-Framework/manual/developing_new_properties.html#graph-types).\n\n### Subcondition Generation\n\nThere are two instances where you can have custom code for your subconditions: (1) you want to write code that programmatically generates the subconditions instead of writing your data manually inside `/data/constants` (so this **still means you are following a certain trial structure**), or (2) you are **NOT following any trial structure** altogether, so the **trial structure is `custom`**. \n\nInside `/scripts/data/custom_subcondition_generator.js`:\n- For (1): Add your condition name inside `CUSTOM_TRIAL_STRUCTURE_CONDITIONS`, under `custom` key.\n- For (2): Add your condition name inside `CUSTOM_TRIAL_STRUCTURE_CONDITIONS`, under the trial structure it follows.\n- Then:\n  1. Add an if-else inside `get_subconditions` to route it to your custom generator function.\n  2. Write the function below to generate the subconditions.\n",
    "static": true,
    "access": "public"
  }
]