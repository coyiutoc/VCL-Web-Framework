[
  {
    "name": "is_distractor_diamond_square",
    "filePath": "scripts/experiment-properties/data/custom_subcondition_generator.js",
    "lines": [
      {
        "lineNumber": 60,
        "line": "/**"
      },
      {
        "lineNumber": 61,
        "line": " * Checks if the condition name is a \"distractor_diamond_square\" one."
      },
      {
        "lineNumber": 62,
        "line": " *"
      },
      {
        "lineNumber": 63,
        "line": " * @param   {object}   experiment"
      },
      {
        "lineNumber": 64,
        "line": " * @return  {boolean}"
      },
      {
        "lineNumber": 65,
        "line": " */"
      },
      {
        "lineNumber": 66,
        "line": "function is_distractor_diamond_square(condition_name) {"
      }
    ],
    "codeParams": [
      "condition_name"
    ],
    "docParams": [
      "experiment"
    ]
  },
  {
    "name": "get_data_subset",
    "filePath": "scripts/experiment-properties/data/data_controller.js",
    "lines": [
      {
        "lineNumber": 72,
        "line": "/**"
      },
      {
        "lineNumber": 73,
        "line": " * Retrieves a smaller dataset (4 subconditions) given experiment, trial structure and condition."
      },
      {
        "lineNumber": 74,
        "line": " *"
      },
      {
        "lineNumber": 75,
        "line": " * @param  experiment      {string}            \"jnd\" or \"stevens\"   "
      },
      {
        "lineNumber": 76,
        "line": " *         trial_structure {string}            \"foundational\" or \"design\"         "
      },
      {
        "lineNumber": 77,
        "line": " *         condition       {string}            Name of condition"
      },
      {
        "lineNumber": 78,
        "line": " *"
      },
      {
        "lineNumber": 79,
        "line": " * @return dataset     [{assoc}, {assoc}, .... ]         "
      },
      {
        "lineNumber": 80,
        "line": " */"
      },
      {
        "lineNumber": 81,
        "line": "function get_data_subset(experiment, trial_structure, condition) {"
      }
    ],
    "codeParams": [
      "experiment",
      "trial_structure",
      "condition"
    ],
    "docParams": [
      "experiment"
    ]
  },
  {
    "name": "prepare_coordinates",
    "filePath": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "lines": [
      {
        "lineNumber": 36,
        "line": "/**"
      },
      {
        "lineNumber": 37,
        "line": "* Converts the coordinates into this format for d3:"
      },
      {
        "lineNumber": 38,
        "line": "* [ [x1, y1], [x2, y2] ... [xn, yn] ]"
      },
      {
        "lineNumber": 39,
        "line": "* And samples the distribution for the specified num_points."
      },
      {
        "lineNumber": 40,
        "line": "*"
      },
      {
        "lineNumber": 41,
        "line": "* @param coordinates { {x_values: [], y_values: []} }"
      },
      {
        "lineNumber": 42,
        "line": "*        num_points {integer}"
      },
      {
        "lineNumber": 43,
        "line": "* @return output_coordinates { [x1, y1], [x2, y2] ... }"
      },
      {
        "lineNumber": 44,
        "line": "*/"
      },
      {
        "lineNumber": 45,
        "line": "function prepare_coordinates(coordinates, num_points){"
      }
    ],
    "codeParams": [
      "coordinates",
      "num_points"
    ],
    "docParams": [
      "coordinates"
    ]
  },
  {
    "name": "sample_coordinates",
    "filePath": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "lines": [
      {
        "lineNumber": 63,
        "line": "/**"
      },
      {
        "lineNumber": 64,
        "line": "* Randomly picks x number of points from the distribution"
      },
      {
        "lineNumber": 65,
        "line": "* where x = num_points."
      },
      {
        "lineNumber": 66,
        "line": "*"
      },
      {
        "lineNumber": 67,
        "line": "* @param coordinates { [x1, y1], [x2, y2] ... }"
      },
      {
        "lineNumber": 68,
        "line": "*        num_points {integer}"
      },
      {
        "lineNumber": 69,
        "line": "* @return output_coordinates with size num_points { [x1, y1], [x2, y2] ... }"
      },
      {
        "lineNumber": 70,
        "line": "*/"
      },
      {
        "lineNumber": 71,
        "line": "function sample_coordinates(coordinates, num_points){"
      }
    ],
    "codeParams": [
      "coordinates",
      "num_points"
    ],
    "docParams": [
      "coordinates"
    ]
  },
  {
    "name": "plot_circle",
    "filePath": "scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js",
    "lines": [
      {
        "lineNumber": 69,
        "line": "/**"
      },
      {
        "lineNumber": 70,
        "line": " * D3 code for plotting a circle."
      },
      {
        "lineNumber": 71,
        "line": " *"
      },
      {
        "lineNumber": 72,
        "line": " * @param  chart      {svg object}"
      },
      {
        "lineNumber": 73,
        "line": " *         radius     {double} "
      },
      {
        "lineNumber": 74,
        "line": " *         max_radius {double}     Largest radius of the given trial"
      },
      {
        "lineNumber": 75,
        "line": " *         diff       {double}     Difference between max and min radius of given trial        "
      },
      {
        "lineNumber": 76,
        "line": " */ "
      },
      {
        "lineNumber": 77,
        "line": "function plot_circle(chart, radius, max_radius, diff, properties) {"
      }
    ],
    "codeParams": [
      "chart",
      "radius",
      "max_radius",
      "diff",
      "properties"
    ],
    "docParams": [
      "chart"
    ]
  },
  {
    "name": "plot_slice",
    "filePath": "scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js",
    "lines": [
      {
        "lineNumber": 119,
        "line": "/**"
      },
      {
        "lineNumber": 120,
        "line": " * D3 code for plotting a slice (1/4 of circle)."
      },
      {
        "lineNumber": 121,
        "line": " *      "
      },
      {
        "lineNumber": 122,
        "line": " * @param  chart      {svg object}"
      },
      {
        "lineNumber": 123,
        "line": " *         radius     {double} "
      },
      {
        "lineNumber": 124,
        "line": " *         rotation   {int}        Degrees of rotation in the counterclockwise direction.        "
      },
      {
        "lineNumber": 125,
        "line": " *         max_radius {double}     Largest radius of the given trial"
      },
      {
        "lineNumber": 126,
        "line": " *         diff       {double}     Difference between max and min radius of given trial  "
      },
      {
        "lineNumber": 127,
        "line": " *         properties {object}     Graph attributes extracted from constants"
      },
      {
        "lineNumber": 128,
        "line": " */ "
      },
      {
        "lineNumber": 129,
        "line": "function plot_slice(chart, radius, rotation, max_radius, diff, properties) {"
      }
    ],
    "codeParams": [
      "chart",
      "radius",
      "rotation",
      "max_radius",
      "diff",
      "properties"
    ],
    "docParams": [
      "chart"
    ]
  },
  {
    "name": "plot_square",
    "filePath": "scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js",
    "lines": [
      {
        "lineNumber": 186,
        "line": "/**"
      },
      {
        "lineNumber": 187,
        "line": " * D3 code for plotting a square."
      },
      {
        "lineNumber": 188,
        "line": " *"
      },
      {
        "lineNumber": 189,
        "line": " * @param  chart      {svg object}"
      },
      {
        "lineNumber": 190,
        "line": " *         radius     {double} "
      },
      {
        "lineNumber": 191,
        "line": " *         max_radius {double}     Largest radius of the given trial"
      },
      {
        "lineNumber": 192,
        "line": " *         diff       {double}     Difference between max and min radius of given trial  "
      },
      {
        "lineNumber": 193,
        "line": " *         properties {object}     Graph attributes extracted from constants       "
      },
      {
        "lineNumber": 194,
        "line": " */ "
      },
      {
        "lineNumber": 195,
        "line": "function plot_square(chart, radius, max_radius, diff, properties) {"
      }
    ],
    "codeParams": [
      "chart",
      "radius",
      "max_radius",
      "diff",
      "properties"
    ],
    "docParams": [
      "chart"
    ]
  },
  {
    "name": "plot_rotated_square",
    "filePath": "scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js",
    "lines": [
      {
        "lineNumber": 216,
        "line": "/**"
      },
      {
        "lineNumber": 217,
        "line": " * D3 code for plotting a rotated square AKA diamond."
      },
      {
        "lineNumber": 218,
        "line": " *"
      },
      {
        "lineNumber": 219,
        "line": " * @param  chart      {svg object}"
      },
      {
        "lineNumber": 220,
        "line": " *         radius     {double} "
      },
      {
        "lineNumber": 221,
        "line": " *         max_radius {double}     Largest radius of the given trial"
      },
      {
        "lineNumber": 222,
        "line": " *         diff       {double}     Difference between max and min radius of given trial   "
      },
      {
        "lineNumber": 223,
        "line": " *         properties {object}     Graph attributes extracted from constants     "
      },
      {
        "lineNumber": 224,
        "line": " */ "
      },
      {
        "lineNumber": 225,
        "line": "function plot_rotated_square(chart, radius, max_radius, diff, properties) {"
      }
    ],
    "codeParams": [
      "chart",
      "radius",
      "max_radius",
      "diff",
      "properties"
    ],
    "docParams": [
      "chart"
    ]
  },
  {
    "name": "plot_triangle",
    "filePath": "scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js",
    "lines": [
      {
        "lineNumber": 248,
        "line": "/**"
      },
      {
        "lineNumber": 249,
        "line": " * D3 code for plotting a triangle."
      },
      {
        "lineNumber": 250,
        "line": " *"
      },
      {
        "lineNumber": 251,
        "line": " * @param  chart      {svg object}"
      },
      {
        "lineNumber": 252,
        "line": " *         radius     {double} "
      },
      {
        "lineNumber": 253,
        "line": " *         max_radius {double}     Largest radius of the given trial"
      },
      {
        "lineNumber": 254,
        "line": " *         diff       {double}     Difference between max and min radius of given trial   "
      },
      {
        "lineNumber": 255,
        "line": " *         properties {object}     Graph attributes extracted from constants     "
      },
      {
        "lineNumber": 256,
        "line": " */ "
      },
      {
        "lineNumber": 257,
        "line": "function plot_triangle(chart, radius, max_radius, diff, properties) {"
      }
    ],
    "codeParams": [
      "chart",
      "radius",
      "max_radius",
      "diff",
      "properties"
    ],
    "docParams": [
      "chart"
    ]
  },
  {
    "name": "plot_rotated_triangle",
    "filePath": "scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js",
    "lines": [
      {
        "lineNumber": 279,
        "line": "/**"
      },
      {
        "lineNumber": 280,
        "line": " * D3 code for plotting a rotated triangle."
      },
      {
        "lineNumber": 281,
        "line": " *"
      },
      {
        "lineNumber": 282,
        "line": " * @param  chart      {svg object}"
      },
      {
        "lineNumber": 283,
        "line": " *         radius     {double} "
      },
      {
        "lineNumber": 284,
        "line": " *         max_radius {double}     Largest radius of the given trial"
      },
      {
        "lineNumber": 285,
        "line": " *         diff       {double}     Difference between max and min radius of given trial "
      },
      {
        "lineNumber": 286,
        "line": " *         properties {object}     Graph attributes extracted from constants       "
      },
      {
        "lineNumber": 287,
        "line": " */ "
      },
      {
        "lineNumber": 288,
        "line": "function plot_rotated_triangle(chart, radius, max_radius, diff, properties) {"
      }
    ],
    "codeParams": [
      "chart",
      "radius",
      "max_radius",
      "diff",
      "properties"
    ],
    "docParams": [
      "chart"
    ]
  },
  {
    "name": "Estimation#plot_triangle",
    "filePath": "scripts/experiments/estimation/estimation.js",
    "lines": [
      {
        "lineNumber": 524,
        "line": "    /**"
      },
      {
        "lineNumber": 525,
        "line": "     *"
      },
      {
        "lineNumber": 526,
        "line": "     * @param chart {object}"
      },
      {
        "lineNumber": 527,
        "line": "     * @param radius {number}"
      },
      {
        "lineNumber": 528,
        "line": "     * @param y_pos {number}"
      },
      {
        "lineNumber": 529,
        "line": "     * @param x_pos {number}"
      },
      {
        "lineNumber": 530,
        "line": "     * @param is_ref {boolean} if the shape is a reference shape or a modifiable shape,"
      },
      {
        "lineNumber": 531,
        "line": "     *                         is_ref === true if the shape is a reference shape"
      },
      {
        "lineNumber": 532,
        "line": "     */"
      },
      {
        "lineNumber": 533,
        "line": "    plot_triangle(chart, radius, y_pos, x_pos, is_ref, outline, fill) {"
      }
    ],
    "codeParams": [
      "chart",
      "radius",
      "y_pos",
      "x_pos",
      "is_ref",
      "outline",
      "fill"
    ],
    "docParams": [
      "chart",
      "radius",
      "y_pos",
      "x_pos",
      "is_ref"
    ]
  },
  {
    "name": "JND#prepare_experiment",
    "filePath": "scripts/experiments/jnd/jnd.js",
    "lines": [
      {
        "lineNumber": 102,
        "line": "  /**"
      },
      {
        "lineNumber": 103,
        "line": "   * Orders the input data according to balancing type and"
      },
      {
        "lineNumber": 104,
        "line": "   * initializes the JND object's variables.  "
      },
      {
        "lineNumber": 105,
        "line": "   *"
      },
      {
        "lineNumber": 106,
        "line": "   * @param  balancing_type {string}                             Type of balancing. Currently only latin_square"
      },
      {
        "lineNumber": 107,
        "line": "   *                                                             is supported."
      },
      {
        "lineNumber": 108,
        "line": "   *         dataset {[{assoc array}, {assoc array}, ... ]}      The data to be ordered. "
      },
      {
        "lineNumber": 109,
        "line": "   */ "
      },
      {
        "lineNumber": 110,
        "line": "  prepare_experiment() {"
      }
    ],
    "codeParams": [],
    "docParams": [
      "balancing_type"
    ]
  },
  {
    "name": "JND#prepare_practice",
    "filePath": "scripts/experiments/jnd/jnd.js",
    "lines": [
      {
        "lineNumber": 142,
        "line": "  /**"
      },
      {
        "lineNumber": 143,
        "line": "   * Orders the input dataset by randomizing it, and initializes the practice variables."
      },
      {
        "lineNumber": 144,
        "line": "   *"
      },
      {
        "lineNumber": 145,
        "line": "   * @param  dataset {[{assoc array}, {assoc array}, ... ]}   The data to be ordered. "
      },
      {
        "lineNumber": 146,
        "line": "   */"
      },
      {
        "lineNumber": 147,
        "line": "  prepare_practice() {"
      }
    ],
    "codeParams": [],
    "docParams": [
      "dataset"
    ]
  },
  {
    "name": "JND#generate_trial",
    "filePath": "scripts/experiments/jnd/jnd.js",
    "lines": [
      {
        "lineNumber": 165,
        "line": "  /**"
      },
      {
        "lineNumber": 166,
        "line": "   * Generates a JND trial object for use in the JsPsych timeline."
      },
      {
        "lineNumber": 167,
        "line": "   *"
      },
      {
        "lineNumber": 168,
        "line": "   * @param  type {string}             \"test\" or \"practice\""
      },
      {
        "lineNumber": 169,
        "line": "   * @return trial {object}"
      },
      {
        "lineNumber": 170,
        "line": "   */ "
      },
      {
        "lineNumber": 171,
        "line": "  generate_trial(block_type) {"
      }
    ],
    "codeParams": [
      "block_type"
    ],
    "docParams": [
      "type"
    ]
  },
  {
    "name": "JND#handle_data_saving",
    "filePath": "scripts/experiments/jnd/jnd.js",
    "lines": [
      {
        "lineNumber": 267,
        "line": "  /**"
      },
      {
        "lineNumber": 268,
        "line": "   * Handles saving the relevant data on a given trial."
      },
      {
        "lineNumber": 269,
        "line": "   *"
      },
      {
        "lineNumber": 270,
        "line": "   * For reference, these are the helper variables created to assist in trial logic (i.e not present in excel)"
      },
      {
        "lineNumber": 271,
        "line": "   * trial_variables =         "
      },
      {
        "lineNumber": 272,
        "line": "   *       {type: 'jnd',"
      },
      {
        "lineNumber": 273,
        "line": "   *       run_type: '',"
      },
      {
        "lineNumber": 274,
        "line": "   *       left_correlation: '',"
      },
      {
        "lineNumber": 275,
        "line": "   *       right_correlation: '',"
      },
      {
        "lineNumber": 276,
        "line": "   *       };"
      },
      {
        "lineNumber": 277,
        "line": "   *"
      },
      {
        "lineNumber": 278,
        "line": "   * These are variables created WITHIN the trial logic that were not present in excel (but need to be"
      },
      {
        "lineNumber": 279,
        "line": "   * outputted to results).     "
      },
      {
        "lineNumber": 280,
        "line": "   * export_variables = "
      },
      {
        "lineNumber": 281,
        "line": "   *       {sub_condition: '',           // Chronological ordering of sub_condition [1, 2, 3 ... ]"
      },
      {
        "lineNumber": 282,
        "line": "   *        balanced_sub_condition: '',  // Index of sub_condition according to balancing order"
      },
      {
        "lineNumber": 283,
        "line": "   *        jnd: '',"
      },
      {
        "lineNumber": 284,
        "line": "   *        base_correlation: '',"
      },
      {
        "lineNumber": 285,
        "line": "   *        adjusted_correlation: '',"
      },
      {
        "lineNumber": 286,
        "line": "   *        correct: '',"
      },
      {
        "lineNumber": 287,
        "line": "   *       };"
      },
      {
        "lineNumber": 288,
        "line": "   *"
      },
      {
        "lineNumber": 289,
        "line": "   * @param trial {object}"
      },
      {
        "lineNumber": 290,
        "line": "   *        block_type {string}           \"test\" or \"practice\""
      },
      {
        "lineNumber": 291,
        "line": "   *        constants {assoc array}"
      },
      {
        "lineNumber": 292,
        "line": "   *        index {integer}"
      },
      {
        "lineNumber": 293,
        "line": "   *        adjusted_correlation {double}"
      },
      {
        "lineNumber": 294,
        "line": "   */"
      },
      {
        "lineNumber": 295,
        "line": "  handle_data_saving(trial, block_type, constants, index, adjusted_correlation) {"
      }
    ],
    "codeParams": [
      "trial",
      "block_type",
      "constants",
      "index",
      "adjusted_correlation"
    ],
    "docParams": [
      "trial"
    ]
  },
  {
    "name": "JND#initialize_adjusted_statistic",
    "filePath": "scripts/experiments/jnd/jnd.js",
    "lines": [
      {
        "lineNumber": 446,
        "line": "  /**"
      },
      {
        "lineNumber": 447,
        "line": "   * Initializes the adjusted correlation for the first time."
      },
      {
        "lineNumber": 448,
        "line": "   *"
      },
      {
        "lineNumber": 449,
        "line": "   * @param  converge_from_above {boolean}    "
      },
      {
        "lineNumber": 450,
        "line": "   *         base_correlation {double}         "
      },
      {
        "lineNumber": 451,
        "line": "   *         initial_difference {double}"
      },
      {
        "lineNumber": 452,
        "line": "   * @return adjusted_correlation {double}          "
      },
      {
        "lineNumber": 453,
        "line": "   */"
      },
      {
        "lineNumber": 454,
        "line": "  initialize_adjusted_statistic(converge_from_above, base_correlation, initial_difference) {"
      }
    ],
    "codeParams": [
      "converge_from_above",
      "base_correlation",
      "initial_difference"
    ],
    "docParams": [
      "converge_from_above"
    ]
  },
  {
    "name": "JND#get_next_adjusted_statistic",
    "filePath": "scripts/experiments/jnd/jnd.js",
    "lines": [
      {
        "lineNumber": 466,
        "line": "  /**"
      },
      {
        "lineNumber": 467,
        "line": "   * Calculates the next adjusted correlation/statistic."
      },
      {
        "lineNumber": 468,
        "line": "   *"
      },
      {
        "lineNumber": 469,
        "line": "   * @param  correct {boolean}"
      },
      {
        "lineNumber": 470,
        "line": "   *         converge_from_above {boolean}    "
      },
      {
        "lineNumber": 471,
        "line": "   *         adjusted_quantity {double}         "
      },
      {
        "lineNumber": 472,
        "line": "   *         base_correlation {double}"
      },
      {
        "lineNumber": 473,
        "line": "   *         initial_difference {double}"
      },
      {
        "lineNumber": 474,
        "line": "   *         max_step_size {double}"
      },
      {
        "lineNumber": 475,
        "line": "   * @return adjusted_correlation {double}          "
      },
      {
        "lineNumber": 476,
        "line": "   */"
      },
      {
        "lineNumber": 477,
        "line": "  get_next_adjusted_statistic(correct, converge_from_above, adjusted_quantity, base_correlation, max_step_size) {"
      }
    ],
    "codeParams": [
      "correct",
      "converge_from_above",
      "adjusted_quantity",
      "base_correlation",
      "max_step_size"
    ],
    "docParams": [
      "correct"
    ]
  },
  {
    "name": "JND_Radius#prepare_experiment",
    "filePath": "scripts/experiments/jnd_radius/jnd_radius.js",
    "lines": [
      {
        "lineNumber": 99,
        "line": "  /**"
      },
      {
        "lineNumber": 100,
        "line": "   * Orders the input data according to balancing type and"
      },
      {
        "lineNumber": 101,
        "line": "   * initializes the JND object's variables.  "
      },
      {
        "lineNumber": 102,
        "line": "   *"
      },
      {
        "lineNumber": 103,
        "line": "   * @param  balancing_type {string}                             Type of balancing. Currently only latin_square"
      },
      {
        "lineNumber": 104,
        "line": "   *                                                             is supported."
      },
      {
        "lineNumber": 105,
        "line": "   *         data_set {[{assoc array}, {assoc array}, ... ]}     The data to be ordered. "
      },
      {
        "lineNumber": 106,
        "line": "   *         practice_set {[{assoc array}, {assoc array}, ... ]} The practice data. "
      },
      {
        "lineNumber": 107,
        "line": "   */ "
      },
      {
        "lineNumber": 108,
        "line": "  prepare_experiment() {"
      }
    ],
    "codeParams": [],
    "docParams": [
      "balancing_type"
    ]
  },
  {
    "name": "JND_Radius#generate_trial",
    "filePath": "scripts/experiments/jnd_radius/jnd_radius.js",
    "lines": [
      {
        "lineNumber": 137,
        "line": "  /**"
      },
      {
        "lineNumber": 138,
        "line": "   * Generates a JND trial object for use in the JsPsych timeline."
      },
      {
        "lineNumber": 139,
        "line": "   *"
      },
      {
        "lineNumber": 140,
        "line": "   * @param  type {string}             \"test\" or \"practice\""
      },
      {
        "lineNumber": 141,
        "line": "   * @return trial {object}"
      },
      {
        "lineNumber": 142,
        "line": "   */ "
      },
      {
        "lineNumber": 143,
        "line": "  generate_trial(block_type) {"
      }
    ],
    "codeParams": [
      "block_type"
    ],
    "docParams": [
      "type"
    ]
  },
  {
    "name": "JND_Radius#handle_data_saving",
    "filePath": "scripts/experiments/jnd_radius/jnd_radius.js",
    "lines": [
      {
        "lineNumber": 210,
        "line": "  /**"
      },
      {
        "lineNumber": 211,
        "line": "   * Handles saving the relevant data on a given trial."
      },
      {
        "lineNumber": 212,
        "line": "   *"
      },
      {
        "lineNumber": 213,
        "line": "   * For reference, these are the helper variables created to assist in trial logic (i.e not present in excel)"
      },
      {
        "lineNumber": 214,
        "line": "   * trial_variables =         "
      },
      {
        "lineNumber": 215,
        "line": "   *       {type: 'jnd',"
      },
      {
        "lineNumber": 216,
        "line": "   *       run_type: '',"
      },
      {
        "lineNumber": 217,
        "line": "   *       left_radius: '',"
      },
      {
        "lineNumber": 218,
        "line": "   *       right_radius: '',"
      },
      {
        "lineNumber": 219,
        "line": "   *       };"
      },
      {
        "lineNumber": 220,
        "line": "   *"
      },
      {
        "lineNumber": 221,
        "line": "   * These are variables created WITHIN the trial logic that were not present in excel (but need to be"
      },
      {
        "lineNumber": 222,
        "line": "   * outputted to results).     "
      },
      {
        "lineNumber": 223,
        "line": "   * export_variables = "
      },
      {
        "lineNumber": 224,
        "line": "   *       {sub_condition: '',           // Chronological ordering of sub_condition [1, 2, 3 ... ]"
      },
      {
        "lineNumber": 225,
        "line": "   *        balanced_sub_condition: '',  // Index of sub_condition according to balancing order"
      },
      {
        "lineNumber": 226,
        "line": "   *        jnd: '',"
      },
      {
        "lineNumber": 227,
        "line": "   *        base_radius: '',"
      },
      {
        "lineNumber": 228,
        "line": "   *        adjusted_radius: '',"
      },
      {
        "lineNumber": 229,
        "line": "   *        correct: '',"
      },
      {
        "lineNumber": 230,
        "line": "   *       };"
      },
      {
        "lineNumber": 231,
        "line": "   *"
      },
      {
        "lineNumber": 232,
        "line": "   * @param trial {object}"
      },
      {
        "lineNumber": 233,
        "line": "   *        block_type {string}           \"test\" or \"practice\""
      },
      {
        "lineNumber": 234,
        "line": "   *        constants {assoc array}"
      },
      {
        "lineNumber": 235,
        "line": "   *        index {integer}"
      },
      {
        "lineNumber": 236,
        "line": "   *        adjusted_correlation {double}"
      },
      {
        "lineNumber": 237,
        "line": "   */"
      },
      {
        "lineNumber": 238,
        "line": "  handle_data_saving(trial, block_type, constants, index, adjusted_radius) {"
      }
    ],
    "codeParams": [
      "trial",
      "block_type",
      "constants",
      "index",
      "adjusted_radius"
    ],
    "docParams": [
      "trial"
    ]
  },
  {
    "name": "JND_Radius#initialize_adjusted_statistic",
    "filePath": "scripts/experiments/jnd_radius/jnd_radius.js",
    "lines": [
      {
        "lineNumber": 388,
        "line": "  /**"
      },
      {
        "lineNumber": 389,
        "line": "   * Initializes the adjusted radius for the first time."
      },
      {
        "lineNumber": 390,
        "line": "   *"
      },
      {
        "lineNumber": 391,
        "line": "   * @param  converge_from_above {boolean}    "
      },
      {
        "lineNumber": 392,
        "line": "   *         base_radius {double}         "
      },
      {
        "lineNumber": 393,
        "line": "   *         initial_difference {double}"
      },
      {
        "lineNumber": 394,
        "line": "   * @return adjusted_radius {double}          "
      },
      {
        "lineNumber": 395,
        "line": "   */"
      },
      {
        "lineNumber": 396,
        "line": "  initialize_adjusted_statistic(converge_from_above, base_radius, initial_difference) {"
      }
    ],
    "codeParams": [
      "converge_from_above",
      "base_radius",
      "initial_difference"
    ],
    "docParams": [
      "converge_from_above"
    ]
  },
  {
    "name": "JND_Radius#get_next_adjusted_statistic",
    "filePath": "scripts/experiments/jnd_radius/jnd_radius.js",
    "lines": [
      {
        "lineNumber": 408,
        "line": "  /**"
      },
      {
        "lineNumber": 409,
        "line": "   * Calculates the next adjusted correlation/statistic."
      },
      {
        "lineNumber": 410,
        "line": "   *"
      },
      {
        "lineNumber": 411,
        "line": "   * @param  correct {boolean}"
      },
      {
        "lineNumber": 412,
        "line": "   *         converge_from_above {boolean}    "
      },
      {
        "lineNumber": 413,
        "line": "   *         adjusted_quantity {double}         "
      },
      {
        "lineNumber": 414,
        "line": "   *         base_correlation {double}"
      },
      {
        "lineNumber": 415,
        "line": "   *         initial_difference {double}"
      },
      {
        "lineNumber": 416,
        "line": "   *"
      },
      {
        "lineNumber": 417,
        "line": "   * @return adjusted_correlation {double}          "
      },
      {
        "lineNumber": 418,
        "line": "   */"
      },
      {
        "lineNumber": 419,
        "line": "  get_next_adjusted_statistic(correct, converge_from_above, adjusted_quantity, base_radius) {"
      }
    ],
    "codeParams": [
      "correct",
      "converge_from_above",
      "adjusted_quantity",
      "base_radius"
    ],
    "docParams": [
      "correct"
    ]
  },
  {
    "name": "Stevens#prepare_experiment",
    "filePath": "scripts/experiments/stevens/stevens.js",
    "lines": [
      {
        "lineNumber": 103,
        "line": "  /**"
      },
      {
        "lineNumber": 104,
        "line": "   * Orders the input data according to balancing type and"
      },
      {
        "lineNumber": 105,
        "line": "   * initializes the Stevens object's variables.  "
      },
      {
        "lineNumber": 106,
        "line": "   *"
      },
      {
        "lineNumber": 107,
        "line": "   * @param  balancing_type {string}                           Type of balancing. Currently only latin_square"
      },
      {
        "lineNumber": 108,
        "line": "   *                                                           is supported."
      },
      {
        "lineNumber": 109,
        "line": "   *         dataset {[{assoc array}, {assoc array}, ... ]}   The data to be ordered. "
      },
      {
        "lineNumber": 110,
        "line": "   */"
      },
      {
        "lineNumber": 111,
        "line": "  prepare_experiment() {"
      }
    ],
    "codeParams": [],
    "docParams": [
      "balancing_type"
    ]
  },
  {
    "name": "Stevens#prepare_practice",
    "filePath": "scripts/experiments/stevens/stevens.js",
    "lines": [
      {
        "lineNumber": 148,
        "line": "  /**"
      },
      {
        "lineNumber": 149,
        "line": "   * Creates the practice dataset by taking the first FOUR subconditions."
      },
      {
        "lineNumber": 150,
        "line": "   *"
      },
      {
        "lineNumber": 151,
        "line": "   * @param  dataset {[{assoc array}, {assoc array}, ... ]}   The data to be ordered. "
      },
      {
        "lineNumber": 152,
        "line": "   */"
      },
      {
        "lineNumber": 153,
        "line": "  prepare_practice() {"
      }
    ],
    "codeParams": [],
    "docParams": [
      "dataset"
    ]
  },
  {
    "name": "Stevens#generate_trial",
    "filePath": "scripts/experiments/stevens/stevens.js",
    "lines": [
      {
        "lineNumber": 384,
        "line": "  /**"
      },
      {
        "lineNumber": 385,
        "line": "   * Generates a Stevens object for use in the JsPsych timeline."
      },
      {
        "lineNumber": 386,
        "line": "   *"
      },
      {
        "lineNumber": 387,
        "line": "   * @param  type {string}                             \"test\" or \"practice\""
      },
      {
        "lineNumber": 388,
        "line": "   * @return trial {object}"
      },
      {
        "lineNumber": 389,
        "line": "   */   "
      },
      {
        "lineNumber": 390,
        "line": "  generate_trial(block_type) {"
      }
    ],
    "codeParams": [
      "block_type"
    ],
    "docParams": [
      "type"
    ]
  },
  {
    "name": "Stevens#get_last_trial",
    "filePath": "scripts/experiments/stevens/stevens.js",
    "lines": [
      {
        "lineNumber": 515,
        "line": "  /**"
      },
      {
        "lineNumber": 516,
        "line": "   * Retrieves the last stevens trial depending on block_type for a"
      },
      {
        "lineNumber": 517,
        "line": "   * given sub condition index. "
      },
      {
        "lineNumber": 518,
        "line": "   * If this is the first trial of a given block_type, returns null. "
      },
      {
        "lineNumber": 519,
        "line": "   *"
      },
      {
        "lineNumber": 520,
        "line": "   * @param  trial {object}   "
      },
      {
        "lineNumber": 521,
        "line": "   *         block_type {string}          \"test\" or \"practice\"         "
      },
      {
        "lineNumber": 522,
        "line": "   *         index {integer}"
      },
      {
        "lineNumber": 523,
        "line": "   * @return last_stevens_trial {object}           "
      },
      {
        "lineNumber": 524,
        "line": "   */"
      },
      {
        "lineNumber": 525,
        "line": "  get_last_trial(trial, block_type, index) {"
      }
    ],
    "codeParams": [
      "trial",
      "block_type",
      "index"
    ],
    "docParams": [
      "trial"
    ]
  },
  {
    "name": "Stevens#handle_data_saving",
    "filePath": "scripts/experiments/stevens/stevens.js",
    "lines": [
      {
        "lineNumber": 554,
        "line": "  /**"
      },
      {
        "lineNumber": 555,
        "line": "   * Handles saving the relevant data on a given trial."
      },
      {
        "lineNumber": 556,
        "line": "   *"
      },
      {
        "lineNumber": 557,
        "line": "   * For reference, these are the helper variables created to assist in trial logic (i.e not present in excel)"
      },
      {
        "lineNumber": 558,
        "line": "   * this.trial_variables =         "
      },
      {
        "lineNumber": 559,
        "line": "   *       {type: 'stevens',"
      },
      {
        "lineNumber": 560,
        "line": "   *       run_type: '',"
      },
      {
        "lineNumber": 561,
        "line": "   *       left_correlation: '',"
      },
      {
        "lineNumber": 562,
        "line": "   *       right_correlation: '',"
      },
      {
        "lineNumber": 563,
        "line": "   *       round_refreshes: 0,      // Number of times there is a refresh for a given round "
      },
      {
        "lineNumber": 564,
        "line": "   *       high_ref_is_right: false"
      },
      {
        "lineNumber": 565,
        "line": "   *       start_ref: ''"
      },
      {
        "lineNumber": 566,
        "line": "   *       };"
      },
      {
        "lineNumber": 567,
        "line": "   *"
      },
      {
        "lineNumber": 568,
        "line": "   * These are variables created WITHIN the trial logic that were not present in excel (but need to be"
      },
      {
        "lineNumber": 569,
        "line": "   * outputted to results).         "
      },
      {
        "lineNumber": 570,
        "line": "   * this.export_variables = "
      },
      {
        "lineNumber": 571,
        "line": "   *       {trial_num: 0,                // Round index trial is currently on (aka trial_num from excel)"
      },
      {
        "lineNumber": 572,
        "line": "   *        sub_condition: '',           // Chronological ordering of sub_condition [1, 2, 3 ... ]"
      },
      {
        "lineNumber": 573,
        "line": "   *        balanced_sub_condition: '',  // Index of sub_condition according to balancing order"
      },
      {
        "lineNumber": 574,
        "line": "   *        estimated_mid: '',"
      },
      {
        "lineNumber": 575,
        "line": "   *        num_adjustments: 0,          // Number of inputs for a given round (aka num_adjustments from excel)"
      },
      {
        "lineNumber": 576,
        "line": "   *        trials_per_round: '',"
      },
      {
        "lineNumber": 577,
        "line": "   *       };"
      },
      {
        "lineNumber": 578,
        "line": "   *"
      },
      {
        "lineNumber": 579,
        "line": "   * @param trial {object}"
      },
      {
        "lineNumber": 580,
        "line": "   *        block_type {string}               \"test\" or \"practice\""
      },
      {
        "lineNumber": 581,
        "line": "   *        constants {assoc array}"
      },
      {
        "lineNumber": 582,
        "line": "   *        estimated_correlation {double}"
      },
      {
        "lineNumber": 583,
        "line": "   *        last_stevens_trial {object}"
      },
      {
        "lineNumber": 584,
        "line": "   *        index {integer}"
      },
      {
        "lineNumber": 585,
        "line": "   */"
      },
      {
        "lineNumber": 586,
        "line": "  handle_data_saving(trial, block_type, constants, estimated_correlation, last_stevens_trial, index) {"
      }
    ],
    "codeParams": [
      "trial",
      "block_type",
      "constants",
      "estimated_correlation",
      "last_stevens_trial",
      "index"
    ],
    "docParams": [
      "trial"
    ]
  },
  {
    "name": "Stevens#update_estimated_correlation",
    "filePath": "scripts/experiments/stevens/stevens.js",
    "lines": [
      {
        "lineNumber": 639,
        "line": "  /**"
      },
      {
        "lineNumber": 640,
        "line": "   * Updates the estimated correlation."
      },
      {
        "lineNumber": 641,
        "line": "   * If  : "
      },
      {
        "lineNumber": 642,
        "line": "   *    Is the first trial, will initialize the correlation and step size."
      },
      {
        "lineNumber": 643,
        "line": "   * Else:"
      },
      {
        "lineNumber": 644,
        "line": "   *    If there was a key press in previous trial, will calculate the"
      },
      {
        "lineNumber": 645,
        "line": "   *    the estimated correlation (depending on whether it was an inc or dec)."
      },
      {
        "lineNumber": 646,
        "line": "   *    Else if no key press in previous trial, will set estimated correlation"
      },
      {
        "lineNumber": 647,
        "line": "   *    to the previous trial's. "
      },
      {
        "lineNumber": 648,
        "line": "   *"
      },
      {
        "lineNumber": 649,
        "line": "   * @param  trial {object}   "
      },
      {
        "lineNumber": 650,
        "line": "   *         constants {object}         "
      },
      {
        "lineNumber": 651,
        "line": "   *         last_trial {object}"
      },
      {
        "lineNumber": 652,
        "line": "   * @return estimated_correlation {double}           "
      },
      {
        "lineNumber": 653,
        "line": "   */"
      },
      {
        "lineNumber": 654,
        "line": "  update_estimated_correlation(trial, constants, last_trial) {"
      }
    ],
    "codeParams": [
      "trial",
      "constants",
      "last_trial"
    ],
    "docParams": [
      "trial"
    ]
  },
  {
    "name": "randomize_position",
    "filePath": "scripts/helpers/experiment_helpers.js",
    "lines": [
      {
        "lineNumber": 4,
        "line": "/** "
      },
      {
        "lineNumber": 5,
        "line": " * Randomizes the position of the base and adjusted coordinates"
      },
      {
        "lineNumber": 6,
        "line": " * being displayed on the left or right graphs, and returns"
      },
      {
        "lineNumber": 7,
        "line": " * the coordinates for the graphs."
      },
      {
        "lineNumber": 8,
        "line": " * @param  trial {object}"
      },
      {
        "lineNumber": 9,
        "line": " *         base_coordinates { {x_values: [], y_values: []} }  "
      },
      {
        "lineNumber": 10,
        "line": " *         adjusted_coordinates { {x_values: [], y_values: []} }        "
      },
      {
        "lineNumber": 11,
        "line": " *         base_correlation {double}"
      },
      {
        "lineNumber": 12,
        "line": " *         adjusted_correlation {double}"
      },
      {
        "lineNumber": 13,
        "line": " * @return result { {left: [coordinates], right: [coordinates]} }          "
      },
      {
        "lineNumber": 14,
        "line": " */"
      },
      {
        "lineNumber": 15,
        "line": "function randomize_position(trial, base_coordinates, adjusted_coordinates, base_correlation, adjusted_correlation){"
      }
    ],
    "codeParams": [
      "trial",
      "base_coordinates",
      "adjusted_coordinates",
      "base_correlation",
      "adjusted_correlation"
    ],
    "docParams": [
      "trial"
    ]
  },
  {
    "name": "force_greater_right_position",
    "filePath": "scripts/helpers/experiment_helpers.js",
    "lines": [
      {
        "lineNumber": 61,
        "line": "/** "
      },
      {
        "lineNumber": 62,
        "line": " * Forces the right graph to always have the greater correlation."
      },
      {
        "lineNumber": 63,
        "line": " * Used for testing purposes."
      },
      {
        "lineNumber": 64,
        "line": " *"
      },
      {
        "lineNumber": 65,
        "line": " * @param  trial {object}"
      },
      {
        "lineNumber": 66,
        "line": " *         base_coordinates { {x_values: [], y_values: []} }  "
      },
      {
        "lineNumber": 67,
        "line": " *         adjusted_coordinates { {x_values: [], y_values: []} }        "
      },
      {
        "lineNumber": 68,
        "line": " *         base_correlation {double}"
      },
      {
        "lineNumber": 69,
        "line": " *         adjusted_correlation {double}"
      },
      {
        "lineNumber": 70,
        "line": " * @return result { {left: [coordinates], right: [coordinates]} }          "
      },
      {
        "lineNumber": 71,
        "line": " */"
      },
      {
        "lineNumber": 72,
        "line": "function force_greater_right_position(trial, base_coordinates, adjusted_coordinates, base_correlation, adjusted_correlation){"
      }
    ],
    "codeParams": [
      "trial",
      "base_coordinates",
      "adjusted_coordinates",
      "base_correlation",
      "adjusted_correlation"
    ],
    "docParams": [
      "trial"
    ]
  }
]